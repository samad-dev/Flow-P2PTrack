<%- contentFor('HeaderCss') %>
    <link href="assets/vendor/datatables.net-bs5/css/dataTables.bootstrap5.min.css" rel="stylesheet" type="text/css" />
    <link href="assets/vendor/datatables.net-responsive-bs5/css/responsive.bootstrap5.min.css" rel="stylesheet"
        type="text/css" />
    <link href="assets/vendor/datatables.net-fixedcolumns-bs5/css/fixedColumns.bootstrap5.min.css" rel="stylesheet"
        type="text/css" />
    <link href="assets/vendor/datatables.net-fixedheader-bs5/css/fixedHeader.bootstrap5.min.css" rel="stylesheet"
        type="text/css" />
    <link href="assets/vendor/datatables.net-buttons-bs5/css/buttons.bootstrap5.min.css" rel="stylesheet"
        type="text/css" />
    <link href="assets/vendor/datatables.net-select-bs5/css/select.bootstrap5.min.css" rel="stylesheet"
        type="text/css" />
    <!-- Select2 css -->
    <link href="assets/vendor/select2/css/select2.min.css" rel="stylesheet" type="text/css" />


    <!-- Daterangepicker css -->
    <link href="assets/vendor/daterangepicker/daterangepicker.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" href="assets/vendor/jquery-toast-plugin/jquery.toast.min.css">

    <link href="assets/vendor/flatpickr/flatpickr.min.css" rel="stylesheet" type="text/css" />
    <!-- Bootstrap Touchspin css -->
    <link href="assets/vendor/bootstrap-touchspin/jquery.bootstrap-touchspin.min.css" rel="stylesheet"
        type="text/css" />
    <link rel='stylesheet' href='https://fullcalendar.io/releases/core/4.1.0/main.min.css'>
    <link rel='stylesheet' href='https://fullcalendar.io/releases/timeline/4.1.0/main.min.css'>
    <link rel='stylesheet' href='https://fullcalendar.io/releases/resource-timeline/4.1.0/main.min.css'>
    <style>
        .fc-resource-area {
            width: 10% !important;
        }

        #calendar {
            width: 100%;
            height: 100%;
            overflow-x: auto;
            /* Allow horizontal scrolling */
            overflow-y: hidden;
            /* Disable vertical scrolling */
        }

        :root {
            --primary-color: #007bff;
            /* Define your primary color here */
            --scrollbar-bg: #f0f0f0;
            /* Define scrollbar background color */
            --scrollbar-thumb: lightgray;
            /* Define scrollbar thumb color */
        }

        /* WebKit-based browsers (Chrome, Safari) */
        ::-webkit-scrollbar {
            width: 8px;
            /* Width of vertical scrollbar */
            height: 0.3em;
            /* Height of horizontal scrollbar */
        }

        ::-webkit-scrollbar-track {
            background: var(--scrollbar-bg);
            border-radius: 10px;
            /* Background of the scrollbar track */
        }

        ::-webkit-scrollbar-thumb {
            background: #D3D3D3;
            /* Background of the scrollbar thumb */
            border-radius: 10px;
            /* Rounded corners for the scrollbar thumb */
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #4254ba;
            ;
        }

        /* darken(var(--scrollbar-thumb), 50%); */


        .select-checkbox::before {
            display: none;
        }

        .select-checkbox::after {
            display: none;
        }

        tfoot input {
            width: 100%;
            padding: 3px;
            box-sizing: border-box;
        }

        .floating-btn {
            position: fixed;
            bottom: 80px;
            right: 20px;
            z-index: 1000;
            border-radius: 50%;
            transition: transform 0.3s ease, background-color 0.3s ease;
        }

        .floating-btn:hover {
            transform: scale(1.1);
            background-color: #0056b3;
            box-shadow: 1px 2px 2px 1px darkblue;
        }

        .h6_text {
            text-align: center;
        }

        th {
            font-size: 0.7em;

        }

        tr td {
            font-size: 0.7em;
            padding: 0.3em 0.3em;
        }


        table.dataTable tbody>tr.selected td {
            color: var(--light-color);
            background-color: var(--primary-color);
        }

        .sheduled {
            background-color: yellow;
        }

        .disabled {
            background-color: #e0e0e0;
            pointer-events: none;
            opacity: 0.5;
        }

        .order-list-container {
            display: block;
            position: fixed;
            top: 10px;
            right: 10px;
            width: auto;
            /* Let the width expand dynamically */
            max-width: 600px;
            /* Maximum width is 600px */
            height: 300px;
            /* Set the height to 300px */
            background-color: #f8d7da;
            /* Light red background */
            padding: 10px;
            /* Add padding around the content */
            border-radius: 5px;
            /* Rounded corners */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            /* Shadow effect */
            z-index: 9999;
            /* Keeps it on top of other elements */
            column-gap: 20px;
            /* Gap between columns */
            overflow-y: auto;
            /* Overflow-y for vertical scrolling */
            white-space: nowrap;
            /* Prevents wrapping of content */
            transition: width 0.3s ease;
            /* Smooth width transition */
        }

        .order-list-container.overflow {
            column-count: 2;
            /* Split into two columns on overflow */
        }

        .order-list-container li {
            list-style-type: none;
            /* Remove bullet points */
            padding: 5px 0;
            /* Add spacing between items */
            font-size: 14px;
            /* Adjust font size */
            color: #721c24;
            /* Text color */
        }

        /* Custom ascending icon */
        .dataTables_wrapper .sorting_asc:after {
            content: "\f0de";
            /* Font Awesome 'up' icon */
            font-family: FontAwesome;
            font-size: 12px;
            padding-left: 5px;
        }

        /* Custom descending icon */
        .dataTables_wrapper .sorting_desc:after {
            content: "\f0dd";
            /* Font Awesome 'down' icon */
            font-family: FontAwesome;
            font-size: 12px;
            padding-left: 5px;
        }

        /* Custom neutral icon when no sorting applied */
        .dataTables_wrapper .sorting:after {
            content: "\f0dc";
            /* Font Awesome 'sort' icon */
            font-family: FontAwesome;
            font-size: 50px;
            padding-left: 5px;
        }
    </style>
    <%- contentFor('body') %>
        <div id="imp_order_error" class="order-list-container" style="display: none;">
            <!-- The order IDs will be appended here as list items -->
        </div>

        <div class="row" style="padding-top:0.4em;">
            <div class="card col-12 card-body" style="padding: 1em;margin-bottom: 0.2em;">
                <div class="row">
                    <div class="col-3" style="display: flex; justify-content: flex-start;">
                        <h4 for="" style="display:flex; align-items: center;">
                            Import Orders
                        </h4>

                    </div>

                    <div class="col-9" style="display:flex; justify-content: flex-end;">
                        <select class="form-control select2" id="scope_top" data-toggle="select2">
                            <option disabled selected hidden>Scopes</option>
                            <option value="ALL">ALL</option>
                        </select>


                        <input type="text" placeholder="Select Date" id="date" class="form-control basic-datepicker">
                        <select class="form-control select2" id="am_pm" data-toggle="select2"
                            onchange="get_vehicle(),distictvalfilter()">
                            <option hidden disabled selected>AM/PM</option>
                            <option value="AM">AM</option>
                            <option value="PM">PM</option>

                        </select>
                        <select class="form-control select2" id="shift_ord" data-toggle="select2"
                            onchange="get_vehicle(),distictvalfilter()">
                            <option hidden disabled selected>Select</option>
                            <option value="1">1</option>
                            <option value="2">2</option>

                        </select>
                        <input type="hidden" name="" id="textInput">
                        <input id="output" type="hidden" class="mt-3"></input>
                        <input type="file" name="" id="fileInput" class="form-control" style="margin-right: 20px;">

                        <!-- <button class="btn btn-primary" onclick="insert_orders()">INSERT ORDERS</button> -->
                        <button type="button" class="btn btn-primary" id="decodeButton">Import</button>&nbsp;
                        <div class="col-2">
                            <button type="button" class="btn btn-info" data-bs-toggle="modal"
                                data-bs-target="#standard-modal"><i class="ri-add-box-fill me-1"></i> <span>Create
                                    Order</span> </button>
                        </div>
                        <!-- <button onclick="" type="button" class="btn btn-soft-primary m-2" style="margin-right: 20px;">Create Order</button> -->
                    </div>

                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-7" style="padding: 0;">

                <div class="card">
                    <div class="row mt-1" style="padding-right: 1em;padding-left: 1em;">
                        <div class="col-2">
                            <div style="display:  flex; justify-content: center; align-items: center;">

                                <label for="simpleinput" class="form-label"
                                    style="margin-bottom: 0; font-size: 0.8em; padding-right: 0.4em;">Sort</label>
                                <select class="select2 select2-multiple" style="height: 0;" id="tsd_sort"
                                    data-toggle="select2" multiple="multiple">
                                    <option value="end_location">Parking Loc</option>
                                    <option value="availability">Availability</option>
                                    <option value="">Earliest</option>
                                    <option value="name">Name</option>
                                    <option value="">User Field</option>
                                </select>
                            </div>
                        </div>

                        <div class="col-2">
                            <select class="select2 form-control select2-multiple select2-hidden-accessible"
                                data-toggle="select2" multiple="" id="veh_name" onchange="filter()">
                            </select>
                        </div>
                        <div class="col-2">
                            <select class="form-control select2" id="veh_size" data-toggle="select2"
                                onchange="filter()">


                            </select>
                        </div>
                        <div class="col-2">
                            <select class="form-control select2" id="veh_str_loc" data-toggle="select2"
                                onchange="filter()">


                            </select>
                        </div>
                        <div class="col-2">
                            <select class="form-control select2" id="veh_end_loc" data-toggle="select2"
                                onchange="filter()">


                            </select>
                        </div>
                        <div class="col-2">
                            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#multipletsdedit"
                                style="margin-right: 0.2em;padding: 0.3em 0.6em 0.3em 0.6em;">Multi Tsd Edit</button>
                        </div>
                    </div>



                    <div class="card-body">
                        <div id='calendar'></div>
                    </div>
                    <!-- end card body-->
                </div> <!-- end card -->
            </div><!-- end col-->
            <div class="col-5" style="padding-right: 0;">
                <div class=" card card-body" style="box-shadow:7px 9px 14px -5px grey;">


                    <table id="ordersTable" class="table c  nowrap w-100" style="width:100%">
                        <thead style="background: lightgray;">
                            <tr>
                                <th style=" padding-top: 0.3em;padding-bottom: 0.3em;">Order Id</th>
                                <th style=" padding-top: 0.3em;padding-bottom: 0.3em;">Ship To</th>
                                <th style=" padding-top: 0.3em;padding-bottom: 0.3em;">Customer Name</th>
                                <th style=" padding-top: 0.3em;padding-bottom: 0.3em;">Order Date</th>
                                <th style=" padding-top: 0.3em;padding-bottom: 0.3em;">Product</th>
                                <th style=" padding-top: 0.3em;padding-bottom: 0.3em;">Target</th>
                                <th style=" padding-top: 0.3em;padding-bottom: 0.3em;">City</th>
                                <!-- <th>Address</th> -->
                                <!-- Add more columns if needed -->
                            </tr>
                        </thead>
                        <tbody></tbody>
                        <tfoot>
                            <tr>
                                <th>Order Id</th>
                                <th>Ship To</th>
                                <th>Customer Name</th>
                                <th>Order Date</th>
                                <th>Product</th>
                                <th>Target</th>
                                <th>City</th>
                                <!-- <th>Address</th> -->
                                <!-- Add more columns if needed -->
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>

        </div> <!-- end row-->

        <div id="modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="standard-modalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="standard-modalLabel" style="padding: 10px 0px 10px 24px">Order
                            Details</h4>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                            style="padding-right: 2rem;"></button>
                    </div>
                    <div class="modal-body" style="padding: 20px;" id="modal_row">
                        <div class="row">
                            <div class="col-5" style="padding-right: 20px;">
                                <div class="card card-body">
                                    <div class="row">

                                        <div class="col-6">

                                            <div class="mb-3">
                                                <h5>Customer:</h5>



                                            </div>
                                            <div class="mb-3">
                                                <h5>ACS Number:</h5>


                                            </div>
                                            <div class="mb-3">
                                                <h5>ShipTo:</h5>


                                            </div>
                                            <div class="mb-3">
                                                <h5>Type:</h5>



                                            </div>
                                            <div class="mb-3">
                                                <h5>Location Priority:</h5>


                                            </div>
                                            <div class="mb-3">
                                                <h5>Scheduling Status:</h5>

                                            </div>


                                        </div>
                                        <div class="col-6">
                                            <div class="mb-3">

                                                <h6 style="margin-bottom: 1.4rem;" id="customer_name"></h6>


                                            </div>
                                            <div class="mb-3">

                                                <h6 style="margin-bottom: 1.4rem;" id="asc_number"></h6>

                                            </div>
                                            <div class="mb-3">

                                                <h6 style="margin-bottom: 1.4rem;" id="ship_to"></h6>

                                            </div>
                                            <div class="mb-3">

                                                <h6 style="margin-bottom: 1.4rem;" id="type"></h6>


                                            </div>
                                            <div class="mb-3">

                                                <h6 style="margin-bottom: 1.4rem;" id="location_priority"></h6>

                                            </div>
                                            <div class="mb-3">

                                                <h6 style="margin-bottom: 1.4rem;" id="scheduling_status"></h6>
                                            </div>

                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-7 card card-body">

                                <div class="row">
                                    <div class="col-6">
                                        <div class="mb-3">
                                            <input type="hidden" id="update_id">
                                            <label for="orderPriority" class="form-label">Order Priority</label>
                                            <select class="form-control select2" id="orderPriority"
                                                data-toggle="select2">
                                                <option value="1">1</option>
                                                <option value="2">2</option>
                                                <option value="3">3</option>

                                            </select>
                                        </div>
                                        <div class="mb-3 ">
                                            <label for="orderReason" class="form-label">Order Reason</label>
                                            <select class="form-control select2" id="orderReason" data-toggle="select2">
                                                <option value="select" hidden selected disabled>Select</option>
                                            </select>
                                        </div>

                                    </div>
                                    <div class="col-6">
                                        <div class="mb-3  ">
                                            <label for="orderStatus" class="form-label">Order Status</label>
                                            <select class="form-control select2" id="orderStatus" data-toggle="select2">
                                                <option disabled hidden selected>Status</option>
                                                <option value="Must">Must</option>
                                            </select>
                                        </div>
                                        <div class="mb-3 ">
                                            <label for="scope" class="form-label">Scope</label>
                                            <select class="form-control select2" id="scope" data-toggle="select2">
                                            </select>
                                        </div>
                                    </div>


                                </div>
                            </div>


                        </div>
                        <div class="card card-body">
                            <div class="row mt-3">



                                <div class="mb-3 col-sm-12 col-lg-6">
                                    <label for="acsSpecialInstruction" class="form-label">ACS Special
                                        Instruction</label>
                                    <textarea id="acsSpecialInstruction" class="form-control" cols="30"
                                        rows="3"></textarea>
                                </div>
                                <div class="mb-3 col-sm-12 col-lg-6">
                                    <label for="deliveryInstruction" class="form-label">Delivery Instruction</label>
                                    <textarea id="deliveryInstruction" class="form-control" cols="30"
                                        rows="3"></textarea>
                                </div>
                            </div>
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Product Tank</th>
                                        <th>Min</th>
                                        <th>Target</th>
                                        <th>Max</th>
                                        <th>Hit Dead Stock</th>
                                        <th>Hit Buffer Stock</th>
                                        <th>Sales</th>
                                        <th>Stock</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td id="tank"></td>
                                        <td id="min"></td>
                                        <td id="target"></td>
                                        <td id="max"></td>
                                        <td id="dead_stock"></td>
                                        <td id="buffer_stock"></td>
                                        <td id="sales"></td>
                                        <td id="stock"></td>
                                    </tr>
                                </tbody>

                            </table>
                        </div>
                    </div>
                    <!-- <div class="modal-footer">
                        <button type="button" class="btn btn-light" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" id="save">Save changes</button>
                    </div> -->
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div>

        <div id="assign_veh" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="standard-modalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="standard-modalLabel" style="padding: 10px 0px 10px 24px">Shipments
                        </h4>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                            style="padding-right: 2rem;"></button>
                    </div>
                    <div class="modal-body" style="padding: 20px;" id="modal_row">

                        <div id="veh_alert"></div>
                        <Label class="form-label">Vehicles</Label>
                        <select class="form-control select2" id="veh" data-toggle="select2">


                        </select>


                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-light" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" id="save">Save changes</button>
                    </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div>

        <div class="offcanvas offcanvas-bottom w-100 h-100" tabindex="-1" id="offcanvasRight"
            aria-labelledby="offcanvasRightLabel">
            <div class="offcanvas-header">
                <!-- <h5 id="offcanvasRightLabel">Offcanvas right</h5> -->
                <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas"
                    aria-label="Close"></button>
            </div> <!-- end offcanvas-header-->

            <div class="offcanvas-body" id="canvas_body">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div class="col">

                        <h5 style="margin: 0;">Assign vehicle</h5>
                    </div>
                    <div class="col mb-2" style="display: flex; justify-content: right; align-items: center;">
                        <button class="btn btn-primary" style="margin-right: 0.2em; border-bottom-left-radius: 20px;
                        border-top-left-radius: 20px;" onclick="presend()">Pre <i
                                class=" ri-send-plane-fill"></i></button>
                        <button class="btn btn-primary" style="margin-right: 0.2em;" onclick="postsend()">Post <i
                                class=" ri-send-plane-fill"></i></button>
                        <button class="btn btn-primary" style="margin-right: 0.2em; border-bottom-right-radius: 20px;
                        border-top-right-radius: 20px;" onclick="sendme()"><i class=" ri-send-plane-fill"></i>
                            Me</button>
                        <!-- <button onclick="generate2()" type="button" class="btn btn-primary" style="margin-right: 0.2em;"><i
                                class="ri-upload-2-fill"></i></button>
                        <button onclick="clear()" type="button" class="btn btn-soft-primary" style="margin-right: 0.2em;"><i
                                class="ri-refresh-line"></i></button> -->
                    </div>

                </div>

                <!-- <input type="text" class="form-control mb-3" id="searchInput" placeholder="Search..."> -->
                <div class="row" id="vehicle_cards">

                </div>
                <div class="row" id="vehicle_cards2">

                </div>

            </div> <!-- end offcanvas-body-->
        </div>

        <!-- Modal Structure -->
        <div class="modal fade" id="myModal" tabindex="-1" aria-labelledby="myModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="myModalLabel">Failed Orders</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body" style="height: 400px;overflow: scroll; width: auto; ">
                        <div id="totals">

                        </div>
                        <div id="modalBody"></div>

                        <!-- The content will be dynamically updated here -->
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>


        <div id="tsd_edit_modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="standard-modalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="standard-modalLabel">TSD EDIT</h4>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body" style="padding: 20px;">
                        <form action="">
                            <div class="row mt-3" id="modal_row">

                                <div class="col-6 card card-body">

                                    <h4>TSD CV Details</h4>
                                    <div class="mb-3">
                                        <input type="hidden" name="" id="update_tsd_id">
                                        <label for="simpleinput" class="form-label">CV</label>
                                        <input type="text" class="form-control" id="cv" readonly>
                                    </div>

                                    <div class="mb-3">

                                        <div>
                                            <label for="" class="form-label">Shift</label>
                                            <select class="form-control select2" id="tsd_shift" data-toggle="select2">
                                                <option>Select</option>
                                                <option value="AM">AM</option>
                                                <option value="PM">PM</option>

                                            </select>
                                            <!-- <div class="input-group">
                                                <input type="text" id="tsd_shift" class="datetime-datepicker form-control">
                                                <span class="input-group-text"><i class="ri-calendar-line"></i></span>
                                            </div> -->
                                        </div>


                                    </div>

                                    <div class="mb-3 ">

                                        <label for="simpleinput" class="form-label">Tracktor</label>
                                        <input type="text" class="form-control" id="tsd_tracktor" readonly>
                                    </div>

                                    <div class="mb-3  ">

                                        <label for="simpleinput" class="form-label">Trailer</label>
                                        <input type="text" class="form-control" id="tsd_trailer" readonly>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="card card-body">
                                        <h4>TSD Availability</h4>
                                        <div class="mb-3  ">

                                            <label for="simpleinput" class="form-label">Availability </label>
                                            <select class="form-control select2" id="tsd_availability"
                                                data-toggle="select2">
                                                <option>Select</option>
                                                <option value="Fully Available">Fully Available</option>
                                                <option value="Not Available">Not Available</option>

                                            </select>
                                        </div>
                                        <div class="mb-3">

                                            <div>
                                                <label for="" class="form-label">Contact Type</label>
                                                <select class="form-control select2" id="tsd_contact_type"
                                                    data-toggle="select2">
                                                    <option>Select</option>
                                                    <option value="Email">Email</option>
                                                    <option value="SMS">SMS</option>
                                                </select>

                                            </div>

                                        </div>
                                        <div class="mb-3  ">
                                            <label for="simpleinput" class="form-label">Driver</label>
                                            <input type="text" class="form-control" id="tsd_driver">
                                        </div>
                                        <div class="mb-3  ">

                                            <label for="simpleinput" class="form-label">Notes</label>
                                            <textarea name="" class="form-control" id="tsd_notes" cols="30"
                                                rows="2"></textarea>
                                        </div>
                                    </div>
                                </div>
                                <div class="mt-3" style="display: flex; justify-content: center;">
                                    <h4>TSD Time And Location</h4>

                                </div>
                                <div class="col-6">
                                    <div class="card card-body">
                                        <h4>Start</h4>

                                        <div class="mb-3  ">
                                            <label for="simpleinput" class="form-label">Date/Time</label>
                                            <input type="text" class="form-control" id="tsd_str_time">
                                        </div>
                                        <div class="mb-3  ">

                                            <label for="simpleinput" class="form-label">Parking Location</label>
                                            <select class="form-control select2" id="tsd_str_location"
                                                data-toggle="select2">

                                            </select>


                                        </div>
                                        <div class="mb-3  ">


                                            <label for="simpleinput" class="form-label">Pre Load Depot</label>
                                            <select class="form-control select2" id="tsd_pre_load_depot"
                                                data-toggle="select2">

                                            </select>

                                        </div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="card card-body">
                                        <h4>End</h4>

                                        <div class="mb-3  ">

                                            <label for="simpleinput" class="form-label">Date/Time</label>
                                            <input type="text" class="form-control" id="tsd_end_time">
                                        </div>

                                        <div class="mb-3  ">

                                            <label for="simpleinput" class="form-label">Location</label>
                                            <select class="form-control select2" id="tsd_end_location"
                                                data-toggle="select2">

                                            </select>

                                        </div>

                                        <div class="mb-3  ">

                                            <label for="simpleinput" class="form-label">Post Load Depot</label>
                                            <select class="form-control select2" id="tsd_post_load_depot"
                                                data-toggle="select2">

                                            </select>

                                        </div>

                                    </div>
                                </div>

                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-light" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" onclick="tsd_update()" id="tsd_edit_modsave">Save
                            changes</button>
                    </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div>

        <div id="standard-modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="standard-modalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="standard-modalLabel">Modal</h4>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-6">
                                <div class="form-group">
                                    <label for="" class="form-label">
                                        Shipto
                                    </label>
                                    <select class="form-control select2" id="shipto" data-toggle="select2"
                                        onchange="shipto_name(this.value,'shipto_name')">


                                    </select>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="form-group">
                                    <label for="" class="form-label">
                                        Name
                                    </label>
                                    <input type="text" class="form-control" id="shipto_name">
                                </div>
                            </div>
                            <div class="col-6 mt-2">
                                <div class="row d-flex">
                                    <div class="col-6">
                                        <div class="form-group">
                                            <label for="" class="form-label">
                                                Code
                                            </label>
                                            <select class="form-control select2" data-toggle="select2" id="product"
                                                onchange="product_name(this.value,'product_name')">


                                            </select>
                                        </div>
                                    </div>
                                    <div class="col-6">
                                        <div class="form-group" style="margin-top: 0.6em;">
                                            <label for="" class="form-label">

                                            </label>
                                            <input type="text" class="form-control" id="product_name">
                                        </div>
                                    </div>
                                </div>

                            </div>
                            <div class="col-6 mt-2">
                                <div class="form-group">
                                    <label for="" class="form-label">
                                        Order Id
                                    </label>
                                    <input type="text" class="form-control" id="order_id" disabled>
                                </div>
                            </div>
                            <div class="col-6 mt-2">
                                <div class="form-group">
                                    <label for="" class="form-label">
                                        Quantity
                                    </label>
                                    <input type="number" id="qty" class="form-control">
                                </div>
                            </div>
                        </div>


                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-light" data-bs-dismiss="modal">Close</button>
                        <button type="button" onclick="create_order()" class="btn btn-primary">Save changes</button>
                    </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div>
        <input type="hidden" id="target1" value="">

        <div class="modal fade" id="multipletsdedit" tabindex="-1" aria-labelledby="myModalLabel" aria-hidden="true">

            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <input type="hidden" id="multtsdhid" name="">

                        <h5 class="modal-title">Multiple TSDs Edit</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <label for="">TSDs</label>
                        <select id="multitsdselect"
                            class="select2 form-control select2-multiple select2-hidden-accessible"
                            data-toggle="select2" multiple="" data-select2-id="select2-data-4-moyr" tabindex="-1"
                            aria-hidden="true">

                        </select>

                        <!-- The content will be dynamically updated here -->
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button class="btn btn-primary" onclick="getselval()">Edit</button>

                    </div>
                </div>
            </div>
        </div>
        <div id="mult_tsd_modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="standard-modalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="standard-modalLabel">TSD EDIT</h4>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body" style="padding: 20px;">
                        <form action="">
                            <div class="row mt-3" id="modal_row">

                                <div class="col-6 card card-body">

                                    <h4>TSD Details</h4>

                                    <div class="mb-3">

                                        <div>
                                            <label for="" class="form-label">Shift</label>
                                            <select class="form-control select2" id="multsd_shift"
                                                data-toggle="select2">
                                                <option>Select</option>
                                                <option value="AM">AM</option>
                                                <option value="PM">PM</option>

                                            </select>
                                            <!-- <div class="input-group">
                                            <input type="text" id="tsd_shift" class="datetime-datepicker form-control">
                                            <span class="input-group-text"><i class="ri-calendar-line"></i></span>
                                        </div> -->
                                        </div>
                                        <div class="mb-3">

                                            <div>
                                                <label for="" class="form-label">Contact Type</label>
                                                <select class="form-control select2" id="multsd_contact_type"
                                                    data-toggle="select2">
                                                    <option>Select</option>
                                                    <option value="Email">Email</option>
                                                    <option value="SMS">SMS</option>
                                                </select>

                                            </div>

                                        </div>

                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="card card-body">
                                        <h4>TSD Availability</h4>
                                        <div class="mb-3  ">

                                            <label for="simpleinput" class="form-label">Availability </label>
                                            <select class="form-control select2" id="multtsd_availability"
                                                data-toggle="select2">
                                                <option>Select</option>
                                                <option value="Fully Available">Fully Available</option>
                                                <option value="Not Available">Not Available</option>

                                            </select>
                                        </div>


                                        <div class="mb-3  ">

                                            <label for="simpleinput" class="form-label">Notes</label>
                                            <textarea name="" class="form-control" id="multtsd_notes" cols="30"
                                                rows="2"></textarea>
                                        </div>
                                    </div>
                                </div>
                                <div class="mt-3" style="display: flex; justify-content: center;">
                                    <h4>TSD Time And Location</h4>

                                </div>
                                <div class="col-6">
                                    <div class="card card-body">
                                        <h4>Start</h4>

                                        <div class="mb-3  ">
                                            <label for="simpleinput" class="form-label">Date/Time</label>
                                            <input type="text" class="form-control basic-timepicker"
                                                id="multtsd_str_time">
                                        </div>
                                        <div class="mb-3  ">

                                            <label for="simpleinput" class="form-label">Parking Location</label>
                                            <select class="form-control select2" id="tsd_str_location1"
                                                data-toggle="select2">

                                            </select>


                                        </div>
                                        <div class="mb-3  ">


                                            <label for="simpleinput" class="form-label">Pre Load Depot</label>
                                            <select class="form-control select2" id="tsd_pre_load_depot1"
                                                data-toggle="select2">

                                            </select>

                                        </div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="card card-body">
                                        <h4>End</h4>

                                        <div class="mb-3  ">

                                            <label for="simpleinput" class="form-label">Date/Time</label>
                                            <input type="text" class="form-control basic-timepicker"
                                                id="multtsd_end_time">
                                        </div>

                                        <div class="mb-3  ">

                                            <label for="simpleinput" class="form-label">Location</label>
                                            <select class="form-control select2" id="tsd_end_location1"
                                                data-toggle="select2">

                                            </select>

                                        </div>

                                        <div class="mb-3  ">

                                            <label for="simpleinput" class="form-label">Post Load Depot</label>
                                            <select class="form-control select2" id="tsd_post_load_depot1"
                                                data-toggle="select2">

                                            </select>

                                        </div>

                                    </div>
                                </div>

                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-light" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" onclick="tsd_update()" id="tsd_edit_modsave">Save
                            changes</button>
                    </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div>




        <%- contentFor('FooterJs') %>
            <!-- Datatables js -->
            <!-- Datatables js -->
            <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
            <script src="assets/vendor/select2/js/select2.min.js"></script>
            <script src="assets/vendor/jquery-mask-plugin/jquery.mask.min.js"></script>
            <script src="assets/vendor/bootstrap-touchspin/jquery.bootstrap-touchspin.min.js"></script>
            <script src="assets/vendor/bootstrap-maxlength/bootstrap-maxlength.min.js"></script>
            <script src="assets/vendor/handlebars/handlebars.min.js"></script>
            <script src="assets/vendor/typeahead.js/typeahead.bundle.min.js"></script>
            <script src="assets/vendor/flatpickr/flatpickr.min.js"></script>
            <script src="assets/js/pages/demo.flatpickr.js"></script>
            <script src="assets/js/pages/demo.typehead.js"></script>
            <script src="assets/vendor/daterangepicker/moment.min.js"></script>
            <script src="assets/vendor/daterangepicker/daterangepicker.js"></script> <!-- Daterangepicker Plugin js -->
            <script src="assets/vendor/daterangepicker/moment.min.js"></script>
            <script src="assets/vendor/daterangepicker/daterangepicker.js"></script>
            <script src="assets/vendor/datatables.net/js/jquery.dataTables.min.js"></script>
            <script src="assets/vendor/datatables.net-bs5/js/dataTables.bootstrap5.min.js"></script>
            <script src="assets/vendor/datatables.net-responsive/js/dataTables.responsive.min.js"></script>
            <script src="assets/vendor/datatables.net-responsive-bs5/js/responsive.bootstrap5.min.js"></script>
            <script src="assets/vendor/datatables.net-fixedcolumns-bs5/js/fixedColumns.bootstrap5.min.js"></script>
            <script src="assets/vendor/datatables.net-fixedheader/js/dataTables.fixedHeader.min.js"></script>
            <script src="assets/vendor/datatables.net-buttons/js/dataTables.buttons.min.js"></script>
            <script src="assets/vendor/datatables.net-buttons-bs5/js/buttons.bootstrap5.min.js"></script>
            <script src="assets/vendor/datatables.net-buttons/js/buttons.html5.min.js"></script>
            <script src="assets/vendor/datatables.net-buttons/js/buttons.flash.min.js"></script>
            <script src="assets/vendor/datatables.net-buttons/js/buttons.print.min.js"></script>
            <script src="assets/vendor/datatables.net-keytable/js/dataTables.keyTable.min.js"></script>
            <script src="assets/vendor/datatables.net-select/js/dataTables.select.min.js"></script>
            <script src="assets/js/pages/demo.datatable-init.js"></script>
            <script src='https://unpkg.com/react/umd/react.development.js'></script>
            <script src='https://unpkg.com/react-dom/umd/react-dom.development.js'></script>
            <script src='https://fullcalendar.io/releases/core/4.1.0/main.min.js'></script>
            <script src='https://fullcalendar.io/releases/interaction/4.1.0/main.min.js'></script>
            <script src='https://fullcalendar.io/releases/timeline/4.1.0/main.min.js'></script>
            <script src='https://fullcalendar.io/releases/resource-common/4.1.0/main.min.js'></script>
            <script src='https://fullcalendar.io/releases/resource-timeline/4.1.0/main.min.js'></script>
            <script src='https://unpkg.com/popper.js/dist/umd/popper.min.js'></script>
            <script src="assets/js/import_orders_js/script.js"></script>
            <script src="assets/vendor/jquery-toast-plugin/jquery.toast.min.js"></script>

            <script src='https://unpkg.com/tooltip.js/dist/umd/tooltip.min.js'></script>
            <script>
                var table;
                var text1;
                var shipment_no, file_run_no;
                var order_id, veh_id = [];
                var filteredData = []
                var veh_order = [];
                veh_order.am = [];
                veh_order.pm = [];
                var orders;
                let filled_volume = 0;
                var total = 0;
                let remaining_volume = 0;
                var comprules;
                var total_weight = 0;
                let errors_window = [];
                let codearray = [];
                let accessarray = [];
                let tanks_p = [];
                let complete_order;
                let allPresent;
                var sel_ord_shpto = []
                var shiptoname;
                var pre = false;
                var resource;
                var calendar;

                var timecount = 0;


                document.addEventListener('visibilitychange', function () {

                    if (document.hidden) {

                        console.log("Good Bye")

                    } else {
                        let dd = JSON.parse(localStorage.getItem('orders'));
                        console.log(dd.pm);
                        veh_order.pm = dd.pm;
                        veh_order.am = dd.am;
                        renew();
                        console.log("Welcome Back")
                    }
                });


                $(document).ready(() => {


                    select_topbar("scope_top")


                    topbar = $('#scope_top');
                    scope = localStorage.getItem("scope")
                    if (scope != "") {
                        topbar.val(scope).trigger('change');
                    }
                    $('#scope_top').change(() => {
                        localStorage.setItem("scope", topbar.val());


                    })

                    getlatest_orderId();
                    select_field('shipto');
                    select_product('product')
                    parking_loc('tsd_str_location')
                    depot('tsd_pre_load_depot')
                    parking_loc('tsd_end_location')
                    depot('tsd_post_load_depot')
                    parking_loc('tsd_str_location1')
                    depot('tsd_pre_load_depot1')
                    parking_loc('tsd_end_location1')
                    depot('tsd_post_load_depot1')



                    $.ajax({
                        url: 'shipment',
                        type: 'GET',
                        dataType: 'json',
                        success: function (response) {
                            console.log(response);


                            shipment_no = parseInt(response[0]['shipment_no']);
                            file_run_no = parseInt(response[0]['file_run_no'])
                        }
                    })
                    // get_vehicle()

                    $.ajax({
                        url: 'comp_rules',
                        type: 'GET',
                        dataType: 'json',
                        success: function (response) {
                            comprules = response

                        }
                    })


                    select_field("scope")
                    table = $('#ordersTable').DataTable({
                        scrollX: true,
                        buttons: ["copy", "print"],
                        lengthMenu: [[50, -1], [50, "All"]],
                        columnDefs: [{
                            orderable: false,
                            className: 'select-checkbox',
                            targets: 0,

                        },
                        { targets: 0, width: '1%' }],
                        select: {
                            style: 'multi',
                            selector: 'td:first-child'
                        },
                        language: {
                            paginate:
                                { previous: "<i class='ri-arrow-left-s-line'>", next: "<i class='ri-arrow-right-s-line'>" }
                        },
                        drawCallback:
                            function () { $(".dataTables_paginate > .pagination").addClass("pagination-rounded") },
                        scrollCollapse: true,
                        scrollY: '50vh',
                        createdRow: function (row, data, dataIndex) {
                            // Set the ID attribute of the row
                            $(row).attr('id', 'row-' + data[0]); // Assuming data[0] is the orderId

                        },
                        order: [[1, 'asc']]

                    });


                    table.columns().every(function () {
                        let column = this;
                        let title = $(column.footer()).text();

                        // Create input element
                        let input = document.createElement('input');
                        input.placeholder = title;
                        input.className = 'form-control';
                        $(column.footer()).empty().append(input);

                        // Event listener for user input
                        $(input).on('keyup change clear', function () {
                            if (column.search() !== this.value) {
                                column.search(this.value).draw();
                            }
                        });
                    });

                    table1 = $('#veh_tbl').DataTable({
                        dom: 'lrt',
                        keys: !0,

                        scrollX: true,
                        scrollCollapse: true,
                        scrollY: '50vh',
                        select: {
                            style: 'single',
                        },
                        language: {
                            paginate:
                                { previous: "<i class='ri-arrow-left-s-line'>", next: "<i class='ri-arrow-right-s-line'>" }
                        },
                        drawCallback:
                            function () { $(".dataTables_paginate > .pagination").addClass("pagination-rounded") },
                        order: [[1, 'asc']],
                        createdRow: function (row, data, dataIndex) {
                            // Set the ID attribute of the row
                            $(row).attr('id', 'row-' + data[0]); // Assuming data[0] is the orderId
                        }

                    });
                    table1.columns().every(function () {
                        let column = this;
                        let title = $(column.footer()).text();

                        // Create input element
                        let input = document.createElement('input');
                        input.placeholder = title;
                        input.className = 'form-control';
                        $(column.footer()).empty().append(input);

                        // Event listener for user input
                        $(input).on('keyup change clear', function () {
                            if (column.search() !== this.value) {
                                column.search(this.value).draw();
                            }
                        });
                    });



                    var settings = {
                        "url": "get_vehicle/" + scope,
                        "method": "GET",
                        "timeout": 0,
                    };

                    $.ajax(settings).done(function (response) {
                        console.log(response)
                        $('#veh').append('<option label="Scope..." >Scope</option>')


                        for (i = 0; i < response.length; i++) {
                            $('#veh').append($('<option>', {
                                value: response[i]['id'],
                                text: response[i]['name']
                            }));
                        }
                    })
                    $('tfoot tr th input').css({
                        'font-size': '0.9em'
                    });

                    $('table.dataTable thead .sorting:before').css('top', '0.1em')
                    $('#ordersTable_previous').css('background', 'white');
                    $('#ordersTable_next').css('background', 'white');

                    $('tr td').css({
                        'padding': '0.5em 1em 0.5em 1em'
                    });


                })

                scope = localStorage.getItem('scope');


                function cleanTrailerSize(trailerSize) {
                    // Remove trailing '000' and add 'KL'
                    return trailerSize.replace(/000$/, '') + 'KL';
                }

                function getlatest_orderId() {
                    var settings = {
                        "url": "latest_order_id",
                        "method": "GET",
                        "timeout": 0,
                    };

                    $.ajax(settings).done(function (response) {
                        console.log(response[0]['order_id'])
                        document.getElementById('order_id').value = response[0]['order_id'] + 1;
                    })

                }

                function select_field(id, api, code) {
                    var settings = {
                        "url": "customers_byscope/" + scope,
                        "method": "GET",
                        "timeout": 0,
                    };

                    $.ajax(settings).done(function (response) {
                        console.log(response)
                        $('#' + id + '').empty();

                        $('#' + id + '').append('<option label="Select..." value="select">Select</option>')


                        for (i = 0; i < response.length; i++) {
                            $('#' + id + '').append($('<option>', {
                                value: response[i]['id'],
                                text: response[i]['ship_to']
                            }));
                        }
                    })
                }

                function select_product(id) {
                    var settings = {
                        "url": "product",
                        "method": "GET",
                        "timeout": 0,
                    };

                    $.ajax(settings).done(function (response) {
                        console.log(response)
                        $('#' + id + '').empty();
                        $('#' + id + '').append('<option label="Select..." value="select">Select</option>')


                        for (i = 0; i < response.length; i++) {
                            $('#' + id + '').append($('<option>', {
                                value: response[i]['id'],
                                text: response[i]['code']
                            }));
                        }
                    })
                }

                function shipto_name(id, inp) {
                    console.log("id", id, inp)
                    var settings = {
                        "url": "customers_byscope/" + scope + "/" + id,
                        "method": "GET",
                        "timeout": 0,
                    };

                    $.ajax(settings).done(function (response) {
                        console.log(response[0]['site_name'])
                        $('#' + inp).val(response[0]['site_name'])
                        shiptoname = response[0]['site_name'];
                        console.log(response)
                    })
                }

                function product_name(id, inp) {
                    console.log("id", id, inp)
                    var settings = {
                        "url": "product/" + id,
                        "method": "GET",
                        "timeout": 0,
                    };

                    $.ajax(settings).done(function (response) {

                        $('#' + inp).val(response['name'])
                        console.log(response)
                    })
                }

                function refresh() {
                    veh_order = JSON.parse(localStorage.getItem('orders'));
                    // console.log(veh_order);

                    renew();
                }

                function clear() {
                    localStorage.removeItem('orders')
                    // veh_order = [];
                    // veh_order = JSON.parse(localStorage.getItem('orders'));
                    // renew();
                }

                function filter() {
                    name = $('#veh_name').val() == "select" ? null : $('#veh_name').val();
                    size = $('#veh_size').val() == "select" ? null : $('#veh_size').val();
                    start_loc = $('#veh_str_loc').val() == "select" ? null : $('#veh_str_loc').val();
                    end_loc = $('#veh_end_loc').val() == "select" ? null : $('#veh_end_loc').val();
                    scope_top = $('#scope_top').val() == "select" ? null : $('#scope_top').val();
                    let date = $('#date').val() == "" ? null : $('#date').val();
                    shift = $('#am_pm').val() == "select" ? null : $('#am_pm').val();
                    type = $('#shift_ord').val() == "select" ? null : $('#shift_ord').val();
                    $.ajax({
                        url: 'search_vehicle?name=' + name + '&size=' + size + '&start_loc=' + start_loc + '&end_loc=' + end_loc + '&scope=' + scope_top + '&date=' + date + '&shift=' + shift + '&type=' + type + '&sedate=' + date,
                        type: 'GET',
                        dataType: 'json',
                        success: function (response) {
                            // localStorage.setItem('name', name);
                            // localStorage.setItem('size', size);
                            // localStorage.setItem('start_loc', start_loc);
                            // localStorage.setItem('end_loc', end_loc);
                            // console.log("response", response, date)
                            $('#multitsdselect').empty();
                            $('#multitsdselect').append('<option label="Select..." value="select">Select</option>')


                            for (i = 0; i < response.length; i++) {
                                $('#multitsdselect').append($('<option>', {
                                    value: response[i]['id'],
                                    text: response[i]['name']
                                }));
                            }
                            calendarreload(response)

                        }
                    })
                }
                function get_vehicle() {
                    let newTime;

                    shift_ord = $('#shift_ord').val();
                    am_pm = $('#am_pm').val();
                    date = $('#date').val()

                    console.log("query", 'calendarby_shift/' + date + '/' + scope + '/' + shift_ord + '/' + am_pm)
                    $.ajax({
                        url: 'calendarby_shift/' + date + '/' + scope + '/' + shift_ord + '/' + am_pm,
                        type: 'GET',
                        dataType: 'json',
                        success: function (response) {
                            filteredData = response;
                            var extendedProps = { isParent: true };
                            resource = response;
                            // Loop through each resource and add the extendedProps property
                            resource.forEach(res => {
                                res.extendedProps = extendedProps;
                            });

                            console.log('filteredData', filteredData);
                            $('#multitsdselect').empty();
                            $('#multitsdselect').append('<option label="Select..." value="select">Select</option>')


                            for (i = 0; i < response.length; i++) {
                                $('#multitsdselect').append($('<option>', {
                                    value: response[i]['id'],
                                    text: response[i]['name']
                                }));
                            }
                            $('#vehicle_div').html(`
    <div class="row" id="shift-row">
        <!-- AM Shift Column -->
        <div class="col-md-6" id="am-shift-column">
            <h4 style="font-size:1.1em;" id="am_shift_title" ></h4>
        </div>

        <!-- PM Shift Column -->
        <div class="col-md-6" id="pm-shift-column">
            <h4 style="font-size:1.1em;" id="pm_shift_title" ></h4>
        </div>
    </div>
`);

                            let hasAM = false;
                            let hasPM = false;

                            response.forEach(veh => {
                                // Clean trailer size
                                let cleanTrailer = cleanTrailerSize(veh.trailer_size);
                                let vehicleHTML = `
        <div class="vehicle mt-1" data-name="${veh.name}" data-shift="${veh.shift}" data-total="${cleanTrailer}" id="veh-${veh.id}-${veh.shift}">
            <div class="card card-body"
                style="background: #D3D3D3;padding: 0.1em 0.2em 0.2em 1em;font-size: 0.9em;display: flex;justify-content: space-between; margin-bottom: 0.1em;">
                <div class="form-check"
                    style="display: flex; justify-content: space-between; align-items: center;">
                    <div style="display: flex; align-items: center;">
                        <input type="checkbox" class="form-check-input" style="margin-right: 0.5em;"  data-name="${veh.name}" data-shift="${veh.shift}">
                        <h5 class="card-title mb-0" style="color: #6c757d; font-size:0.8em">${veh.name}-${veh.shift}</h5>
                        <h5 class="card-title mb-0" style="padding-left: 1em; color: #6c757d;font-size:0.8em">[${veh.start_location} ${cleanTrailer}]</h5>
                    </div>

                    <div style="float: right; text-align: right; display: flex;">
                        <h5 class="card-title mb-0" style="color: #6c757d;padding-right: 2em;font-size:0.8em">${veh.end_location}</h5>
                    </div>
                </div>
            </div>

            <!-- Trips Container -->
            <div class="trips-container" style="white-space: nowrap; padding-top: 0;" id="trip-${veh.id}-${veh.shift}">
                <!-- Trip details will go here -->
            </div>
        </div>
    `;

                                // Append vehicle to the correct column based on the shift
                                if (veh.shift.toUpperCase() === 'AM') {
                                    $("#am_shift_title").text("AM Tsd's");
                                    $('#am-shift-column').append(vehicleHTML);
                                    hasAM = true;
                                } else if (veh.shift.toUpperCase() === 'PM') {
                                    $("#pm_shift_title").text("PM Tsd's");
                                    $('#pm-shift-column').append(vehicleHTML);
                                    hasPM = true;
                                }
                                $(`#veh-${veh.id}-${veh.shift} input[type="checkbox"]`).css('display', 'none');

                            });

                            // Reorder or hide columns if necessary
                            if (!hasAM) {
                                // If no AM vehicles, move PM column to the left (first)
                                $("#pm-shift-column").parent().prepend($("#pm-shift-column"));
                                $("#pm-shift-column").removeClass('col-md-6').addClass('col-md-12')
                                $("#am-shift-column").hide(); // Hide the AM column if empty
                            } else if (!hasPM) {
                                // If no PM vehicles, hide the PM column
                                $("#am-shift-column").removeClass('col-md-6').addClass('col-md-12')

                                $("#pm-shift-column").hide();
                            }

                            // response.forEach(veh => {
                            //     total_size = veh.trailer_size;
                            //     table1.row.add([
                            //         veh.name,
                            //         cleanTrailerSize(veh.trailer_size),
                            //         veh.shift,
                            //         veh.start_location,
                            //         veh.start_time,
                            //         veh.end_location,
                            //         veh.end_time,
                            //         `<td>
                            //             <button class="btn btn-soft-warning" onclick="tsd_edit(${veh.id})">
                            //                 <i class="ri-pencil-fill"></i>
                            //             </button>
                            //         </td>`
                            //     ]).draw().node();
                            // });

                            // $(document).on('click', '.vehicle', async function () {
                            //     var index2 = 0;


                            //     // veh_order.date = [];
                            //     // veh_order.am_pm = [];
                            //     // veh_order.start_date = [];
                            //     // veh_order.start_time = [];
                            //     // veh_order.temp_result = [];
                            //     // veh_order.temp_trip = [];

                            //     var ship_to = [];

                            //     veh_array = table1.row(this).data();

                            //     var vehi = filteredData.find(veh => veh.name == $(this).attr('data-name') && veh.shift == $(this).attr('data-shift'));

                            //     console.log("Finded Vehicle", vehi);

                            //     var selectedOrders1 = getSelectedData();
                            //     console.log('selectedOrders1', selectedOrders1);

                            //     let matchingIndices = orders.reduce((acc, order, index) => {
                            //         if (selectedOrders1.includes(order.orderId)) {
                            //             acc.push(index);
                            //         }
                            //         return acc;
                            //     }, []);

                            //     const temp_order = orders.filter(order => selectedOrders1.includes(order.orderId));
                            //     temp_order.Total_Distance = []
                            //     temp_order.Total_Time = []
                            //     temp_order.start_time = []
                            //     temp_order.end_time = []
                            //     temp_order.start_date = []
                            //     temp_order.end_date = []
                            //     temp_order.shift = []
                            //     var total_trip_distance = 0;
                            //     var total_trip_time = 0;
                            //     var trip_start_date;
                            //     var trip_start_time;
                            //     var trip_end_date = "";
                            //     var vehicleExists;
                            //     var vehicleshift;
                            //     // console.log('temp_order', temp_order);
                            //     var veh_orders = [];
                            //     if (vehi['shift'] == "AM") {
                            //         vehicleExists = veh_order.am.some(vehicle => vehicle.name === $(this).attr('data-name'));
                            //         vehicleshift = "am";
                            //         console.log("am", vehicleExists);


                            //     }
                            //     else if (vehi['shift'] == "PM") {
                            //         console.log("Check", vehi);

                            //         vehicleExists = veh_order.pm.some(vehicle => vehicle.name === $(this).attr('data-name'));
                            //         vehicleshift = "pm";
                            //         console.log("pm", vehicleExists);

                            //     }
                            //     else {
                            //         console.log('nothing1');

                            //     }
                            //     if (vehicleExists) {
                            //         // alert('Samad')
                            //         var vehicle_index, currentTrip;
                            //         if (vehi['shift'] == "AM") {

                            //             vehicle_index = veh_order.am.findIndex(vehicle => vehicle.name === $(this).attr('data-name'));
                            //             currentTrip = veh_order.am[vehicle_index].trip;
                            //         }
                            //         else if (vehi['shift'] == "PM") {
                            //             console.log("Vehicle Exist in PM", vehi);

                            //             vehicle_index = veh_order.pm.findIndex(vehicle => vehicle.name === $(this).attr('data-name'));
                            //             currentTrip = veh_order.pm[vehicle_index].trip;

                            //         }
                            //         else {
                            //             console.log('nothing1');

                            //         }
                            //         //  vehicle_index = veh_order.findIndex(vehicle => vehicle.name === $(this).attr('data-name'));
                            //         //  currentTrip = veh_order[vehicle_index].trip;
                            //         let filled_volume = 0;

                            //         // Calculate the filled volume for the current trip
                            //         currentTrip[currentTrip.length - 1].orders.forEach(order => {
                            //             filled_volume += parseInt(order.target);
                            //         });

                            //         var total_capacity = parseInt($(this).attr('data-total')) * 1000;
                            //         var new_order_volume = temp_order.reduce((acc, order) => acc + parseInt(order.target), 0);
                            //         var total_cfilled = filled_volume + new_order_volume;

                            //         if (total_cfilled <= total_capacity) {
                            //             // Add the new orders to the current trip
                            //             currentTrip[currentTrip.length - 1].orders.push(...temp_order);
                            //             matchingIndices.forEach(index => {
                            //                 orders[index].status = "Scheduled";
                            //             });
                            //             // sel_ord_shpto.push(veh_order[0].load_depot);
                            //             // veh_order[vehicle_index].date = $('#date').val();
                            //             // veh_order[vehicle_index].am_pm = $('#am_pm').val();
                            //             // orders_v(veh_order);
                            //             unsheduled_orderlist(orders);
                            //             veh_card(veh_order);
                            //             console.log('shiptos', sel_ord_shpto);
                            //         } else {
                            //             Swal.fire({
                            //                 icon: "error",
                            //                 title: "Vehicle is already full!.",
                            //                 text: "Is it Another Trip?",
                            //                 showDenyButton: true,
                            //                 confirmButtonText: "Yes",
                            //                 denyButtonText: `No`
                            //             }).then((result) => {
                            //                 if (result.isConfirmed) {
                            //                     // Clear filled_volume when starting a new trip
                            //                     filled_volume = 0;
                            //                     // veh_order[vehicle_index].date = $('#date').val();
                            //                     // veh_order[vehicle_index].am_pm = $('#am_pm').val();
                            //                     shipment_no += 1;
                            //                     file_run_no += 1;
                            //                     // veh_order[vehicle_index].trip.push({
                            //                     //     "trip_no": veh_order[vehicle_index].trip.length + 1,
                            //                     //     "orders": temp_order,
                            //                     //     "shipment_no": shipment_no,
                            //                     //     "file_run_no": file_run_no,
                            //                     // });

                            //                     // orders_v(veh_order);
                            //                     Swal.fire("New Trip Created!", "", "success");

                            //                     matchingIndices.forEach(index => {
                            //                         orders[index].status = "Scheduled";
                            //                     });




                            //                     temp_order.forEach(async (temp, index) => {
                            //                         console.log(temp.shipTo);
                            //                         sel_ord_shpto.push(temp.shipTo);
                            //                         ship_to = [];
                            //                         var veh_o = [];
                            //                         if (vehicleshift == 'am') {
                            //                             veh_o = veh_order.am;
                            //                         }
                            //                         else if (vehicleshift == 'pm') {
                            //                             veh_o = veh_order.pm;
                            //                         }

                            //                         if (index == 0) {
                            //                             ship_to.push(veh_o[vehicle_index].load_depot);
                            //                             ship_to.push(temp.shipTo);
                            //                             console.log("Index -- 0", ship_to);
                            //                             eta_d = await calc_eta(ship_to);
                            //                             var trip_index2 = veh_o[vehicle_index].trip.length - 1;
                            //                             trip_start_date = veh_o[vehicle_index].trip[trip_index2]['end_date'];
                            //                             trip_start_time = veh_o[vehicle_index].trip[trip_index2]['end_time'];
                            //                             temp.start_time = trip_start_time;
                            //                             console.log("Trip Start Date time", trip_start_date, trip_start_time);
                            //                             console.log("check", trip_start_date, veh_o[vehicle_index].shift, trip_start_time, convertMinutesToTimeFormat(eta_d['Total Time']));
                            //                             var result = addDurationToTime(trip_start_date, veh_o[vehicle_index].shift, trip_start_time, convertMinutesToTimeFormat(eta_d['Total Time']));
                            //                             veh_o[vehicle_index].temp_result = result
                            //                             temp.Total_Distance = eta_d['Total Distance']
                            //                             total_trip_distance += parseInt(eta_d['Total Distance']);

                            //                             total_trip_time += eta_d['Total Time']

                            //                             console.log("Result1", total_trip_distance);
                            //                             temp.Total_Time = convertMinutesToTimeFormat(eta_d['Total Time']);
                            //                             // temp.start_time = trip_start_time;
                            //                             temp.end_time = result['newTime'];
                            //                             temp.start_date = trip_start_date;

                            //                             temp.end_date = result['newDate'];
                            //                             temp.shift = result['newShift'];
                            //                             // trip_start_time = trip_start_time;




                            //                         } else {
                            //                             if (temp.shipTo == temp_order[index - 1].shipTo) {
                            //                                 ship_to.push(veh_o[vehicle_index].load_depot);
                            //                                 ship_to.push(temp.shipTo);
                            //                                 eta_d = await calc_eta(ship_to);

                            //                                 var result = addDurationToTime(trip_start_date, veh_o[vehicle_index].shift, temp_order[index - 1].start_time, convertMinutesToTimeFormat(eta_d['Total Time']));
                            //                                 veh_o[vehicle_index].temp_result = result
                            //                                 temp.Total_Distance = eta_d['Total Distance']
                            //                                 temp.Total_Time = convertMinutesToTimeFormat(eta_d['Total Time']);
                            //                                 temp.start_time = temp_order[index - 1].start_time;
                            //                                 // alert('Samad');
                            //                                 temp.end_time = result['newTime'];
                            //                                 temp.start_date = trip_start_date;
                            //                                 temp.end_date = result['newDate'];
                            //                                 temp.shift = result['newShift'];


                            //                             } else {
                            //                                 // console.log("Temp Order Length", temp_order.length, index);
                            //                                 ship_to.push(temp_order[index - 1].shipTo);
                            //                                 ship_to.push(temp.shipTo);
                            //                                 // console.log("shipto_array", ship_to)
                            //                                 eta_d = await calc_eta(ship_to);
                            //                                 total_trip_distance += parseInt(eta_d['Total Distance']);
                            //                                 console.log(total_trip_distance);
                            //                                 temp.start_time = veh_o[vehicle_index].temp_result['newTime'];
                            //                                 trip_start_time = veh_o[vehicle_index].temp_result['newTime'];
                            //                                 var result = addDurationToTime(plan_date, veh_o[vehicle_index].shift, trip_start_time, convertMinutesToTimeFormat(eta_d['Total Time']));
                            //                                 console.log("Result", result['newTime']);
                            //                                 veh_o[vehicle_index].temp_result = result
                            //                                 temp.Total_Distance = eta_d['Total Distance']


                            //                                 total_trip_time += eta_d['Total Time']
                            //                                 temp.Total_Time = convertMinutesToTimeFormat(eta_d['Total Time']);
                            //                                 console.log("Trip End Time", temp_order[index - 1].end_time);
                            //                                 trip_start_time = addMinutes(result['newTime'], 1);

                            //                                 console.log("Trip Start Time", trip_start_time);
                            //                                 // alert('Sa')
                            //                                 temp.end_time = result['newTime'];
                            //                                 temp.start_date = plan_date;
                            //                                 temp.end_date = result['newDate'];
                            //                                 temp.shift = result['newShift'];

                            //                             }

                            //                         }
                            //                         if (index == temp_order.length - 1) {
                            //                             console.log("Total Distance", total_trip_distance);
                            //                             veh_o[vehicle_index].trip.push({
                            //                                 "trip_no": veh_o[vehicle_index].trip.length + 1,
                            //                                 "orders": temp_order,
                            //                                 "shipment_no": shipment_no,
                            //                                 "file_run_no": file_run_no,
                            //                                 "total_dist": total_trip_distance.toString(),
                            //                                 "total_time": total_trip_time,
                            //                                 "start_date": trip_start_date,
                            //                                 "start_time": temp.start_time,
                            //                                 "end_time": temp.end_time,
                            //                                 // "end_date": veh_order[vehicle_index].temp_result['newDate'],

                            //                             });

                            //                         }
                            //                         // console.log("ETA Ship_to", ship_to);
                            //                     });



                            //                     unsheduled_orderlist(orders);
                            //                     veh_card(veh_order);
                            //                     // sel_ord_shpto.push(veh_order[0].load_depot);
                            //                     // console.log("vehicle_length", veh_order[vehicle_index].trip.length);
                            //                     // console.log('shiptos', sel_ord_shpto);
                            //                 }
                            //                 else if (result.isDenied) {
                            //                     Swal.fire("Changes are not saved", "", "info");
                            //                 }
                            //             });
                            //         }
                            //     }
                            //     else {
                            //         if (vehi['shift'] == "AM") {
                            //             const newVehicle = JSON.parse(JSON.stringify(vehi));
                            //             console.log("Deep Copied Vehicle (before push):", newVehicle);
                            //             veh_order.am = [newVehicle, ...veh_order.am];
                            //             vehi = [];
                            //             veh_orders = veh_order.am
                            //             console.log("AM Vehicle", veh_orders.am);

                            //         }
                            //         else if (vehi['shift'] == "PM") {
                            //             console.log("Initial Selected Vehicle:", vehi);
                            //             const newVehicle = JSON.parse(JSON.stringify(vehi));
                            //             console.log("Deep Copied Vehicle (before push):", newVehicle);
                            //             vehi = [];
                            //             veh_order.pm = [newVehicle, ...veh_order.pm];
                            //             // Push the deep copy to the array
                            //             console.log("Updated PM Vehicles:", veh_order.pm);

                            //             veh_orders = veh_order.pm;
                            //             console.log("PM Vehicle", veh_orders);


                            //         }
                            //         else {
                            //             console.log('nothing1');

                            //         }

                            //         let filled_volume = 0;
                            //         const temp_order = orders.filter(order => selectedOrders1.includes(order.orderId));
                            //         filled_volume = temp_order.reduce((acc, order) => acc + parseInt(order.target), 0);

                            //         const vehicle_index = veh_orders.findIndex(vehicle => vehicle.name === $(this).attr('data-name'));
                            //         // console.log("Selected Vehicle",veh_orders[vehicle_index]);

                            //         veh_orders[vehicle_index].trip = [];
                            //         shipment_no += 1;
                            //         file_run_no += 1;

                            //         sel_ord_shpto.push(veh_orders[0].load_depot);
                            //         veh_orders[vehicle_index].date = $('#date').val();
                            //         veh_orders[vehicle_index].am_pm = $('#am_pm').val();

                            //         // orders_v(veh_orders);

                            //         veh_orders[vehicle_index].orders = temp_order;
                            //         console.log("temp_orderget", temp_order[0].shipTo);
                            //         plan_date = $('#date').val();
                            //         temp_order.forEach(async (temp, index) => {
                            //             // console.log(temp.shipTo);
                            //             sel_ord_shpto.push(temp.shipTo);
                            //             ship_to = [];

                            //             if (index == 0) {
                            //                 ship_to.push(veh_orders[vehicle_index].load_depot);
                            //                 ship_to.push(temp.shipTo);
                            //                 // console.log("Index -- 0", ship_to);
                            //                 eta_d = await calc_eta(ship_to);
                            //                 trip_start_date = plan_date;
                            //                 var result = addDurationToTime(plan_date, veh_orders[vehicle_index].shift, veh_orders[vehicle_index].start_time, convertMinutesToTimeFormat(eta_d['Total Time']));
                            //                 veh_orders[vehicle_index].temp_result = result
                            //                 temp.Total_Distance = eta_d['Total Distance']
                            //                 total_trip_distance += parseInt(eta_d['Total Distance']);
                            //                 trip_end_date = result['newDate'];
                            //                 total_trip_time += eta_d['Total Time']

                            //                 // console.log("Result1", total_trip_distance);
                            //                 temp.Total_Time = convertMinutesToTimeFormat(eta_d['Total Time']);
                            //                 temp.start_time = veh_orders[vehicle_index].start_time;
                            //                 temp.end_time = result['newTime'];
                            //                 temp.start_date = plan_date;
                            //                 temp.end_date = result['newDate'];
                            //                 temp.shift = result['newShift'];
                            //                 trip_start_time = veh_orders[vehicle_index].start_time;




                            //             }
                            //             else {
                            //                 if (temp.shipTo == temp_order[index - 1].shipTo) {
                            //                     ship_to.push(veh_orders[vehicle_index].load_depot);
                            //                     ship_to.push(temp.shipTo);
                            //                     eta_d = await calc_eta(ship_to);
                            //                     console.log(plan_date)
                            //                     var result = addDurationToTime(plan_date, veh_orders[vehicle_index].shift, veh_orders[vehicle_index].start_time, convertMinutesToTimeFormat(eta_d['Total Time']));
                            //                     veh_orders[vehicle_index].temp_result = result
                            //                     temp.Total_Distance = eta_d['Total Distance']
                            //                     temp.Total_Time = convertMinutesToTimeFormat(eta_d['Total Time']);
                            //                     temp.start_time = veh_orders[vehicle_index].start_time;
                            //                     temp.end_time = result['newTime'];
                            //                     temp.start_date = plan_date;
                            //                     temp.end_date = result['newDate'];
                            //                     temp.shift = result['newShift'];


                            //                 } else {
                            //                     // console.log("Temp Order Length", temp_order.length, index);
                            //                     ship_to.push(temp_order[index - 1].shipTo);
                            //                     ship_to.push(temp.shipTo);
                            //                     // console.log("shipto_array", ship_to)
                            //                     eta_d = await calc_eta(ship_to);
                            //                     total_trip_distance += parseInt(eta_d['Total Distance']);
                            //                     console.log(total_trip_distance);
                            //                     temp.start_time = veh_orders[vehicle_index].temp_result['newTime'];
                            //                     trip_start_time = veh_orders[vehicle_index].temp_result['newTime'];
                            //                     var result = addDurationToTime(plan_date, veh_orders[vehicle_index].shift, trip_start_time, convertMinutesToTimeFormat(eta_d['Total Time']));
                            //                     // console.log("Result", result['newTime']);
                            //                     veh_orders[vehicle_index].temp_result = result
                            //                     temp.Total_Distance = eta_d['Total Distance']


                            //                     total_trip_time += eta_d['Total Time']
                            //                     temp.Total_Time = convertMinutesToTimeFormat(eta_d['Total Time']);
                            //                     // console.log("Trip End Time", temp_order[index - 1].end_time);
                            //                     trip_start_time = addMinutes(result['newTime'], 1);

                            //                     // console.log("Trip Start Time", trip_start_time);
                            //                     trip_end_date = result['newDate'];

                            //                     temp.end_time = result['newTime'];
                            //                     temp.start_date = plan_date;
                            //                     temp.end_date = result['newDate'];
                            //                     temp.shift = result['newShift'];

                            //                 }

                            //             }
                            //             if (index == temp_order.length - 1) {
                            //                 console.log("Total Distance", total_trip_distance);
                            //                 let newTime = addMinutesToTime(trip_start_time, total_trip_time);
                            //                 veh_orders[vehicle_index].trip.push({
                            //                     "trip_no": veh_orders[vehicle_index].trip.length + 1,
                            //                     "orders": temp_order,
                            //                     "shipment_no": shipment_no,
                            //                     "file_run_no": file_run_no,
                            //                     "total_dist": total_trip_distance.toString(),
                            //                     "total_time": total_trip_time,
                            //                     "start_date": trip_start_date,
                            //                     "start_time": veh_orders[vehicle_index].start_time,
                            //                     "end_time": newTime,
                            //                     "end_date": trip_end_date,
                            //                     // "end_date": veh_order[vehicle_index].temp_result['newDate'],
                            //                     // "end_time": veh_order[vehicle_index].temp_result['newTime']
                            //                 });

                            //             }
                            //             // console.log("ETA Ship_to", ship_to);
                            //         });




                            //         matchingIndices.forEach(index => {
                            //             orders[index].status = "Scheduled";
                            //         });


                            //         unsheduled_orderlist(orders);
                            //         console.log(veh_orders[0]['shift']);
                            //         if (veh_orders[0]['shift'] == "PM") {
                            //             const v_index = veh_orders.findIndex(vehicle => vehicle.name === $(this).attr('data-name'));
                            //             // alert(v_index)
                            //             veh_order.pm[v_index] = veh_orders[0]
                            //             console.log(veh_order);

                            //         }
                            //         else if (veh_orders[0]['shift'] == "AM") {
                            //             const v_index = veh_orders.findIndex(vehicle => vehicle.name === $(this).attr('data-name'));
                            //             // alert(v_index)
                            //             veh_order.am[v_index] = veh_orders[0]
                            //             console.log(veh_order);
                            //         }
                            //         else {
                            //             console.log('nothing');
                            //         }

                            //         veh_card(veh_order);

                            //         console.log('shiptos', sel_ord_shpto);
                            //     }

                            // });



                            $('tr td').css({
                                'padding': '0.5em 1em 0.5em 1em'
                            });
                        }
                        // $('#' + id + '').append('<option label="Select..." value="select">Select</option>')



                    }).always(function (resp) {
                        console.log("alwaysres", resp);
                        let lastClickTime = 0;
                        const doubleClickThreshold = 300;
                        var calendarEl = document.getElementById('calendar');
                        if (!calendar) {
                            calendar = new FullCalendar.Calendar(calendarEl, {
                                plugins: ['interaction', 'resourceTimeline'],
                                timeZone: 'UTC',
                                defaultDate: $('#date').val(),
                                defaultView: 'resourceTimelineDay',
                                aspectRatio: 1,
                                resourceOrder: $('#tsd_sort').val(),
                                header: {
                                    left: '',
                                    center: '',
                                    right: ''
                                },
                                editable: true,
                                eventOverlap: true,
                                eventOrder: 'start',
                                views: {
                                    resourceTimeline: {
                                        duration: { days: 2 } // This sets the view duration to 2 days
                                    }
                                },
                                slotDuration: '00:10:00',
                                resourceRender: function (info) {
                                    var questionMark = document.createElement('a');
                                    questionMark.innerText = ' (?) ';
                                    info.el.querySelector('.fc-cell-text').appendChild(questionMark);

                                    var tooltip = new Tooltip(questionMark, {
                                        html: true,
                                        title: '<span id="wewe">12121dfsfsdfsdfsdfsdfsdfsdfsdfsdsdfsdf<br/>fdfdfdf</span>',
                                        placement: 'right-start',
                                        trigger: 'hover',
                                        closeOnClickOutside: true,
                                        container: 'body'
                                    });
                                },
                                eventAllow: function (dropInfo, draggedEvent) {
                                    return draggedEvent.resourceId === dropInfo.resource.id;
                                },
                                resourceLabelText: 'Vehicles',
                                resources: resp,
                                events: resp.map(event => {
                                    // Construct a new event object
                                    const modifiedEvent = {
                                        ...event, // Spread the original event properties first
                                        id: `${event.id}_${event.shift}`, // Override the id property with the new combined value
                                        // Explicitly set the shift property
                                        extendedProps: {
                                            ...(event.extendedProps || {}), // Safely spread existing extendedProps (if present)
                                            isParent: true // Ensure isParent is set to true
                                        }
                                    };

                                    // Log the modified event to inspect its structure
                                    console.log('Modified Event:', modifiedEvent);

                                    return modifiedEvent;
                                }),




                                eventClick: function (resp) {
                                    const currentTime = new Date().getTime();
                                    const timeDiff = currentTime - lastClickTime;

                                    if (timeDiff < doubleClickThreshold) {
                                        // This is a double-click
                                        console.log('Double-clicked on event:', resp.event.title);
                                        alert('Double-clicked on: ' + resp.event.title);
                                    } else {
                                        // This is a single click
                                        // Handle single-click logic here if needed

                                        // Update the last click time
                                        lastClickTime = currentTime;
                                        const shift = resp.event.id.split("_")[1]; // This will give you "AM"
                                        console.log(shift); // Output: "AM"
                                        console.log(resp)
                                        console.log("filteredData", filteredData);
                                        console.log("filteredData", filteredData, resp.event.title);

                                        var index2 = 0;

                                        var ship_to = [];

                                        veh_array = table1.row(this).data();

                                        var vehi = filteredData.find(veh => veh.name == resp.event.title && veh.shift == shift);
                                        console.log("Finded Vehicle", vehi);


                                        var selectedOrders1 = getSelectedData();
                                        console.log('selectedOrders1', selectedOrders1);

                                        let matchingIndices = orders.reduce((acc, order, index) => {
                                            if (selectedOrders1.includes(order.orderId)) {
                                                acc.push(index);
                                            }
                                            return acc;
                                        }, []);

                                        const temp_order = orders.filter(order => selectedOrders1.includes(order.orderId));

                                        const distinctShipTos = [...new Set(temp_order.map(order => order.shipTo))];
                                        console.log("/vehicle_access/" + vehi['id'] + "?shipTos=" + distinctShipTos.join(','));

                                        var settings = {
                                            "url": "/vehicle_access/" + vehi['id'] + "?shipTos=" + distinctShipTos.join(','),
                                            "method": "GET",
                                            "timeout": 0,
                                        };

                                        $.ajax(settings).done(function (response) {
                                            var rejstatus = []
                                            response.forEach(resp => {
                                                resp.status == "rejected"
                                                rejstatus.push(resp.status)

                                            })
                                            if (rejstatus.length > 0) {
                                                errors_window.push({ "error_name": "Vehicle Access Error." })
                                            }
                                        });

                                        console.log(distinctShipTos);
                                        temp_order.Total_Distance = []
                                        temp_order.Total_Time = []
                                        temp_order.start_time = []
                                        temp_order.end_time = []
                                        temp_order.start_date = []
                                        temp_order.end_date = []
                                        temp_order.shift = []
                                        var total_trip_distance = 0;
                                        var total_trip_time = 0;
                                        var trip_start_date;
                                        var trip_start_time;
                                        var trip_end_date = "";
                                        var vehicleExists;
                                        var vehicleshift;
                                        // console.log('temp_order', temp_order);
                                        var veh_orders = [];
                                        if (vehi['shift'] == "AM") {
                                            vehicleExists = veh_order.am.some(vehicle => vehicle.name === resp.event.title);
                                            vehicleshift = "am";
                                            console.log("am", vehicleExists);

                                        }
                                        else if (vehi['shift'] == "PM") {
                                            console.log("Check", vehi);

                                            vehicleExists = veh_order.pm.some(vehicle => vehicle.name === resp.event.title);
                                            vehicleshift = "pm";
                                            console.log("pm", vehicleExists);

                                        }
                                        else {
                                            console.log('nothing1');

                                        }
                                        if (vehicleExists) {
                                            console.log('vehicleExists', vehicleExists);
                                            // alert('Samad')
                                            var vehicle_index, currentTrip;
                                            if (vehi['shift'] == "AM") {
                                                findveh = veh_order.am.find(vehicle => vehicle.name === resp.event.title)
                                                vehicle_index = veh_order.am.findIndex(vehicle => vehicle.name === resp.event.title);
                                                currentTrip = veh_order.am[vehicle_index].trip;
                                            }
                                            else if (vehi['shift'] == "PM") {
                                                console.log("Vehicle Exist in PM", vehi);
                                                findveh = veh_order.pm.find(vehicle => vehicle.name === resp.event.title)
                                                vehicle_index = veh_order.pm.findIndex(vehicle => vehicle.name === resp.event.title);
                                                currentTrip = veh_order.pm[vehicle_index].trip;

                                            }
                                            else {
                                                console.log('nothing1');

                                            }
                                            //  vehicle_index = veh_order.findIndex(vehicle => vehicle.name === $(this).attr('data-name'));
                                            //  currentTrip = veh_order[vehicle_index].trip;
                                            let filled_volume = 0;

                                            // Calculate the filled volume for the current trip
                                            currentTrip[currentTrip.length - 1].orders.forEach(order => {
                                                filled_volume += parseInt(order.target);
                                            });


                                            console.log("findveh", findveh)
                                            var total_capacity = parseInt(findveh['trailer_size']);
                                            var new_order_volume = temp_order.reduce((acc, order) => acc + parseInt(order.target), 0);
                                            var total_cfilled = filled_volume + new_order_volume;

                                            if (total_cfilled <= total_capacity) {
                                                // Add the new orders to the current trip
                                                currentTrip[currentTrip.length - 1].orders.push(...temp_order);
                                                var orderorderId = []

                                                matchingIndices.forEach(index => {
                                                    orders[index].status = "Scheduled";
                                                });
                                                orderorderId.forEach(ord => {
                                                    $('#row-' + ord).remove();
                                                })

                                                // sel_ord_shpto.push(veh_order[0].load_depot);
                                                // veh_order[vehicle_index].date = $('#date').val();
                                                // veh_order[vehicle_index].am_pm = $('#am_pm').val();
                                                // orders_v(veh_order);
                                                // unsheduled_orderlist(orders);
                                                veh_card(veh_order);
                                                console.log('shiptos', sel_ord_shpto);
                                            } else {
                                                Swal.fire({
                                                    icon: "error",
                                                    title: "Vehicle is already full!.",
                                                    text: "Is it Another Trip?",
                                                    showDenyButton: true,
                                                    confirmButtonText: "Yes",
                                                    denyButtonText: `No`
                                                }).then((result) => {
                                                    if (result.isConfirmed) {
                                                        // Clear filled_volume when starting a new trip
                                                        filled_volume = 0;
                                                        var trip2_end_date;
                                                        // veh_order[vehicle_index].date = $('#date').val();
                                                        // veh_order[vehicle_index].am_pm = $('#am_pm').val();
                                                        shipment_no += 1;
                                                        file_run_no += 1;
                                                        // veh_order[vehicle_index].trip.push({
                                                        //     "trip_no": veh_order[vehicle_index].trip.length + 1,
                                                        //     "orders": temp_order,
                                                        //     "shipment_no": shipment_no,
                                                        //     "file_run_no": file_run_no,
                                                        // });

                                                        // orders_v(veh_order);
                                                        Swal.fire("New Trip Created!", "", "success");

                                                        matchingIndices.forEach(index => {
                                                            orders[index].status = "Scheduled";
                                                        });




                                                        temp_order.forEach(async (temp, index) => {
                                                            console.log(temp.shipTo);
                                                            sel_ord_shpto.push(temp.shipTo);
                                                            ship_to = [];
                                                            var veh_o = [];
                                                            if (vehicleshift == 'am') {
                                                                veh_o = veh_order.am;
                                                            }
                                                            else if (vehicleshift == 'pm') {
                                                                veh_o = veh_order.pm;
                                                            }

                                                            if (index == 0) {
                                                                ship_to.push(veh_o[vehicle_index].load_depot);
                                                                ship_to.push(temp.shipTo);
                                                                console.log("Index -- 0", ship_to);
                                                                eta_d = await calc_eta(ship_to);
                                                                var trip_index2 = veh_o[vehicle_index].trip.length - 1;
                                                                trip_start_date = veh_o[vehicle_index].trip[trip_index2]['end_date'];
                                                                trip_start_time = veh_o[vehicle_index].trip[trip_index2]['end_time'];
                                                                temp.start_time = trip_start_time;
                                                                console.log("Trip Start Date time", trip_start_date, trip_start_time);
                                                                console.log("check", trip_start_date, veh_o[vehicle_index].shift, trip_start_time, convertMinutesToTimeFormat(eta_d['Total Time']));
                                                                var result = addDurationToTime(trip_start_date, veh_o[vehicle_index].shift, trip_start_time, convertMinutesToTimeFormat(eta_d['Total Time']));
                                                                veh_o[vehicle_index].temp_result = result
                                                                temp.Total_Distance = eta_d['Total Distance']
                                                                total_trip_distance += parseInt(eta_d['Total Distance']);

                                                                total_trip_time += eta_d['Total Time']

                                                                console.log("Result1", total_trip_distance);
                                                                temp.Total_Time = convertMinutesToTimeFormat(eta_d['Total Time']);
                                                                // temp.start_time = trip_start_time;
                                                                temp.end_time = result['newTime'];
                                                                temp.start_date = trip_start_date;
                                                                temp.end_date = result['newDate'];
                                                                temp.shift = result['newShift'];
                                                                // trip_start_time = trip_start_time;




                                                            } else {
                                                                if (temp.shipTo == temp_order[index - 1].shipTo) {
                                                                    ship_to.push(veh_o[vehicle_index].load_depot);
                                                                    ship_to.push(temp.shipTo);
                                                                    eta_d = await calc_eta(ship_to);

                                                                    var result = addDurationToTime(trip_start_date, veh_o[vehicle_index].shift, temp_order[index - 1].start_time, convertMinutesToTimeFormat(eta_d['Total Time']));
                                                                    veh_o[vehicle_index].temp_result = result
                                                                    temp.Total_Distance = eta_d['Total Distance']
                                                                    temp.Total_Time = convertMinutesToTimeFormat(eta_d['Total Time']);
                                                                    temp.start_time = temp_order[index - 1].start_time;
                                                                    // alert('Samad');
                                                                    temp.end_time = result['newTime'];
                                                                    temp.start_date = trip_start_date;
                                                                    temp.end_date = result['newDate'];
                                                                    temp.shift = result['newShift'];


                                                                } else {
                                                                    // console.log("Temp Order Length", temp_order.length, index);
                                                                    ship_to.push(temp_order[index - 1].shipTo);
                                                                    ship_to.push(temp.shipTo);
                                                                    // console.log("shipto_array", ship_to)
                                                                    eta_d = await calc_eta(ship_to);
                                                                    total_trip_distance += parseInt(eta_d['Total Distance']);
                                                                    console.log(total_trip_distance);
                                                                    temp.start_time = veh_o[vehicle_index].temp_result['newTime'];
                                                                    trip_start_time = veh_o[vehicle_index].temp_result['newTime'];
                                                                    var result = addDurationToTime(plan_date, veh_o[vehicle_index].shift, trip_start_time, convertMinutesToTimeFormat(eta_d['Total Time']));
                                                                    console.log("Result", result['newTime']);
                                                                    veh_o[vehicle_index].temp_result = result
                                                                    temp.Total_Distance = eta_d['Total Distance']


                                                                    total_trip_time += eta_d['Total Time']
                                                                    temp.Total_Time = convertMinutesToTimeFormat(eta_d['Total Time']);
                                                                    console.log("Trip End Time", temp_order[index - 1].end_time);
                                                                    trip_start_time = addMinutes(result['newTime'], 1);

                                                                    console.log("Trip Start Time", trip_start_time);
                                                                    // alert('Sa')
                                                                    temp.end_time = result['newTime'];
                                                                    temp.start_date = plan_date;
                                                                    temp.end_date = result['newDate'];
                                                                    temp.shift = result['newShift'];


                                                                }

                                                            }
                                                            if (index == temp_order.length - 1) {
                                                                console.log("Total Distance", total_trip_distance);
                                                                newTime = addMinutesToTime(trip_start_time, total_trip_time);

                                                                veh_o[vehicle_index].trip.push({
                                                                    "trip_no": veh_o[vehicle_index].trip.length + 1,
                                                                    "orders": temp_order,
                                                                    "shipment_no": shipment_no,
                                                                    "file_run_no": file_run_no,
                                                                    "total_dist": total_trip_distance.toString(),
                                                                    "total_time": total_trip_time,
                                                                    "start_date": trip_start_date,
                                                                    "start_time": temp.start_time,
                                                                    "end_time": newTime,
                                                                    "end_date": temp.end_date,
                                                                    // "end_time": veh_order[vehicle_index].temp_result['newTime']
                                                                });
                                                                var clickedEvent = resp.event;
                                                                // Check if the clicked event is a parent event
                                                                if (clickedEvent.extendedProps.isParent) {
                                                                    var parentEnd = clickedEvent.start;

                                                                    // Set the start time for the sub-event below the parent
                                                                    var subEventStart = new Date(parentEnd);
                                                                    subEventStart.setHours(subEventStart.getHours() + timecount);
                                                                    var subEventEnd = new Date(subEventStart);
                                                                    subEventEnd.setHours(subEventEnd.getHours() + timecount + 2);
                                                                    console.log("veh_order", veh_order, "End date", temp.end_date, subEventEnd)


                                                                    // Create a new Date object for the given date and start time
                                                                    let dateObj = new Date(`${trip_start_date} ${temp.start_time}:00`);

                                                                    let enddateObj = new Date(`${temp.end_date} ${newTime}:00`);



                                                                    console.log("formatenddate", dateObj, enddateObj)
                                                                    var subEvent = {
                                                                        title: veh_o[vehicle_index].trip[length].trip_no,
                                                                        start: dateObj.setHours(dateObj.getHours() + 5),
                                                                        end: enddateObj.setHours(enddateObj.getHours() + 5),
                                                                        resourceId: veh_o[vehicle_index].id,
                                                                        extendedProps: { parentEventId: veh_o[vehicle_index].id, isSubEvent: true },
                                                                        groupId: veh_o[vehicle_index].id, // Group the sub-event with the parent
                                                                        id: veh_o[vehicle_index].id + '-' + Date.now() // Unique ID for the sub-event
                                                                    };



                                                                    calendar.addEvent(subEvent);
                                                                    console.log('Added sub-event:', subEvent);
                                                                    timecount += 2;
                                                                }


                                                            }

                                                            // console.log("ETA Ship_to", ship_to);
                                                        });



                                                        unsheduled_orderlist(orders);
                                                        veh_card(veh_order);
                                                        // sel_ord_shpto.push(veh_order[0].load_depot);
                                                        // console.log("vehicle_length", veh_order[vehicle_index].trip.length);
                                                        // console.log('shiptos', sel_ord_shpto);
                                                    }
                                                    else if (result.isDenied) {
                                                        Swal.fire("Changes are not saved", "", "info");
                                                    }
                                                });
                                            }
                                        }
                                        else {
                                            if (vehi['shift'] == "AM") {
                                                const newVehicle = JSON.parse(JSON.stringify(vehi));
                                                console.log("Deep Copied Vehicle (before push):", newVehicle);
                                                veh_order.am = [newVehicle, ...veh_order.am];
                                                vehi = [];
                                                veh_orders = veh_order.am
                                                console.log("AM Vehicle", veh_orders.am);

                                            }
                                            else if (vehi['shift'] == "PM") {
                                                console.log("Initial Selected Vehicle:", vehi);
                                                const newVehicle = JSON.parse(JSON.stringify(vehi));
                                                console.log("Deep Copied Vehicle (before push):", newVehicle);
                                                vehi = [];
                                                veh_order.pm = [newVehicle, ...veh_order.pm];
                                                // Push the deep copy to the array
                                                console.log("Updated PM Vehicles:", veh_order.pm);

                                                veh_orders = veh_order.pm;
                                                console.log("PM Vehicle", veh_orders);


                                            }
                                            else {
                                                console.log('nothing1');

                                            }

                                            let filled_volume = 0;
                                            const temp_order = orders.filter(order => selectedOrders1.includes(order.orderId));
                                            filled_volume = temp_order.reduce((acc, order) => acc + parseInt(order.target), 0);

                                            const vehicle_index = veh_orders.findIndex(vehicle => vehicle.name === resp.event.title);
                                            // console.log("Selected Vehicle",veh_orders[vehicle_index]);

                                            veh_orders[vehicle_index].trip = [];
                                            shipment_no += 1;
                                            file_run_no += 1;

                                            sel_ord_shpto.push(veh_orders[0].load_depot);
                                            veh_orders[vehicle_index].date = $('#date').val();
                                            veh_orders[vehicle_index].am_pm = $('#am_pm').val();

                                            // orders_v(veh_orders);

                                            veh_orders[vehicle_index].orders = temp_order;
                                            console.log("temp_orderget", temp_order[0].shipTo);
                                            plan_date = $('#date').val();
                                            temp_order.forEach(async (temp, index) => {
                                                // console.log(temp.shipTo);
                                                sel_ord_shpto.push(temp.shipTo);
                                                ship_to = [];

                                                if (index == 0) {
                                                    ship_to.push(veh_orders[vehicle_index].load_depot);
                                                    ship_to.push(temp.shipTo);
                                                    // console.log("Index -- 0", ship_to);
                                                    eta_d = await calc_eta(ship_to);
                                                    trip_start_date = plan_date;
                                                    var result = addDurationToTime(plan_date, veh_orders[vehicle_index].shift, veh_orders[vehicle_index].start_time, convertMinutesToTimeFormat(eta_d['Total Time']));
                                                    veh_orders[vehicle_index].temp_result = result
                                                    temp.Total_Distance = eta_d['Total Distance']
                                                    total_trip_distance += parseInt(eta_d['Total Distance']);
                                                    trip_end_date = result['newDate'];
                                                    total_trip_time += eta_d['Total Time']
                                                    // console.log("Result1", total_trip_distance);
                                                    temp.Total_Time = convertMinutesToTimeFormat(eta_d['Total Time']);
                                                    temp.start_time = veh_orders[vehicle_index].start_time;
                                                    temp.end_time = result['newTime'];
                                                    temp.start_date = plan_date;
                                                    temp.end_date = result['newDate'];
                                                    temp.shift = result['newShift'];
                                                    trip_start_time = veh_orders[vehicle_index].start_time;




                                                }
                                                else {
                                                    if (temp.shipTo == temp_order[index - 1].shipTo) {
                                                        ship_to.push(veh_orders[vehicle_index].load_depot);
                                                        ship_to.push(temp.shipTo);
                                                        eta_d = await calc_eta(ship_to);
                                                        console.log(plan_date)
                                                        var result = addDurationToTime(plan_date, veh_orders[vehicle_index].shift, veh_orders[vehicle_index].start_time, convertMinutesToTimeFormat(eta_d['Total Time']));
                                                        veh_orders[vehicle_index].temp_result = result
                                                        temp.Total_Distance = eta_d['Total Distance']
                                                        temp.Total_Time = convertMinutesToTimeFormat(eta_d['Total Time']);
                                                        temp.start_time = veh_orders[vehicle_index].start_time;
                                                        temp.end_time = result['newTime'];
                                                        temp.start_date = plan_date;
                                                        temp.end_date = result['newDate'];
                                                        temp.shift = result['newShift'];


                                                    } else {
                                                        // console.log("Temp Order Length", temp_order.length, index);
                                                        ship_to.push(temp_order[index - 1].shipTo);
                                                        ship_to.push(temp.shipTo);
                                                        // console.log("shipto_array", ship_to)
                                                        eta_d = await calc_eta(ship_to);
                                                        total_trip_distance += parseInt(eta_d['Total Distance']);
                                                        console.log(total_trip_distance);
                                                        temp.start_time = veh_orders[vehicle_index].temp_result['newTime'];
                                                        trip_start_time = veh_orders[vehicle_index].temp_result['newTime'];
                                                        var result = addDurationToTime(plan_date, veh_orders[vehicle_index].shift, trip_start_time, convertMinutesToTimeFormat(eta_d['Total Time']));
                                                        // console.log("Result", result['newTime']);
                                                        veh_orders[vehicle_index].temp_result = result
                                                        temp.Total_Distance = eta_d['Total Distance']


                                                        total_trip_time += eta_d['Total Time']
                                                        temp.Total_Time = convertMinutesToTimeFormat(eta_d['Total Time']);
                                                        // console.log("Trip End Time", temp_order[index - 1].end_time);
                                                        trip_start_time = addMinutes(result['newTime'], 1);

                                                        // console.log("Trip Start Time", trip_start_time);
                                                        trip_end_date = result['newDate'];

                                                        temp.end_time = result['newTime'];
                                                        temp.start_date = plan_date;
                                                        temp.end_date = result['newDate'];
                                                        temp.shift = result['newShift'];

                                                    }

                                                }
                                                if (index == temp_order.length - 1) {
                                                    console.log("Total Distance", total_trip_distance);
                                                    console.log("trip_start_time", trip_start_time);
                                                    newTime = addMinutesToTime(trip_start_time, total_trip_time);
                                                    veh_orders[vehicle_index].trip.push({
                                                        "trip_no": veh_orders[vehicle_index].trip.length + 1,
                                                        "orders": temp_order,
                                                        "shipment_no": shipment_no,
                                                        "file_run_no": file_run_no,
                                                        "total_dist": total_trip_distance.toString(),
                                                        "total_time": total_trip_time,
                                                        "start_date": trip_start_date,
                                                        "start_time": veh_orders[vehicle_index].start_time,
                                                        "end_time": newTime,
                                                        "end_date": trip_end_date,
                                                        // "end_date": veh_order[vehicle_index].temp_result['newDate'],
                                                        // "end_time": veh_order[vehicle_index].temp_result['newTime']
                                                    });

                                                    console.log("veh_starttime", veh_orders[vehicle_index].start_time, trip_start_time, trip_start_date)
                                                    var clickedEvent = resp.event;

                                                    if (clickedEvent.extendedProps.isParent) {
                                                        var parentEnd = clickedEvent.start;

                                                        // Set the start time for the sub-event below the parent
                                                        var subEventStart = new Date(parentEnd);
                                                        subEventStart.setHours(subEventStart.getHours() + timecount);
                                                        var subEventEnd = new Date(subEventStart);
                                                        subEventEnd.setHours(subEventEnd.getHours() + timecount + 2);
                                                        console.log("veh_order", veh_order, subEventStart, newTime)


                                                        // Create a new Date object for the given date and start time
                                                        let dateObj = new Date(`${trip_start_date} ${veh_orders[vehicle_index].start_time}:00`);

                                                        let enddateObj = new Date(`${trip_end_date} ${newTime}:00`);



                                                        console.log("formatenddate", dateObj, enddateObj)
                                                        var subEvent = {
                                                            title: "Trip No" + veh_orders[vehicle_index].trip.length,
                                                            start: dateObj.setHours(dateObj.getHours() + 5),
                                                            end: enddateObj.setHours(enddateObj.getHours() + 5),
                                                            resourceId: veh_orders[vehicle_index].id,
                                                            extendedProps: { parentEventId: veh_orders[vehicle_index].id, isSubEvent: true },
                                                            groupId: veh_orders[vehicle_index].id, // Group the sub-event with the parent
                                                            id: veh_orders[vehicle_index].id + '-' + Date.now() // Unique ID for the sub-event
                                                        };



                                                        calendar.addEvent(subEvent);
                                                        console.log('Added sub-event:', subEvent);
                                                        timecount += 2;
                                                    }

                                                }

                                                // console.log("ETA Ship_to", ship_to);

                                            });



                                            var orderorderId = [];
                                            matchingIndices.forEach(index => {
                                                orders[index].status = "Scheduled";
                                                orderorderId.push(orders[index].orderId)
                                            });
                                            unsheduled_orderlist(orders)


                                            // unsheduled_orderlist(orders);
                                            // removeorderfromdt()
                                            console.log(veh_orders[0]['shift']);
                                            if (veh_orders[0]['shift'] == "PM") {
                                                const v_index = veh_orders.findIndex(vehicle => vehicle.name === resp.event.title);
                                                // alert(v_index)
                                                veh_order.pm[v_index] = veh_orders[0]
                                                console.log(veh_order);

                                            }
                                            else if (veh_orders[0]['shift'] == "AM") {
                                                const v_index = veh_orders.findIndex(vehicle => vehicle.name === resp.event.title);
                                                // alert(v_index)
                                                veh_order.am[v_index] = veh_orders[0]
                                                console.log(veh_order);
                                            }
                                            else {
                                                console.log('nothing');
                                            }

                                            veh_card(veh_order);

                                            console.log('shiptos', sel_ord_shpto);
                                        }


                                    }
                                }
                            });


                            console.log("resp", resp);
                            calendar.render();
                            // Retrieve filter values from localStorage


                        } else {
                            calendar.getResources().forEach(resource => resource.remove());
                            resp.forEach(resource => calendar.addResource(resource));
                            calendar.getEvents().forEach(event => event.remove());
                            resp.forEach(event => calendar.addEvent(event));

                        }


                        // Example usage of the filter
                        // var name = localStorage.getItem('name') || null;
                        // var size = localStorage.getItem('size') || null;
                        // var str_loc = localStorage.getItem('start_loc') || null;
                        // var end_loc = localStorage.getItem('end_loc') || null;

                        // // Create a filter object based on the retrieved values
                        // var filter = [{
                        //     name: name !== "null" ? name : null,
                        //     size: size !== "null" ? size : null,
                        //     start_loc: str_loc !== "null" ? str_loc : null,
                        //     end_loc: end_loc !== "null" ? end_loc : null
                        // }];

                        // // Filter the data
                        // setTimeout(() => {
                        //     var filveh = filterVehicles(filteredData, filter);

                        //     // If filtered results are found, update the UI
                        //     if (filveh.length > 0) {
                        //         $('#veh_end_loc').val(end_loc).trigger('change');
                        //         $('#veh_str_loc').val(str_loc).trigger('change');
                        //         $('#veh_size').val(size).trigger('change');
                        //         $('#veh_name').val(name).trigger('change');
                        //     }

                        //     // Log the results to inspect the filtered vehicles and filter criteria
                        //     console.log("Filtered vehicle count:", filveh.length, "Filtered vehicles:", filveh, "Applied filter:", filter);
                        // }, 2000);

                    });






                }
                function filterVehicles(vehicles, filters) {
                    console.log("vehicles", vehicles, "filters", filters[0]['name']);
                    return vehicles.filter(vehicle => {
                        // Initialize matches as true for each vehicle
                        let matches = true;

                        // Check if the 'name' filter is present and not "null"
                        if (filters[0]['name'] && filters[0]['name'] != "null") {
                            // Split the filter name by commas and check if the vehicle's name matches any of them
                            const filterNames = filters[0]['name'].split(',').map(name => name.trim());
                            // Update matches if the vehicle's name matches any of the filter names
                            matches = matches && filterNames.some(filterName => vehicle.name.includes(filterName));
                        }

                        // Check if the 'size' filter is present and not "null"
                        if (filters[0]['size'] && filters[0]['size'] != "null") {
                            // Update matches based on size
                            matches = matches && vehicle.size == filters[0]['size'];
                        }

                        // Check if the 'start_loc' filter is present and not "null"
                        if (filters[0]['start_loc'] && filters[0]['start_loc'] != "null") {
                            // Update matches if the vehicle's start location includes the filter's start location
                            matches = matches && vehicle.start_loc.includes(filters[0]['start_loc']);
                        }

                        // Check if the 'end_loc' filter is present and not "null"
                        if (filters[0]['end_loc'] && filters[0]['end_loc'] != "null") {
                            // Update matches if the vehicle's end location includes the filter's end location
                            matches = matches && vehicle.end_loc.includes(filters[0]['end_loc']);
                        }

                        // Return true if all conditions match, false otherwise
                        return matches;
                    });
                }
                function convertMinutesToTimeFormat(totalMinutes) {
                    const hours = Math.floor(totalMinutes / 60); // Calculate the hours
                    const minutes = totalMinutes % 60; // Calculate the remaining minutes

                    // Format the time as `H:MM`
                    return `${hours}:${minutes.toString().padStart(2, '0')}`;
                }

                function addMinutes(timeStr, minutesToAdd) {
                    const [hours, minutes] = timeStr.split(':').map(Number);
                    const date = new Date();
                    date.setHours(hours);
                    date.setMinutes(minutes + minutesToAdd);

                    const newHours = date.getHours().toString().padStart(2, '0');
                    const newMinutes = date.getMinutes().toString().padStart(2, '0');

                    return `${newHours}:${newMinutes}`;
                }

                function filterVehicleTable(target, id) {

                    if (veh_id.includes(id)) {


                        val = parseInt(target)
                        total -= val;
                        console.log(val);
                        console.log(total);
                        data = filteredData.find(item => parseInt(item.trailer_size) >= total);
                        table1.draw();
                        $('tr td').css({
                            'padding': '0.7em 1em 0.7em 1em'
                        });
                        veh_id = veh_id.filter(item => item !== id);
                    } else {

                        val = parseInt(target)
                        total += val

                        data = filteredData.filter(item => parseInt(item.trailer_size) >= total);
                        table1.draw();

                        $('tr td').css({
                            'padding': '0.7em 1em 0.7em 1em'
                        });
                        veh_id.push(id);

                    }
                }
                // Event listener for row selection in ordersTable
                $('#ordersTable tbody').on('click', 'tr', function () {
                    let data = table.row(this).data();
                    let target = data[5]; // Assuming 'Target' is the 7th column in ordersTable      
                    filterVehicleTable(target, data[1] + data[4]);
                    // console.log(veh_order);


                });

                function redirect(url) {
                    window.open('' + url + '', '_blank').focus();
                    // window.location.href = '' + url + '';
                }

                function removeOrderFromVehOrders(orderIds, vehicle_name, shift) {

                    // Corrected findIndex usage
                    console.log("orders_delete", orderIds);
                    let order_index = orders.findIndex(ord => ord.orderId == orderIds);


                    if (order_index !== -1) {
                        // Update the order status to 'Not Scheduled'
                        orders[order_index].status = 'Not Scheduled';
                    } else {
                        console.error('Order ID not found:', orderIds);
                        return; // Stop execution if the order ID is not found
                    }

                    // alert(shift);
                    if (shift == 'AM') {
                        var shipment_index = veh_order.am.findIndex(vehicle => vehicle.name === vehicle_name);
                        console.log(veh_order.am[shipment_index].trip);
                        veh_order.am[shipment_index].trip.forEach(trip => {
                            var tmp_orders = trip.orders.filter(order => order.orderId != orderIds);
                            console.log("Deleted", tmp_orders);
                            trip.orders = tmp_orders;
                            console.log(veh_order.am[shipment_index].trip);

                        });

                    }
                    else if (shift == 'PM') {
                        var shipment_index = veh_order.pm.findIndex(vehicle => vehicle.name === vehicle_name);
                        console.log(veh_order.pm[shipment_index].trip);
                        veh_order.pm[shipment_index].trip.forEach(trip => {
                            var tmp_orders = trip.orders.filter(order => order.orderId != orderIds);
                            console.log("Deleted", tmp_orders);
                            trip.orders = tmp_orders;
                            console.log(veh_order.pm[shipment_index].trip);

                        });

                    }
                    else {
                        console.log("Nothing");

                    }
                    // Find the vehicle by name

                    // // checkorder= JSON.parse(trip);
                    // // console.log('checkorder',checkorder.orders);

                    // Filter out vehicles with empty orders array
                    // veh_order = veh_order.filter(veh => veh.length > 0);
                    console.log("After Filter", veh_order);

                    // Update unscheduled order list and vehicle card
                    unsheduled_orderlist(orders);
                    veh_card(veh_order);
                }


                function veh_card(veh_order) {

                    // This code runs after orders_v is complete
                    errors_window = [];

                    $('#vehicle_cards').empty();
                    $('#vehicle_cards2').empty();


                    localStorage.setItem('orders', JSON.stringify(veh_order));
                    complete_order = veh_order;
                    console.log(veh_order);

                    orders_v(veh_order); // Wait for orders_v to complete

                }


                function calculateTotalTargetValue(orders) {
                    return orders.reduce((total, order) => total + parseInt(order.target), 0);
                }
                ///////////////////////////////////////////////////////// Orders V
                function orders_v(veh_ord) {

                    console.log("First", veh_order);

                    veh_order.am.forEach((veh, index) => {

                        console.log("vehicleid", veh.id);
                        $.ajax({
                            url: 'get_vehicle_forOrders/' + veh.id,
                            type: 'GET',
                            dataType: 'json',
                            success: async function (response) {
                                var id = veh.id;
                                var veh_index = veh_order.findIndex(item => item.id == id);
                                total = parseInt(veh.trailer_size);
                                var compartment1;

                                compartment_length = response['compartments'].length;

                                compartment1 = response['compartments'].map(val => ({
                                    compartment_no: val.compartment_no,
                                    size: parseInt(val.loadable_volume)
                                }));
                                let filtered_comprule = comprules.filter(comp => comp.compartments == compartment_length);

                                var sortOrder = filtered_comprule[0]['seq'].split(',').map(num => Number(num) - 1);

                                let trailerCompartments = response['compartments'];
                                console.log("trailer_compartment", trailerCompartments);
                                var assignments;
                                var formattedCompartments = trailerCompartments.map(compartment => ({
                                    id: compartment.compartment_no,
                                    size: parseInt(compartment.loadable_volume, 10),
                                    used: compartment.used === "false" ? false : true,
                                    product: compartment.product,
                                    orderId: compartment.orderId,
                                    customer: compartment.customer
                                }));
                                console.log("veh trip ", veh.trip);
                                for (const trip of veh.trip) {
                                    try {
                                        // Wait for the compartment allocation to finish
                                        const assignments = await allocateCompartments(trip.orders, formattedCompartments, sortOrder, veh.name, veh.trailer_size, veh.weight);

                                        console.log("Assignments_", assignments);

                                        // Assign the resolved compartments and errors to the trip
                                        trip.compartments = assignments.allocatedCompartments;
                                        trip.erros = errors_window;

                                        if (errors_window.length > 0) {
                                            $.toast({
                                                heading: veh.name,
                                                text: 'The Assigned Trip contains errors',
                                                position: 'top-right',
                                                showHideTransition: 'slide',
                                                icon: 'error',
                                                stack: false
                                            });
                                        } else {
                                            $.toast({
                                                heading: veh.name,
                                                text: 'The Selected Orders Assigned Successfully',
                                                position: 'top-right',
                                                showHideTransition: 'slide',
                                                icon: 'success',
                                                stack: false
                                            });
                                        }
                                        // Clear the errors for the next iteration
                                        errors_window = [];
                                    } catch (error) {
                                        console.error('Error processing trip:', error);
                                    }
                                }

                                // veh.trip.forEach(async trip => {
                                //     assignments = await allocateCompartments(trip.orders, formattedCompartments, sortOrder, veh.name, veh.trailer_size, veh.weight);
                                //     trip.compartments = assignments.allocatedCompartments;
                                //     trip.erros = errors_window;
                                //     // formattedCompartments = formattedCompartments;



                                //     errors_window = [];
                                // });

                                localStorage.setItem("orders", JSON.stringify(veh_order));

                                $('#vehicle_cards').empty();

                                veh_order.am.forEach(veh => {

                                    let hasErrors = veh.trip.some(trip => Array.isArray(trip.erros) && trip.erros.length > 0);
                                    let headerBackgroundColor = hasErrors ? 'red' : '#6AB424';
                                    let color_s = 'white';

                                    $(`#trip-${veh.id}-${veh.shift}`).empty();

                                    veh.trip.forEach((trip, index) => {
                                        let tooltipContent = ""
                                        if (Array.isArray(trip.erros) && trip.erros.length > 0) {
                                            console.log(`Errors Found in Trip No ${index + 1}:`, trip.erros);

                                            let tripTooltip = `<strong>Trip No ${index + 1}</strong><ul>` +
                                                trip.erros.map(error => `<li>${error.error_name}</li>`).join('') +
                                                '</ul>';
                                            tooltipContent += tripTooltip;

                                            errorListContent = `<h5>Trip No ${index + 1}</h5><ul>` +
                                                trip.erros.map(error => `<li>${error.error_name}</li>`).join('') +
                                                '</ul>';
                                        } else {
                                            console.log(`No Errors Found in Trip No ${index + 1}`);
                                        }

                                        $(`#veh-${veh.id}-${veh.shift} input[type="checkbox"]`).css('display', 'block');

                                        $(`#trip-${veh.id}-${veh.shift}`).append(`
                                                <div class="trip1 card card-body" ondblclick="redirect('compartments?id=${veh.id}&t_id=${index + 1}&shift=${veh.shift}')" data-bs-toggle="tooltip" data-bs-placement="top" title="${tooltipContent}"
                                                    style="background: ${headerBackgroundColor}; padding: 0.3em; font-size: 0.9em; display: inline-block; margin-right: 0.5em; width: auto;">
                                                    <!-- First row of trip details -->
                                                    <div style="display: flex; justify-content: space-between; align-items: center;">
                                                        <div style="display: flex; align-items: center;">
        <h5 class="card-title mb-0" style="color: white;font-size: 0.7em;">${veh.start_location ? veh.start_location : ""}</h5>
        <h5 class="card-title mb-0" style="color: white;font-size: 0.7em; padding-left: 0.7em;">[${trip.start_date ? "9/16/24" : "9/16/24"} ${trip.start_time ? "9:00" : "9:00"}]</h5>
     </div>
     <div style="display: flex; align-items: center;">
        <h5 class="card-title mb-0" style="color: white;font-size: 0.7em; padding-left:2em;padding-right:2em;">Ship:${trip.shipment_no ? trip.shipment_no : "-"}</h5>
     </div>
     <div style="display: flex;align-items: center;">
        <h5 class="card-title mb-0" style="color: white;font-size: 0.7em;">${trip.end_location ? trip.end_location : ""}</h5>
        <h5 class="card-title mb-0" style="color: white;padding-left: 0.7em;font-size: 0.7em;">[${trip.end_date ? "9/17/24" : "9/17/24"} ${trip.end_time ? "10:00" : "10:00"}]</h5>
        <i class="mb-0 ri-eye-fill" style="color:white;padding-left:1em;" onclick="redirect('compartments?id=${veh.id}&t_id=${index + 1}&shift=${veh.shift}')"></i>
     </div>
                                                 
                                                    </div>
                                                    <!-- Second row of trip details -->
                                                </div>
                                                `);
                                        tooltipContent = "";

                                        $('[data-bs-toggle="tooltip"]').tooltip({
                                            html: true
                                        });

                                        localStorage.setItem("orders", JSON.stringify({ am: veh_order.am, pm: veh_order.pm }));
                                    });



                                });
                            }
                        });
                    });

                    veh_order.pm.forEach((veh, index) => {
                        console.log("vehicleid", veh.id);
                        $.ajax({
                            url: 'get_vehicle_forOrders/' + veh.id,
                            type: 'GET',
                            dataType: 'json',
                            success: async function (response) {
                                var id = veh.id;

                                console.log("Check--", veh_order);

                                var veh_index = veh_order.findIndex(item => item.id == id);
                                total = parseInt(veh.trailer_size);
                                var compartment1;

                                compartment_length = response['compartments'].length;

                                compartment1 = response['compartments'].map(val => ({
                                    compartment_no: val.compartment_no,
                                    size: parseInt(val.loadable_volume)
                                }));
                                let filtered_comprule = comprules.filter(comp => comp.compartments == compartment_length);

                                var sortOrder = filtered_comprule[0]['seq'].split(',').map(num => Number(num) - 1);

                                let trailerCompartments = response['compartments'];

                                var assignments;
                                const formattedCompartments = trailerCompartments.map(compartment => ({
                                    id: compartment.compartment_no,
                                    size: parseInt(compartment.loadable_volume, 10),
                                    used: compartment.used === "false" ? false : true,
                                    product: compartment.product,
                                    orderId: compartment.orderId,
                                    customer: compartment.customer
                                }));
                                // var total_weight = 0;
                                // trailerCompartments.forEach((com, index) => {
                                //     console.log('comp_no', com['compartment_no']);


                                //     let ajaxRequest = $.ajax({
                                //         url: 'product_bypcode/' + com['product_id'],
                                //         type: 'GET',
                                //         dataType: 'json',
                                //         success: function (response) {
                                //             let loaded_vol = parseInt(com['loaded_volume']);
                                //             let density = parseFloat(response['density']);
                                //             let weight = loaded_vol * density;
                                //             total_weight += weight;


                                //         }
                                //     });

                                //     // Push the ajaxRequest promise to the array
                                //     // ajaxRequests.push(ajaxRequest);
                                // });


                                for (const trip of veh.trip) {
                                    try {
                                        // Wait for the compartment allocation to finish
                                        const assignments = await allocateCompartments(trip.orders, formattedCompartments, sortOrder, veh.name, veh.trailer_size, veh.weight);

                                        console.log("Assignments_", assignments);

                                        // Assign the resolved compartments and errors to the trip
                                        trip.compartments = assignments.allocatedCompartments;
                                        trip.erros = errors_window;
                                        if (errors_window.length > 0) {
                                            $.toast({
                                                heading: veh.name,
                                                text: 'The Assigned Trip contains errors',
                                                position: 'top-right',
                                                showHideTransition: 'slide',
                                                icon: 'error',
                                                stack: false
                                            });
                                        } else {
                                            $.toast({
                                                heading: veh.name,
                                                text: 'The Selected Orders Assigned Successfully',
                                                position: 'top-right',
                                                showHideTransition: 'slide',
                                                icon: 'success',
                                                stack: false
                                            });
                                        }
                                        // Clear the errors for the next iteration
                                        errors_window = [];
                                    } catch (error) {
                                        console.error('Error processing trip:', error);
                                    }
                                }
                                localStorage.setItem("orders", JSON.stringify({ am: veh_order.am, pm: veh_order.pm }));



                                let hasErrors = veh.trip.some(trip => Array.isArray(trip.erros) && trip.erros.length > 0);
                                let headerBackgroundColor = hasErrors ? 'red' : '#6AB424';
                                let color_s = 'white';

                                $(`#trip-${veh.id}-${veh.shift}`).empty();

                                veh.trip.forEach((trip, index) => {
                                    let tooltipContent = ""
                                    if (Array.isArray(trip.erros) && trip.erros.length > 0) {
                                        console.log(`Errors Found in Trip No ${index + 1}:`, trip.erros);

                                        let tripTooltip = `<strong>Trip No ${index + 1}</strong><ul>` +
                                            trip.erros.map(error => `<li>${error.error_name}</li>`).join('') +
                                            '</ul>';
                                        tooltipContent += tripTooltip;

                                        errorListContent = `<h5>Trip No ${index + 1}</h5><ul>` +
                                            trip.erros.map(error => `<li>${error.error_name}</li>`).join('') +
                                            '</ul>';
                                    } else {
                                        console.log(`No Errors Found in Trip No ${index + 1}`);
                                    }

                                    $(`#veh-${veh.id}-${veh.shift} input[type="checkbox"]`).css('display', 'block');

                                    $(`#trip-${veh.id}-${veh.shift}`).append(`
                                        <div class="trip1 card card-body" ondblclick="redirect('compartments?id=${veh.id}&t_id=${index + 1}&shift=${veh.shift}')" data-bs-toggle="tooltip" data-bs-placement="top" title="${tooltipContent}"
                                            style="background: ${headerBackgroundColor}; padding: 0.3em; font-size: 0.9em; display: inline-block; margin-right: 0.5em; width: auto;">
                                            <!-- First row of trip details -->
                                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                                <div style="display: flex; align-items: center;">
        <h5 class="card-title mb-0" style="color: white;font-size: 0.7em;">${veh.start_location ? veh.start_location : ""}</h5>
        <h5 class="card-title mb-0" style="color: white;font-size: 0.7em; padding-left: 0.7em;">[${trip.start_date ? "9/16/24" : "9/16/24"} ${trip.start_time ? "9:00" : "9:00"}]</h5>
     </div>
     <div style="display: flex; align-items: center;">
        <h5 class="card-title mb-0" style="color: white;font-size: 0.7em; padding-left:2em;padding-right:2em;">Ship:${trip.shipment_no ? trip.shipment_no : "-"}</h5>
     </div>
     <div style="display: flex;align-items: center;">
        <h5 class="card-title mb-0" style="color: white;font-size: 0.7em;">${trip.end_location ? veh.end_location : ""}</h5>
        <h5 class="card-title mb-0" style="color: white;padding-left: 0.7em;font-size: 0.7em;">[${trip.end_date ? "9/17/24" : "9/17/24"} ${trip.end_time ? "10:00" : "10:00"}]</h5>
        <i class="mb-0 ri-eye-fill" style="color:white;padding-left:1em;" onclick="redirect('compartments?id=${veh.id}&t_id=${index + 1}&shift=${veh.shift}')"></i>
     </div>
                                         
                                            </div>
                                            <!-- Second row of trip details -->
                                        </div>
                                        `);

                                    $('[data-bs-toggle="tooltip"]').tooltip({
                                        html: true
                                    });

                                    localStorage.setItem("orders", JSON.stringify({ am: veh_order.am, pm: veh_order.pm }));
                                });


                            }
                        });
                    });


                }


                function calendarreload(resp = null) {
                    orders = localStorage.getItem('orders');
                    orders = JSON.parse(orders);
                    calendar.getResources().forEach(resource => resource.remove());
                    calendar.getEvents().forEach(event => event.remove());
                    (resp == null ? resource : resp).forEach(resource => calendar.addResource(resource));
                    (resp == null ? resource : resp).forEach(event => calendar.addEvent(event));
                    orders.am.forEach((veh, index) => {

                        $.ajax({
                            url: 'get_vehicle_forOrders/' + veh.id,
                            type: 'GET',
                            dataType: 'json',
                            success: function (response) {
                                var id = veh.id;
                                var veh_index = veh_order.findIndex(item => item.id == id);
                                total = parseInt(veh.trailer_size);

                                orders.am.forEach(veh => {

                                    let hasErrors = veh.trip.some(trip => Array.isArray(trip.erros) && trip.erros.length > 0);
                                    let headerBackgroundColor = hasErrors ? 'red' : '#6AB424';
                                    let color_s = 'white';
                                    console.log("Am")
                                    veh.trip.forEach((trip, index) => {
                                        console.log("tripAm")
                                        // Set the start time for the sub-event below the parent
                                        var subEventStart = new Date(trip.start_date + " " + trip.start_time);
                                        subEventStart.setHours(subEventStart.getHours() + timecount);
                                        var subEventEnd = new Date(subEventStart);
                                        subEventEnd.setHours(subEventEnd.getHours() + timecount + 2);
                                        // Create a new Date object for the given date and start time
                                        let dateObj = new Date(`${trip.start_date} ${trip.start_time}:00`);

                                        let enddateObj = new Date(`${trip.end_date} ${trip.end_time}:00`);

                                        console.log("formatenddate", dateObj, enddateObj)
                                        var subEvent = {
                                            title: "Trip No" + trip.trip_no,
                                            start: dateObj.setHours(dateObj.getHours() + 5),
                                            end: enddateObj.setHours(enddateObj.getHours() + 5),
                                            resourceId: veh.id,
                                            extendedProps: { parentEventId: veh.id + "_" + veh.shift, isSubEvent: true },
                                            groupId: veh.id, // Group the sub-event with the parent
                                            id: veh.id + '-' + Date.now() // Unique ID for the sub-event
                                        };



                                        calendar.addEvent(subEvent);
                                        console.log('Added sub-event:', subEvent);



                                    });



                                });
                            }
                        });

                    });

                    orders.pm.forEach((veh, index) => {
                        $.ajax({
                            url: 'get_vehicle_forOrders/' + veh.id,
                            type: 'GET',
                            dataType: 'json',
                            success: function (response) {
                                var id = veh.id;
                                var veh_index = veh_order.findIndex(item => item.id == id);
                                total = parseInt(veh.trailer_size);

                                orders.pm.forEach(veh => {

                                    let hasErrors = veh.trip.some(trip => Array.isArray(trip.erros) && trip.erros.length > 0);
                                    let headerBackgroundColor = hasErrors ? 'red' : '#6AB424';
                                    let color_s = 'white';
                                    console.log("Am")
                                    veh.trip.forEach((trip, index) => {
                                        console.log("tripAm")
                                        // Set the start time for the sub-event below the parent
                                        var subEventStart = new Date(trip.start_date + " " + trip.start_time);
                                        subEventStart.setHours(subEventStart.getHours() + timecount);
                                        var subEventEnd = new Date(subEventStart);
                                        subEventEnd.setHours(subEventEnd.getHours() + timecount + 2);
                                        // Create a new Date object for the given date and start time
                                        let dateObj = new Date(`${trip.start_date} ${trip.start_time}:00`);

                                        let enddateObj = new Date(`${trip.end_date} ${trip.end_time}:00`);

                                        console.log("formatenddate", dateObj, enddateObj)
                                        var subEvent = {
                                            title: "Trip No" + trip.trip_no,
                                            start: dateObj.setHours(dateObj.getHours() + 5),
                                            end: enddateObj.setHours(enddateObj.getHours() + 5),
                                            resourceId: veh.id,
                                            extendedProps: { parentEventId: veh.id + "_" + veh.shift, isSubEvent: true },
                                            groupId: veh.id, // Group the sub-event with the parent
                                            id: veh.id + '-' + Date.now() // Unique ID for the sub-event
                                        };



                                        calendar.addEvent(subEvent);
                                        console.log('Added sub-event:', subEvent);



                                    });



                                });
                            }
                        });

                    });

                }
                ///////////////////////////////////////// Orders V

                function renew() {
                    // var selectedOrders1 = [];
                    // console.log(veh_order);

                    veh_order.am.forEach((veh, index) => {

                        let hasErrors = veh.trip.some(trip => Array.isArray(trip.erros) && trip.erros.length > 0);
                        let headerBackgroundColor = hasErrors ? 'red' : '#6AB424';
                        let color_s = 'white';
                        $(`#trip-${veh.id}-${veh.shift}`).empty();

                        veh.trip.forEach((trip, index) => {
                            let tooltipContent = ""

                            if (Array.isArray(trip.erros) && trip.erros.length > 0) {
                                console.log(`Errors Found in Trip No ${index + 1}:`, trip.erros);

                                let tripTooltip = `<strong>Trip No ${index + 1}</strong><ul>` +
                                    trip.erros.map(error => `<li>${error.error_name}</li>`).join('') +
                                    '</ul>';
                                tooltipContent += tripTooltip;

                                errorListContent = `<h5>Trip No ${index + 1}</h5><ul>` +
                                    trip.erros.map(error => `<li>${error.error_name}</li>`).join('') +
                                    '</ul>';
                            } else {
                                console.log(`No Errors Found in Trip No ${index + 1}`);
                            }

                            $(`#veh-${veh.id}-${veh.shift} input[type="checkbox"]`).css('display', 'block');

                            $(`#trip-${veh.id}-${veh.shift}`).append(`
<div class="trip1 card card-body" ondblclick="redirect('compartments?id=${veh.id}&t_id=${index + 1}&shift=${veh.shift}')" data-bs-toggle="tooltip" data-bs-placement="top" title="${tooltipContent}"
    style="background: ${headerBackgroundColor}; padding: 0.3em; font-size: 0.9em; display: inline-block; margin-right: 0.5em; width: auto;">
    <!-- First row of trip details -->
    <div style="display: flex; justify-content: space-between; align-items: center;">
        <div style="display: flex; align-items: center;">
        <h5 class="card-title mb-0" style="color: white;font-size: 0.7em;">${veh.start_location ? veh.start_location : ""}</h5>
        <h5 class="card-title mb-0" style="color: white;font-size: 0.7em; padding-left: 0.7em;">[${trip.start_date ? "9/16/24" : "9/16/24"} ${trip.start_time ? "9:00" : "9:00"}]</h5>
     </div>
     <div style="display: flex; align-items: center;">
        <h5 class="card-title mb-0" style="color: white;font-size: 0.7em; padding-left:2em;padding-right:2em;">Ship:${trip.shipment_no ? trip.shipment_no : "-"}</h5>
     </div>
     <div style="display: flex;align-items: center;">
        <h5 class="card-title mb-0" style="color: white;font-size: 0.7em;">${trip.end_location ? veh.end_location : ""}</h5>
        <h5 class="card-title mb-0" style="color: white;padding-left: 0.7em;font-size: 0.7em;">[${trip.end_date ? "9/17/24" : "9/17/24"} ${trip.end_time ? "10:00" : "10:00"}]</h5>
        <i class="mb-0 ri-eye-fill" style="color:white;padding-left:1em;" onclick="redirect('compartments?id=${veh.id}&t_id=${index + 1}&shift=${veh.shift}')"></i>
     </div>

    </div>
    <!-- Second row of trip details -->
</div>
`);

                            $('[data-bs-toggle="tooltip"]').tooltip({
                                html: true
                            });

                            localStorage.setItem("orders", JSON.stringify({ am: veh_order.am, pm: veh_order.pm }));
                        });

                    }
                    );


                    veh_order.pm.forEach((veh, index) => {


                        let hasErrors = veh.trip.some(trip => Array.isArray(trip.erros) && trip.erros.length > 0);
                        let headerBackgroundColor = hasErrors ? 'red' : '#6AB424';
                        let color_s = 'white';

                        $(`#trip-${veh.id}-${veh.shift}`).empty();

                        veh.trip.forEach((trip, index) => {
                            let tooltipContent = ""

                            if (Array.isArray(trip.erros) && trip.erros.length > 0) {
                                console.log(`Errors Found in Trip No ${index + 1}:`, trip.erros);

                                let tripTooltip = `<strong>Trip No ${index + 1}</strong><ul>` +
                                    trip.erros.map(error => `<li>${error.error_name}</li>`).join('') +
                                    '</ul>';
                                tooltipContent += tripTooltip;

                                errorListContent = `<h5>Trip No ${index + 1}</h5><ul>` +
                                    trip.erros.map(error => `<li>${error.error_name}</li>`).join('') +
                                    '</ul>';
                            } else {
                                console.log(`No Errors Found in Trip No ${index + 1}`);
                            }

                            $(`#veh-${veh.id}-${veh.shift} input[type="checkbox"]`).css('display', 'block');

                            $(`#trip-${veh.id}-${veh.shift}`).append(`
<div class="trip1 card card-body" ondblclick="redirect('compartments?id=${veh.id}&t_id=${index + 1}&shift=${veh.shift}')" data-bs-toggle="tooltip" data-bs-placement="top" title="${tooltipContent}"
    style="background: ${headerBackgroundColor}; padding: 0.3em; font-size: 0.9em; display: inline-block; margin-right: 0.5em; width: auto;">
    <!-- First row of trip details -->
    <div style="display: flex; justify-content: space-between; align-items: center;">
        <div style="display: flex; align-items: center;">
        <h5 class="card-title mb-0" style="color: white;font-size: 0.7em;">${veh.start_location ? veh.start_location : ""}</h5>
        <h5 class="card-title mb-0" style="color: white;font-size: 0.7em; padding-left: 0.7em;">[${trip.start_date ? "9/16/24" : "9/16/24"} ${trip.start_time ? "9:00" : "9:00"}]</h5>
     </div>
     <div style="display: flex; align-items: center;">
        <h5 class="card-title mb-0" style="color: white;font-size: 0.7em; padding-left:2em;padding-right:2em;">Ship:${trip.shipment_no ? trip.shipment_no : "-"}</h5>
     </div>
     <div style="display: flex;align-items: center;">
        <h5 class="card-title mb-0" style="color: white;font-size: 0.7em;">${trip.end_location ? veh.end_location : ""}</h5>
        <h5 class="card-title mb-0" style="color: white;padding-left: 0.7em;font-size: 0.7em;">[${trip.end_date ? "9/17/24" : "9/17/24"} ${trip.end_time ? "10:00" : "10:00"}]</h5>
        <i class="mb-0 ri-eye-fill" style="color:white;padding-left:1em;" onclick="redirect('compartments?id=${veh.id}&t_id=${index + 1}&shift=${veh.shift}')"></i>
     </div>

    </div>
    <!-- Second row of trip details -->
</div>
`);

                            $('[data-bs-toggle="tooltip"]').tooltip({
                                html: true
                            });

                            localStorage.setItem("orders", JSON.stringify({ am: veh_order.am, pm: veh_order.pm }));
                            tooltipContent = "";

                        });


                    });


                }

                function append_portion(scompart, name, weights) {

                    console.log("scompart", scompart, weights);

                    let total_weight = 0;  // Declare total_weight outside the loop

                    let ajaxRequests = []; // Array to keep track of AJAX requests
                    return new Promise(((resolve, reject) => {
                        scompart.forEach((com, index) => {
                            console.log('comp_no', com['compartment_no']);


                            let ajaxRequest = $.ajax({
                                url: 'product_bypcode/' + com['product_id'],
                                type: 'GET',
                                dataType: 'json',
                                success: function (response) {
                                    let loaded_vol = parseInt(com['loaded_volume']);
                                    let density = parseFloat(response['density']);
                                    let weight = loaded_vol * density;
                                    total_weight += weight;


                                }
                            });

                            // Push the ajaxRequest promise to the array
                            ajaxRequests.push(ajaxRequest);
                        });

                        // Wait for all AJAX requests to complete
                        $.when.apply($, ajaxRequests).done(function () {
                            console.log(total_weight, parseInt(weights), total_weight > parseInt(weights))
                            if (total_weight > parseInt(weights)) {

                                if (!errors_window.some(error => error.error_name === 'Not Allowed to Carry that load')) {
                                    console.log("hello")
                                    errors_window.push({ "error_name": "Not Allowed to Carry that load" });
                                    console.log("errorswindow", errors_window)
                                    resolve(errors_window);
                                }


                            }

                        });
                    }));
                }
                var text;
                async function generate() {



                    return new Promise((async (resolve, reject) => {
                        // calc_rtd();

                        const shipment = veh_order;
                        console.log(shipment);
                        const tch = '0379';
                        const gsap = '1379';

                        var currentdate = new Date();
                        var currentdate2 = new Date();
                        var datetime = ('0' + currentdate.getDate()).slice(-2) + "-" + ('0' + (currentdate.getMonth() + 1)).slice(-2) + "-" + currentdate.getFullYear().toString().substr(-2) + "" + currentdate.getHours() + ":" + currentdate.getMinutes();
                        // console.log(datetime);
                        var sdate = ('0' + currentdate.getDate()).slice(-2) + "" + ('0' + (currentdate.getMonth() + 1)).slice(-2) + "" + currentdate.getFullYear().toString().substr(-2);
                        create_shipment();

                        var line1 = "#TCH" + tch + "GSAP" + gsap + "" + datetime;
                        var line2 = "#BCH" + tch + "GSAPBS1" + gsap + "" + datetime;
                        var line3 = "B LTRK CZZZ" + sdate + am_pm;
                        var line4 = "";
                        var line5 = "";
                        var line6 = "";
                        let output5 = "";
                        let output6 = "";
                        let output7 = "";
                        let output8 = "";
                        let line7 = "C";
                        let line8 = "";
                        let d_portion = "";
                        let d_portionl4 = "";
                        let trip = "";
                        console.log(shipment.length);

                        await shipment.forEach(async (ship, index) => {
                            console.log("Samad ", index);
                            var identifier = ship.tractor_code;
                            var reg = ship.tractor_reg;
                            var end_depot = "1";
                            var f_end_depot = ship.end_depot;
                            var stime = ship.start_time.replace(/:/g, '');
                            var etime = ship.end_time.replace(/:/g, '');
                            var trips = "0" + ship.trip.length;
                            var no_trail = "1";
                            var first_trail = "t" + ship.tractor_code;
                            var second_trail = "";
                            var third_trail = "";
                            var start_date = ('0' + currentdate.getDate() + 1).slice(-2) + "" + ('0' + (currentdate.getMonth() + 1)).slice(-2) + "" + currentdate.getFullYear().toString().substr(-2);
                            var end_date = ('0' + currentdate.getDate() + 2).slice(-2) + "" + ('0' + (currentdate.getMonth() + 1)).slice(-2) + "" + currentdate.getFullYear().toString().substr(-2);
                            identifier = identifier.padEnd(8, ' ')
                            reg = reg.padEnd(10, ' ')
                            end_depot = end_depot.padEnd(1, ' ')
                            f_end_depot = f_end_depot.padEnd(3, ' ')
                            sec_depot = '   ';
                            stime = stime.padEnd(4, ' ')
                            etime = etime.padEnd(4, ' ')
                            trips = trips.padEnd(2, ' ')
                            no_trail = no_trail.padEnd(1, ' ')
                            first_trail = first_trail.padEnd(8, ' ')
                            second_trail = second_trail.padEnd(8, ' ')
                            third_trail = third_trail.padEnd(8, ' ')
                            start_date = start_date.padEnd(6, ' ')
                            end_date = end_date.padEnd(6, ' ')
                            line4 = "T" + identifier + "" + reg + "" + end_depot + "" + f_end_depot + "" + sec_depot + "" + stime + "" + etime + "" + trips + "" + no_trail + "" + first_trail + "" + second_trail + "" + third_trail + "" + start_date + "" + end_date;
                            line4 = line4.padEnd(80, ' ');

                            await ship.trip.forEach(async trip => {
                                var data = await calc_rtd(trip, index);
                                // resolve(response); // Call this when the logic is done

                                // data = await calc_rtd(trip, index);
                                console.log(data["Total Distance"]);

                                console.log("Compa", trip.compartments.length);
                                console.log("Orders", trip.orders.length);


                                const distinctMaterialCodes = [...new Set(trip.orders.map(order => order.materialCode))];

                                // console.log(distinctMaterialCodes);
                                var eta_sec_depot;
                                var code_sec_depot;
                                var time_spend_2;
                                var name_of_mate;
                                var trip_number = "0" + trip.trip_no;
                                var n_start_depot = "1";
                                var start_depot = ship.load_depot;
                                var c_end_depot = ship.end_depot;
                                var stime = trip.start_time.replace(/:/g, '');
                                var etime = trip.end_time.replace(/:/g, '');
                                var time_spend_1 = "0025";
                                var n_prods = "0" + distinctMaterialCodes.length;
                                var edistance = data["Total Distance"].toString();

                                var n_driver = "CHAKLALA SCOPE";
                                var code_driver = "CKLDRI";
                                var n_compartments = "0" + trip.compartments.length;
                                var n_orders = "0" + trip.orders.length;
                                trip_number = trip_number.padEnd(2, ' ')
                                n_start_depot = n_start_depot.padEnd(1, ' ')
                                start_depot = start_depot.padEnd(3, ' ')
                                stimet = stimet.padEnd(4, ' ')
                                code_sec_depot = '   ';
                                estime = estime.padEnd(4, ' ')
                                time_spend_1 = time_spend_1.padEnd(4, ' ')
                                time_spend_2 = '    ';
                                n_prods = n_prods.padEnd(2, ' ')
                                edistance = edistance.padEnd(4, ' ')
                                name_of_mate = '              ';
                                n_driver = n_driver.padEnd(14, ' ');
                                code_driver = code_driver.padEnd(6, ' ')
                                n_compartments = n_compartments.padEnd(2, ' ')
                                n_orders = n_orders.padEnd(2, ' ')
                                eta_sec_depot = '    ';



                                line5 = "R" + trip_number + "" + n_start_depot + "" + start_depot + "" + code_sec_depot + "" + c_end_depot + "" + stimet + "" + eta_sec_depot + "" + estime + "" + time_spend_1 + "" + time_spend_2 + "" + n_prods + "" + edistance + "" + name_of_mate + "" + n_driver + "" + code_driver + "" + n_compartments + "" + n_orders;
                                line5 = line5.padEnd(80, ' ');
                                output5 += line5 + "\n";
                                console.log(output5);

                                var tdesc = "";
                                // var tstart = document.getElementById('tstart').value;
                                // var tend = document.getElementById('tend').value;
                                var ship_num = trip.shipment_no.toString();
                                var svcode = ship.tractor_reg + "CV";
                                tdesc = tdesc.padEnd(40, ' ')
                                // tstart = tstart.padEnd(6, ' ')
                                // tend = tend.padEnd(6, ' ')
                                ship_num = ship_num.padEnd(15, ' ')
                                svcode = svcode.padEnd(8, ' ')
                                line6 = "X" + tdesc + "" + start_date + "" + end_date + "" + ship_num + "" + svcode;
                                line6 = line6.padEnd(80, ' ');
                                output6 += line6 + "\n";
                                const tankCode = "";
                                trip.compartments.forEach((compartment, index) => {
                                    let compartmentString = compartment.product_id.toString().padEnd(12, ' ') +
                                        tankCode.padEnd(3, ' ') + compartment.loaded_volume.toString().padStart(6, '0') + f_end_depot.padEnd(3, ' ');

                                    line7 += compartmentString;
                                    // console.log(line7);

                                    // If three compartments have been added or if it's the last compartment, add the line to output
                                    if ((index + 1) % 3 === 0 || index === trip.compartments.length - 1) {
                                        line7 = line7.padEnd(80); // Fill the remaining spaces to make the line 80 characters long
                                        output7 += line7;
                                        line7 = "\nC"; // Reset line for the next set of compartments
                                    }
                                });

                                trip.orders.forEach(order => {

                                    var onumber = order.orderId;
                                    var pcode = order.shipTo;
                                    var otype = "P";
                                    var ostatus = "N";
                                    var tcouple = "0";
                                    var eta = "0129";
                                    var trd = "0055";
                                    var pweigth = "35000";
                                    var n_prods1 = "01";
                                    var sap_mcode = order.materialCode;
                                    var tgcode = "   ";
                                    var pqtyw = order.target;
                                    var dates = end_date;
                                    onumber = onumber.padEnd(11, ' ');
                                    pcode = pcode.padEnd(12, ' ');
                                    otype = otype.padEnd(1, ' ');
                                    ostatus = ostatus.padEnd(1, ' ');
                                    eta = eta.padEnd(4, ' ');
                                    trd = trd.padEnd(4, ' ');
                                    pweigth = pweigth.padEnd(6, ' ');
                                    n_prods1 = n_prods1.padEnd(2, ' ');
                                    sap_mcode = sap_mcode.padEnd(12, ' ');
                                    tgcode = tgcode.padEnd(3, ' ');
                                    pqtyw = pqtyw.padEnd(6, ' ');
                                    dates = dates.padEnd(6, ' ');
                                    line8 = "O" + onumber + "" + pcode + "" + otype + "" + ostatus + "" + tcouple + "" + eta + "" + trd + "" + pweigth + "" + n_prods1 + "" + sap_mcode + "" + tgcode + "" + pqtyw + "" + dates;
                                    line8 = line8.padEnd(80, ' ');
                                    // line8 += line8+"\n";
                                    output8 += line8 + "\n";
                                    const compartment = trip.compartments.filter(comp => comp.order_id === order.orderId);
                                    // console.log(compartment);




                                    const recordIdentifier = "L";
                                    let output = '';
                                    let line = recordIdentifier;
                                    const tankCode = "";
                                    for (let i = 0; i < compartment.length; i++) {
                                        let compartments = compartment[i];

                                        let compartmentInfo = compartments.order_id.toString().padStart(11, ' ') + compartments.product_id.toString().padEnd(12, ' ') +
                                            tankCode.padEnd(3, ' ') + compartments.compartment_no.toString().padStart(2, '0') + compartments.loaded_volume.toString().padStart(6, '0');

                                        if (line.length + compartmentInfo.length > 80) {
                                            output += line.padEnd(80, ' ') + '\n';
                                            line = recordIdentifier + compartmentInfo;
                                        }
                                        else {
                                            line += compartmentInfo;
                                        }
                                    }
                                    if (line.length > 0) {
                                        output += line.padEnd(80, ' ') + '\n';
                                        output8 += output;
                                    }
                                    // console.log(output);


                                    // line9 = line9.padEnd(80, ' ');

                                    // console.log(line8);
                                });


                                // line4 += ""
                                if (d_portion == "") {
                                    d_portionl4 += line4 + "\n";
                                    console.log(d_portion);
                                    // d_portion = d_portionl4 + d_portion;


                                    d_portion += d_portionl4.padEnd(80, ' ') + "\n" + output5 + "\n" + output6 + "\n" + output7.padEnd(80, ' ') + "\n" + output8;
                                    line4 = "";
                                }
                                else {
                                    d_portionl4 += line4 + "\n";
                                    d_portion += "\n" + d_portionl4.padEnd(80, ' ') + "\n" + output5 + "\n" + output6 + "\n" + output7.padEnd(80, ' ') + "\n" + output8;

                                }
                                let lines = d_portion.split('\n');

                                // Iterate over each line and pad it to 80 characters
                                let paddedLines = lines.map(line => {
                                    if (line.length < 80) {
                                        return line.padEnd(80, ' '); // Pad with spaces to make the length 80
                                    } else {
                                        return line;
                                    }
                                });

                                // Join the lines back together with newline characters
                                d_portion = paddedLines.join('\n');



                                d_portionl4 = "";
                                output5 = "";
                                output6 = "";
                                output7 = "";
                                output8 = "";

                            });



                            // if (d_portion == "") {

                            //         d_portion += line4 + "\n" + output5 + "\n" + output6 + "\n" + output7.padEnd(80, ' ') + "\n" + output8;

                            //     }
                            //     else {
                            //         d_portion += "\n" + line4 + "\n" + output5 + "\n" + output6 + "\n" + output7.padEnd(80, ' ') + "\n" + output8;

                            //     }

                            line4 = "";
                        });

                        line1 = line1.padEnd(80, ' ');
                        line2 = line2.padEnd(80, ' ');
                        line3 = line3.padEnd(80, ' ');
                        var line11 = "\n#BCT" + tch + "GSAPBS1" + gsap + "" + "000010";
                        line11 = line11.padEnd(81, ' ');

                        var line12 = "#TCT" + tch + "GSAP" + gsap + "" + "000012" + "" + "001";
                        line12 = line12.padEnd(80, ' ');


                        // console.log(line1 + "\n" + line2 + "\n" + line3 + "\n" + d_portion + line11 + "\n" + line12);

                        text = line1 + "\n" + line2 + "\n" + line3 + "\n" + d_portion + line11 + "\n" + line12;
                        let lines = text.split('\n');
                        // Filter out lines that are empty or contain only whitespace
                        let nonEmptyLines = lines.filter(line => line.trim() !== '');
                        // Join the non-empty lines back together with newline characters
                        text = nonEmptyLines.join('\n');

                        line4 = "";
                        line5 = "";
                        line6 = "";
                        console.log(text);




                    }))
                }

                async function sendmegenerate(orders) {
                    var am_pm = $('#am_pm').val();
                    var date = $('#date').val();




                    // Split the date string into year, month, and day parts
                    const [year, month, day] = date.split('-');

                    // Remove leading zeros from day and month
                    const formattedDay = parseInt(day, 10);
                    const formattedMonth = parseInt(month, 10);
                    const formattedYear = year.slice(-2); // Get the last two digits of the year

                    // Concatenate to get the desired format
                    const currentdate2 = `${formattedDay}${formattedMonth}${formattedYear}`;



                    return new Promise((async (resolve, reject) => {
                        var f_name;
                        let order = orders;

                        if (!order) {
                            console.error("No orders found in localStorage");
                            return;
                        }

                        let order1;
                        try {
                            order1 = JSON.parse(order);

                        } catch (error) {
                            console.error("Failed to parse orders from localStorage:", error);
                            return;
                        }
                        console.log(veh_order.am[0]);
                        var filename = $('input[type=file]').val().replace(/C:\\fakepath\\/i, '')
                        const parts = filename.split('_');
                        const extractedNumber = parts[1];

                        f_name = extractedNumber;
                        // var f_name = veh_order[0].trip[0].orders[0]['file_name'];
                        // var f_name = veh_order[0].trip[0].orders[0]['file_name'];

                        // calc_rtd();  
                        const shipments = order1;

                        console.log(shipments);
                        const tch = f_name;
                        const gsap = '1' + f_name;
                        var currentdate = new Date();
                        var currentdate2 = new Date(date);
                        var datetime = ('0' + currentdate.getDate()).slice(-2) + "-" + ('0' + (currentdate.getMonth() + 1)).slice(-2) + "-" + currentdate.getFullYear().toString().substr(-2) + "" + currentdate.getHours() + ":" + currentdate.getMinutes();
                        // console.log(datetime);
                        var sdate = ('0' + currentdate2.getDate()).slice(-2) + "" + ('0' + (currentdate2.getMonth() + 1)).slice(-2) + "" + currentdate2.getFullYear().toString().substr(-2);
                        create_shipment();
                        var line1 = "#TCH" + tch + "GSAP" + gsap + "" + datetime;
                        var line2 = "#BCH" + tch + "GSAPBS1" + gsap + "" + datetime;
                        var ftext = "";

                        // for (i = 0; i < 2; i++) {
                        //     var shipment;
                        //     var shift;

                        //     if (i == 0) {
                        //         shipment = shipments.am;
                        //         console.log(shipment);
                        //         shift = "AM"

                        //     }
                        // else {
                        shipment = shipments.pm;
                        console.log(shipment);
                        shift = "PM";
                        // }


                        var line3 = "B LTRK CZZZ" + sdate + "" + shift;
                        var line4 = "";
                        var line5 = "";
                        var line6 = "";
                        let output5 = "";
                        let output6 = "";
                        let output7 = "";
                        let output8 = "";
                        let line7 = "C";
                        let line8 = "";
                        let d_portion = "";
                        let d_portionl4 = "";
                        let trip = "";
                        console.log(shipment.length);
                        let index = 0;
                        for (const ship of shipment) {
                            console.log("Samad ", index);
                            var identifier = ship.tractor_code;
                            var reg = ship.tractor_reg;
                            var end_depot = "1";
                            var f_end_depot = ship.end_depot;
                            var stime = ship.start_time.replace(/:/g, '');
                            var etime = ship.end_time.replace(/:/g, '');
                            var trips = "0" + ship.trip.length;
                            var no_trail = "1";
                            var first_trail = "t" + ship.tractor_code;
                            var second_trail = "";
                            var third_trail = "";
                            var start_date = ('0' + currentdate.getDate() + 1).slice(-2) + "" + ('0' + (currentdate.getMonth() + 1)).slice(-2) + "" + currentdate.getFullYear().toString().substr(-2);
                            var end_date = ('0' + currentdate.getDate() + 2).slice(-2) + "" + ('0' + (currentdate.getMonth() + 1)).slice(-2) + "" + currentdate.getFullYear().toString().substr(-2);
                            identifier = identifier.padEnd(8, ' ')
                            reg = reg.padEnd(10, ' ')
                            end_depot = end_depot.padEnd(1, ' ')
                            f_end_depot = f_end_depot.padEnd(3, ' ')
                            sec_depot = '   ';
                            stime = stime.padEnd(4, ' ')
                            etime = etime.padEnd(4, ' ')
                            trips = trips.padEnd(2, ' ')
                            no_trail = no_trail.padEnd(1, ' ')
                            first_trail = first_trail.padEnd(8, ' ')
                            second_trail = second_trail.padEnd(8, ' ')
                            third_trail = third_trail.padEnd(8, ' ')
                            start_date = start_date.padEnd(6, ' ')
                            end_date = end_date.padEnd(6, ' ')
                            line4 = "T" + identifier + "" + reg + "" + end_depot + "" + f_end_depot + "" + sec_depot + "" + stime + "" + etime + "" + trips + "" + no_trail + "" + first_trail + "" + second_trail + "" + third_trail + "" + start_date + "" + end_date;
                            line4 = line4.padEnd(80, ' ');

                            for (const trip of ship.trip) {
                                var data = await calc_rtd(trip, index, shipment);
                                // resolve(response); // Call this when the logic is done

                                // data = await calc_rtd(trip, index);
                                console.log(data["Total Distance"]);

                                console.log("Compa", trip.compartments.length);
                                console.log("Orders", trip.orders.length);


                                const distinctMaterialCodes = [...new Set(trip.orders.map(order => order.materialCode))];

                                // console.log(distinctMaterialCodes);
                                var eta_sec_depot;
                                var code_sec_depot;
                                var time_spend_2;
                                var name_of_mate;
                                var trip_number = "0" + trip.trip_no;
                                var n_start_depot = "1";
                                var start_depot = ship.load_depot;
                                var c_end_depot = ship.end_depot;
                                var stimet = ship.start_time.replace(/:/g, '');
                                var estime = data["Total Time"].toString();
                                var time_spend_1 = "0025";
                                var n_prods = "0" + distinctMaterialCodes.length;
                                var edistance = data["Total Distance"].toString();

                                var n_driver = "MAHMOOD KOT SC";
                                var code_driver = "MHK DR";
                                var n_compartments = "0" + trip.compartments.length;
                                var n_orders = "0" + trip.orders.length;
                                trip_number = trip_number.padEnd(2, ' ')
                                n_start_depot = n_start_depot.padEnd(1, ' ')
                                start_depot = start_depot.padEnd(3, ' ')
                                stimet = stimet.padEnd(4, ' ')
                                code_sec_depot = '   ';
                                estime = estime.padStart(4, '0')
                                time_spend_1 = time_spend_1.padEnd(4, ' ')
                                time_spend_2 = '    ';
                                n_prods = n_prods.padEnd(2, ' ')
                                edistance = edistance.padStart(4, '0')
                                name_of_mate = '              ';
                                n_driver = n_driver.padEnd(14, ' ');
                                code_driver = code_driver.padEnd(6, ' ')
                                n_compartments = n_compartments.padEnd(2, ' ')
                                n_orders = n_orders.padEnd(2, ' ')
                                eta_sec_depot = '    ';



                                line5 = "R" + trip_number + "" + n_start_depot + "" + start_depot + "" + code_sec_depot + "" + c_end_depot + "" + stimet + "" + eta_sec_depot + "" + estime + "" + time_spend_1 + "" + time_spend_2 + "" + n_prods + "" + edistance + "" + name_of_mate + "" + n_driver + "" + code_driver + "" + n_compartments + "" + n_orders;
                                line5 = line5.padEnd(80, ' ');
                                output5 += line5 + "\n";
                                console.log(output5);

                                var tdesc = "";
                                // var tstart = document.getElementById('tstart').value;
                                // var tend = document.getElementById('tend').value;
                                var ship_num = trip.shipment_no.toString();
                                var svcode = ship.tractor_reg + "CV";
                                tdesc = tdesc.padEnd(40, ' ')
                                // tstart = tstart.padEnd(6, ' ')
                                // tend = tend.padEnd(6, ' ')
                                ship_num = ship_num.padEnd(15, ' ')
                                svcode = svcode.padEnd(8, ' ')
                                line6 = "X" + tdesc + "" + start_date + "" + end_date + "" + ship_num + "" + svcode;
                                line6 = line6.padEnd(80, ' ');
                                output6 += line6 + "\n";
                                const tankCode = "";
                                trip.compartments.forEach((compartment, index) => {
                                    let compartmentString = compartment.product_id.toString().padEnd(12, ' ') +
                                        tankCode.padEnd(3, ' ') + compartment.loaded_volume.toString().padStart(6, '0') + f_end_depot.padEnd(3, ' ');

                                    line7 += compartmentString;
                                    // console.log(line7);

                                    // If three compartments have been added or if it's the last compartment, add the line to output
                                    if ((index + 1) % 3 === 0 || index === trip.compartments.length - 1) {
                                        line7 = line7.padEnd(80); // Fill the remaining spaces to make the line 80 characters long
                                        output7 += line7;
                                        line7 = "\nC"; // Reset line for the next set of compartments
                                    }
                                });

                                for (const order of trip.orders) {

                                    var onumber = order.orderId;
                                    var pcode = order.shipTo;
                                    var otype = "P";
                                    var ostatus = "N";
                                    var tcouple = "0";
                                    var eta = "0129";
                                    var trd = "0055";
                                    var pweigth = "35000";
                                    var n_prods1 = "01";
                                    var sap_mcode = order.materialCode;
                                    var tgcode = "   ";
                                    var pqtyw = order.target;
                                    var dates = end_date;
                                    onumber = onumber.padEnd(11, ' ');
                                    pcode = pcode.padEnd(12, ' ');
                                    otype = otype.padEnd(1, ' ');
                                    ostatus = ostatus.padEnd(1, ' ');
                                    eta = eta.padEnd(4, ' ');
                                    trd = trd.padEnd(4, ' ');
                                    pweigth = pweigth.padEnd(6, ' ');
                                    n_prods1 = n_prods1.padEnd(2, ' ');
                                    sap_mcode = sap_mcode.padEnd(12, ' ');
                                    tgcode = tgcode.padEnd(3, ' ');
                                    pqtyw = pqtyw.padEnd(6, ' ');
                                    dates = dates.padEnd(6, ' ');
                                    line8 = "O" + onumber + "" + pcode + "" + otype + "" + ostatus + "" + tcouple + "" + eta + "" + trd + "" + pweigth + "" + n_prods1 + "" + sap_mcode + "" + tgcode + "" + pqtyw + "" + dates;
                                    line8 = line8.padEnd(80, ' ');
                                    // line8 += line8+"\n";
                                    output8 += line8 + "\n";
                                    const compartment = trip.compartments.filter(comp => comp.order_id === order.orderId);
                                    // console.log(compartment);




                                    const recordIdentifier = "L";
                                    let output = '';
                                    let line = recordIdentifier;
                                    const tankCode = "";
                                    for (let i = 0; i < compartment.length; i++) {
                                        let compartments = compartment[i];

                                        let compartmentInfo = compartments.order_id.toString().padStart(11, ' ') + compartments.product_id.toString().padEnd(12, ' ') +
                                            tankCode.padEnd(3, ' ') + compartments.compartment_no.toString().padStart(2, '0') + compartments.loaded_volume.toString().padStart(6, '0');

                                        if (line.length + compartmentInfo.length > 80) {
                                            output += line.padEnd(80, ' ') + '\n';
                                            line = recordIdentifier + compartmentInfo;
                                        } else {
                                            line += compartmentInfo;
                                        }
                                    }
                                    if (line.length > 0) {
                                        output += line.padEnd(80, ' ') + '\n';
                                        output8 += output;
                                    }
                                    // console.log(output);


                                    // line9 = line9.padEnd(80, ' ');

                                    // console.log(line8);
                                };


                                // line4 += ""
                                if (d_portion == "") {
                                    d_portionl4 += line4 + "\n";
                                    console.log(d_portion);
                                    // d_portion = d_portionl4 + d_portion;


                                    d_portion += d_portionl4.padEnd(80, ' ') + "\n" + output5 + "\n" + output6 + "\n" + output7.padEnd(80, ' ') + "\n" + output8;
                                    line4 = "";
                                }
                                else {
                                    d_portionl4 += line4 + "\n";
                                    d_portion += "\n" + d_portionl4.padEnd(80, ' ') + "\n" + output5 + "\n" + output6 + "\n" + output7.padEnd(80, ' ') + "\n" + output8;

                                }
                                let lines = d_portion.split('\n');

                                // Iterate over each line and pad it to 80 characters
                                let paddedLines = lines.map(line => {
                                    if (line.length < 80) {
                                        return line.padEnd(80, ' '); // Pad with spaces to make the length 80
                                    } else {
                                        return line;
                                    }
                                });

                                // Join the lines back together with newline characters
                                d_portion = paddedLines.join('\n');



                                d_portionl4 = "";
                                output5 = "";
                                output6 = "";
                                output7 = "";
                                output8 = "";

                            };



                            // if (d_portion == "") {

                            //         d_portion += line4 + "\n" + output5 + "\n" + output6 + "\n" + output7.padEnd(80, ' ') + "\n" + output8;

                            //     }
                            //     else {
                            //         d_portion += "\n" + line4 + "\n" + output5 + "\n" + output6 + "\n" + output7.padEnd(80, ' ') + "\n" + output8;

                            //     }

                            line4 = "";
                            index++;
                        }

                        line1 = line1.padEnd(80, ' ');
                        line2 = line2.padEnd(80, ' ');
                        line3 = line3.padEnd(80, ' ');

                        var line11 = "\n#BCT" + tch + "GSAPBS1" + gsap + "" + "000010";
                        line11 = line11.padEnd(81, ' ');

                        var line12 = "#TCT" + tch + "GSAP" + gsap + "" + "000012" + "" + "001";
                        line12 = line12.padEnd(80, ' ');



                        // console.log(line1 + "\n" + line2 + "\n" + line3 + "\n" + d_portion + line11 + "\n" + line12);

                        text = line3 + "\n" + d_portion + line11 + "\n" + line12 + "\n";
                        let lines = text.split('\n');
                        // Filter out lines that are empty or contain only whitespace
                        let nonEmptyLines = lines.filter(line => line.trim() !== '');
                        // Join the non-empty lines back together with newline characters
                        text = nonEmptyLines.join('\n');
                        ftext += text + "\n"
                        line3 = "";
                        line4 = "";
                        line5 = "";
                        line6 = "";
                        console.log(ftext);

                        // console.log(text);
                        // }
                        var currentdate = new Date();
                        var datetime = ('0' + currentdate.getDate()).slice(-2) + "-" + ('0' + (currentdate.getMonth() + 1)).slice(-2) + "-" + currentdate.getFullYear().toString().substr(-2) + "" + currentdate.getHours() + ":" + currentdate.getMinutes();
                        ftext = line1 + "\n" + line2 + "\n" + ftext;
                        const link = document.createElement("a");
                        const file = new Blob([ftext], { type: 'text/plain' });

                        link.href = URL.createObjectURL(file);

                        link.download = "flow_flat_file_" + datetime + ".txt";
                        link.click();
                        URL.revokeObjectURL(link.href);



                    }))
                }

                async function generate2() {
                    var am_pm = $('#am_pm').val();
                    var date = $('#date').val();




                    // Split the date string into year, month, and day parts
                    const [year, month, day] = date.split('-');

                    // Remove leading zeros from day and month
                    const formattedDay = parseInt(day, 10);
                    const formattedMonth = parseInt(month, 10);
                    const formattedYear = year.slice(-2); // Get the last two digits of the year

                    // Concatenate to get the desired format
                    const currentdate2 = `${formattedDay}${formattedMonth}${formattedYear}`;



                    return new Promise((async (resolve, reject) => {
                        var f_name;
                        let order = localStorage.getItem('orders');
                        console.log("orders", order)
                        if (!order) {
                            console.error("No orders found in localStorage");
                            return;
                        }

                        let order1;
                        try {
                            order1 = JSON.parse(order);

                        } catch (error) {
                            console.error("Failed to parse orders from localStorage:", error);
                            return;
                        }
                        console.log(veh_order.am[0]);
                        var filename = $('input[type=file]').val().replace(/C:\\fakepath\\/i, '')
                        const parts = filename.split('_');
                        const extractedNumber = parts[1];

                        f_name = extractedNumber;
                        // var f_name = veh_order[0].trip[0].orders[0]['file_name'];
                        // var f_name = veh_order[0].trip[0].orders[0]['file_name'];

                        // calc_rtd();  
                        const shipments = order1;

                        console.log(shipments);
                        const tch = f_name;
                        const gsap = '1' + f_name;
                        var currentdate = new Date();
                        var currentdate2 = new Date(date);
                        var datetime = ('0' + currentdate.getDate()).slice(-2) + "-" + ('0' + (currentdate.getMonth() + 1)).slice(-2) + "-" + currentdate.getFullYear().toString().substr(-2) + "" + currentdate.getHours() + ":" + currentdate.getMinutes();
                        // console.log(datetime);
                        var sdate = ('0' + currentdate2.getDate()).slice(-2) + "" + ('0' + (currentdate2.getMonth() + 1)).slice(-2) + "" + currentdate2.getFullYear().toString().substr(-2);
                        create_shipment();
                        var line1 = "#TCH" + tch + "GSAP" + gsap + "" + datetime;
                        var line2 = "#BCH" + tch + "GSAPBS1" + gsap + "" + datetime;
                        var ftext = "";

                        // for (i = 0; i < 2; i++) {
                        //     var shipment;
                        //     var shift;

                        //     if (i == 0) {
                        //         shipment = shipments.am;
                        //         console.log(shipment);
                        //         shift = "AM"

                        //     }
                        // else {
                        shipment = shipments.am;
                        console.log(shipment);
                        shift = "AM";
                        // }


                        var line3 = "B LTRK CZZZ" + sdate + "" + shift;
                        var line4 = "";
                        var line5 = "";
                        var line6 = "";
                        let output5 = "";
                        let output6 = "";
                        let output7 = "";
                        let output8 = "";
                        let line7 = "C";
                        let line8 = "";
                        let d_portion = "";
                        let d_portionl4 = "";
                        let trip = "";
                        console.log(shipment.length);
                        let index = 0;
                        for (const ship of shipment) {
                            console.log("Samad ", index);
                            var identifier = ship.tractor_code;
                            var reg = ship.tractor_reg;
                            var end_depot = "1";
                            var f_end_depot = ship.end_depot;
                            var stime = ship.start_time.replace(/:/g, '');
                            var etime = ship.end_time.replace(/:/g, '');
                            var trips = "0" + ship.trip.length;
                            var no_trail = "1";
                            var first_trail = "t" + ship.tractor_code;
                            var second_trail = "";
                            var third_trail = "";
                            var start_date = ('0' + currentdate.getDate() + 1).slice(-2) + "" + ('0' + (currentdate.getMonth() + 1)).slice(-2) + "" + currentdate.getFullYear().toString().substr(-2);
                            var end_date = ('0' + currentdate.getDate() + 2).slice(-2) + "" + ('0' + (currentdate.getMonth() + 1)).slice(-2) + "" + currentdate.getFullYear().toString().substr(-2);
                            console.log("startsdate", start_date)
                            identifier = identifier.padEnd(8, ' ')
                            reg = reg.padEnd(10, ' ')
                            end_depot = end_depot.padEnd(1, ' ')
                            f_end_depot = f_end_depot.padEnd(3, ' ')
                            sec_depot = '   ';
                            stime = stime.padEnd(4, ' ')
                            etime = etime.padEnd(4, ' ')
                            trips = trips.padEnd(2, ' ')
                            no_trail = no_trail.padEnd(1, ' ')
                            first_trail = first_trail.padEnd(8, ' ')
                            second_trail = second_trail.padEnd(8, ' ')
                            third_trail = third_trail.padEnd(8, ' ')
                            start_date = start_date.padEnd(6, ' ')
                            end_date = end_date.padEnd(6, ' ')
                            line4 = "T" + identifier + "" + reg + "" + end_depot + "" + f_end_depot + "" + sec_depot + "" + stime + "" + etime + "" + trips + "" + no_trail + "" + first_trail + "" + second_trail + "" + third_trail + "" + start_date + "" + end_date;
                            line4 = line4.padEnd(80, ' ');

                            for (const trip of ship.trip) {
                                var data = await calc_rtd(trip, index, shipment);
                                // resolve(response); // Call this when the logic is done

                                // data = await calc_rtd(trip, index);
                                console.log(data["Total Distance"]);

                                console.log("Compa", trip.compartments.length);
                                console.log("Orders", trip.orders.length);


                                const distinctMaterialCodes = [...new Set(trip.orders.map(order => order.materialCode))];

                                // console.log(distinctMaterialCodes);
                                var eta_sec_depot;
                                var code_sec_depot;
                                var time_spend_2;
                                var name_of_mate;
                                var trip_number = "0" + trip.trip_no;
                                var n_start_depot = "1";
                                var start_depot = ship.load_depot;
                                var c_end_depot = ship.end_depot;
                                var stimet = ship.start_time.replace(/:/g, '');
                                var estime = data["Total Time"].toString();
                                var time_spend_1 = "0025";
                                var n_prods = "0" + distinctMaterialCodes.length;
                                var edistance = data["Total Distance"].toString();

                                var n_driver = "MAHMOOD KOT SC";
                                var code_driver = "MHK DR";
                                var n_compartments = "0" + trip.compartments.length;
                                var n_orders = "0" + trip.orders.length;
                                trip_number = trip_number.padEnd(2, ' ')
                                n_start_depot = n_start_depot.padEnd(1, ' ')
                                start_depot = start_depot.padEnd(3, ' ')
                                stimet = stimet.padEnd(4, ' ')
                                code_sec_depot = '   ';
                                estime = estime.padStart(4, '0')
                                time_spend_1 = time_spend_1.padEnd(4, ' ')
                                time_spend_2 = '    ';
                                n_prods = n_prods.padEnd(2, ' ')
                                edistance = edistance.padStart(4, '0')
                                name_of_mate = '              ';
                                n_driver = n_driver.padEnd(14, ' ');
                                code_driver = code_driver.padEnd(6, ' ')
                                n_compartments = n_compartments.padEnd(2, ' ')
                                n_orders = n_orders.padEnd(2, ' ')
                                eta_sec_depot = '    ';



                                line5 = "R" + trip_number + "" + n_start_depot + "" + start_depot + "" + code_sec_depot + "" + c_end_depot + "" + stimet + "" + eta_sec_depot + "" + estime + "" + time_spend_1 + "" + time_spend_2 + "" + n_prods + "" + edistance + "" + name_of_mate + "" + n_driver + "" + code_driver + "" + n_compartments + "" + n_orders;
                                line5 = line5.padEnd(80, ' ');
                                output5 += line5 + "\n";
                                console.log(output5);

                                var tdesc = "";
                                // var tstart = document.getElementById('tstart').value;
                                // var tend = document.getElementById('tend').value;
                                var ship_num = trip.shipment_no.toString();
                                var svcode = ship.tractor_reg + "CV";
                                tdesc = tdesc.padEnd(40, ' ')
                                // tstart = tstart.padEnd(6, ' ')
                                // tend = tend.padEnd(6, ' ')
                                ship_num = ship_num.padEnd(15, ' ')
                                svcode = svcode.padEnd(8, ' ')
                                line6 = "X" + tdesc + "" + start_date + "" + end_date + "" + ship_num + "" + svcode;
                                line6 = line6.padEnd(80, ' ');
                                output6 += line6 + "\n";
                                const tankCode = "";
                                trip.compartments.forEach((compartment, index) => {
                                    let compartmentString = compartment.product_id.toString().padEnd(12, ' ') +
                                        tankCode.padEnd(3, ' ') + compartment.loaded_volume.toString().padStart(6, '0') + f_end_depot.padEnd(3, ' ');

                                    line7 += compartmentString;
                                    // console.log(line7);

                                    // If three compartments have been added or if it's the last compartment, add the line to output
                                    if ((index + 1) % 3 === 0 || index === trip.compartments.length - 1) {
                                        line7 = line7.padEnd(80); // Fill the remaining spaces to make the line 80 characters long
                                        output7 += line7;
                                        line7 = "\nC"; // Reset line for the next set of compartments
                                    }
                                });

                                for (const order of trip.orders) {

                                    var onumber = order.orderId;
                                    var pcode = order.shipTo;
                                    var otype = "P";
                                    var ostatus = "N";
                                    var tcouple = "0";
                                    var eta = "0129";
                                    var trd = "0055";
                                    var pweigth = "35000";
                                    var n_prods1 = "01";
                                    var sap_mcode = order.materialCode;
                                    var tgcode = "   ";
                                    var pqtyw = order.target;
                                    var dates = end_date;
                                    onumber = onumber.padEnd(11, ' ');
                                    pcode = pcode.padEnd(12, ' ');
                                    otype = otype.padEnd(1, ' ');
                                    ostatus = ostatus.padEnd(1, ' ');
                                    eta = eta.padEnd(4, ' ');
                                    trd = trd.padEnd(4, ' ');
                                    pweigth = pweigth.padEnd(6, ' ');
                                    n_prods1 = n_prods1.padEnd(2, ' ');
                                    sap_mcode = sap_mcode.padEnd(12, ' ');
                                    tgcode = tgcode.padEnd(3, ' ');
                                    pqtyw = pqtyw.padEnd(6, ' ');
                                    dates = dates.padEnd(6, ' ');
                                    line8 = "O" + onumber + "" + pcode + "" + otype + "" + ostatus + "" + tcouple + "" + eta + "" + trd + "" + pweigth + "" + n_prods1 + "" + sap_mcode + "" + tgcode + "" + pqtyw + "" + dates;
                                    line8 = line8.padEnd(80, ' ');
                                    // line8 += line8+"\n";
                                    output8 += line8 + "\n";
                                    const compartment = trip.compartments.filter(comp => comp.order_id === order.orderId);
                                    // console.log(compartment);




                                    const recordIdentifier = "L";
                                    let output = '';
                                    let line = recordIdentifier;
                                    const tankCode = "";
                                    for (let i = 0; i < compartment.length; i++) {
                                        let compartments = compartment[i];

                                        let compartmentInfo = compartments.order_id.toString().padStart(11, ' ') + compartments.product_id.toString().padEnd(12, ' ') +
                                            tankCode.padEnd(3, ' ') + compartments.compartment_no.toString().padStart(2, '0') + compartments.loaded_volume.toString().padStart(6, '0');

                                        if (line.length + compartmentInfo.length > 80) {
                                            output += line.padEnd(80, ' ') + '\n';
                                            line = recordIdentifier + compartmentInfo;
                                        } else {
                                            line += compartmentInfo;
                                        }
                                    }
                                    if (line.length > 0) {
                                        output += line.padEnd(80, ' ') + '\n';
                                        output8 += output;
                                    }
                                    // console.log(output);


                                    // line9 = line9.padEnd(80, ' ');

                                    // console.log(line8);
                                };


                                // line4 += ""
                                if (d_portion == "") {
                                    d_portionl4 += line4 + "\n";
                                    console.log(d_portion);
                                    // d_portion = d_portionl4 + d_portion;


                                    d_portion += d_portionl4.padEnd(80, ' ') + "\n" + output5 + "\n" + output6 + "\n" + output7.padEnd(80, ' ') + "\n" + output8;
                                    line4 = "";
                                }
                                else {
                                    d_portionl4 += line4 + "\n";
                                    d_portion += "\n" + d_portionl4.padEnd(80, ' ') + "\n" + output5 + "\n" + output6 + "\n" + output7.padEnd(80, ' ') + "\n" + output8;

                                }
                                let lines = d_portion.split('\n');

                                // Iterate over each line and pad it to 80 characters
                                let paddedLines = lines.map(line => {
                                    if (line.length < 80) {
                                        return line.padEnd(80, ' '); // Pad with spaces to make the length 80
                                    } else {
                                        return line;
                                    }
                                });

                                // Join the lines back together with newline characters
                                d_portion = paddedLines.join('\n');



                                d_portionl4 = "";
                                output5 = "";
                                output6 = "";
                                output7 = "";
                                output8 = "";

                            };



                            // if (d_portion == "") {

                            //         d_portion += line4 + "\n" + output5 + "\n" + output6 + "\n" + output7.padEnd(80, ' ') + "\n" + output8;

                            //     }
                            //     else {
                            //         d_portion += "\n" + line4 + "\n" + output5 + "\n" + output6 + "\n" + output7.padEnd(80, ' ') + "\n" + output8;

                            //     }

                            line4 = "";
                            index++;
                        }

                        line1 = line1.padEnd(80, ' ');
                        line2 = line2.padEnd(80, ' ');
                        line3 = line3.padEnd(80, ' ');

                        var line11 = "\n#BCT" + tch + "GSAPBS1" + gsap + "" + "000010";
                        line11 = line11.padEnd(81, ' ');

                        var line12 = "#TCT" + tch + "GSAP" + gsap + "" + "000012" + "" + "001";
                        line12 = line12.padEnd(80, ' ');



                        // console.log(line1 + "\n" + line2 + "\n" + line3 + "\n" + d_portion + line11 + "\n" + line12);

                        text = line3 + "\n" + d_portion + line11 + "\n" + line12 + "\n";
                        let lines = text.split('\n');
                        // Filter out lines that are empty or contain only whitespace
                        let nonEmptyLines = lines.filter(line => line.trim() !== '');
                        // Join the non-empty lines back together with newline characters
                        text = nonEmptyLines.join('\n');
                        ftext += text + "\n"
                        line3 = "";
                        line4 = "";
                        line5 = "";
                        line6 = "";
                        console.log(ftext);

                        // console.log(text);
                        // }
                        var currentdate = new Date();
                        var datetime = ('0' + currentdate.getDate()).slice(-2) + "-" + ('0' + (currentdate.getMonth() + 1)).slice(-2) + "-" + currentdate.getFullYear().toString().substr(-2) + "" + currentdate.getHours() + ":" + currentdate.getMinutes();
                        ftext = line1 + "\n" + line2 + "\n" + ftext;
                        const link = document.createElement("a");
                        const file = new Blob([ftext], { type: 'text/plain' });

                        link.href = URL.createObjectURL(file);

                        link.download = "flow_flat_file_" + datetime + ".txt";
                        link.click();
                        URL.revokeObjectURL(link.href);



                    }))
                }

                async function create_file() {
                    await generate2();

                    console.log(text);

                    var currentdate = new Date();
                    var datetime = ('0' + currentdate.getDate()).slice(-2) + "-" + ('0' + (currentdate.getMonth() + 1)).slice(-2) + "-" + currentdate.getFullYear().toString().substr(-2) + "" + currentdate.getHours() + ":" + currentdate.getMinutes();

                    const link = document.createElement("a");
                    const file = new Blob([text], { type: 'text/plain' });

                    link.href = URL.createObjectURL(file);

                    link.download = "flow_flat_file_" + datetime + ".txt";
                    link.click();
                    URL.revokeObjectURL(link.href);

                }

                function highlightSelectedRow() {
                    // Get the selected row (assuming there is a way to identify the selected row, e.g., a 'selected' class)
                    const selectedRow = document.querySelector('#veh_tbl tbody tr.selected');

                    if (!selectedRow) {
                        console.error('No row selected');
                        return; // Exit if no row is selected
                    }

                    // Get the vehicle name from the first cell of the selected row
                    const vehName = selectedRow.cells[0].textContent.trim();

                    // Filter the veh_order JSON to find the vehicle by name
                    const vehicleData = veh_order.find(vehicle => vehicle.name == vehName);

                    if (vehicleData && vehicleData.erros && vehicleData.erros.length > 0) {
                        // If errors are present, change the background color to red
                        selectedRow.style.backgroundColor = 'red';
                    } else {
                        // Optional: Reset background color if no errors
                        selectedRow.style.backgroundColor = '';
                    }
                }

                // async function calc_eta(arr) {
                //     console.log("eta_shipto", arr)
                //     return new Promise((resolve, reject) => {

                //         const resultArray = arr;
                //         console.log(resultArray);
                //         console.log("/sa?arr=" + JSON.stringify(resultArray) + "");

                //         var settings = {
                //             "url": "/sa?arr=" + JSON.stringify(resultArray) + "",
                //             "method": "GET",
                //             "timeout": 0,
                //         };

                //         $.ajax(settings).done(function (response) {
                //             console.log('calculatrtd', response);
                //             resolve(response); // Call this when the logic is done
                //         });
                //     });
                // }

                function create_shipment() {
                    veh_order.forEach(veh => {
                        var trip_no;
                        const transformedData = veh.trip.map((trip, index) => {
                            trip_no = trip.shipment_no;
                            return {

                                [`trip${index + 1}`]: trip.orders
                            };
                        });


                        var orders = JSON.stringify(transformedData);
                        var veh_id = veh.id;
                        var shipment_date = veh.date;
                        var Shift_time = veh.am_pm;


                        // Check if any required field is empty


                        var form = new FormData();

                        form.append("orders", orders);
                        form.append("veh_id", veh_id);
                        form.append("shift_am_pm", Shift_time);
                        form.append("shipment_date", shipment_date);
                        form.append("shipment_no", trip_no);

                        var settings = {
                            "url": "shipment",
                            "method": "POST",
                            "timeout": 0,
                            "processData": false,
                            "mimeType": "multipart/form-data",
                            "contentType": false,
                            "data": form
                        };

                        $.ajax({
                            ...settings,
                            statusCode: {
                                200: function (response) {
                                    console.log(response);
                                },

                            },
                            success: function (data) {
                                Swal.fire(
                                    'Success!', 'Contact Created Successfully!', 'success'
                                )
                            },
                            error: function (xhr, textStatus, errorThrown) {
                                console.log(xhr)
                                console.log(textStatus)
                                console.log(errorThrown)

                                console.log(errorThrown);


                                // console.log("Request failed with status code: " + xhr.status);
                            }

                        });
                    })
                }

                function tsd_edit(id) {
                    $('#tsd_edit_modal').modal('show')
                    $.ajax({
                        url: "tsd_edit/" + id,
                        type: 'GET',
                        dataType: 'json',
                        success: function (response) {
                            console.log(id)
                            console.log(response)
                            console.log(response[0]['post_load'])
                            $('#update_tsd_id').val(response[0]['vehicle_id']);
                            $('#cv').val(response[0]['name']).trigger('change');
                            $('#tsd_shift').val(response[0]['shift']).trigger('change');
                            $('#tsd_tracktor').val(response[0]['tractor_code'] == null ? response[0]['tractor_reg'] : response[0]['tractor_code']);
                            $('#tsd_trailer').val(response[0]['trailer_code'] == null ? response[0]['trailer_reg'] : response[0]['trailer_code']);
                            $('#tsd_driver').val(response[0]['driver']);
                            $('#tsd_notes').val(response[0]['notes']);
                            $('#tsd_str_time').val(response[0]['start_time'])
                            $('#tsd_end_time').val(response[0]['end_time'])
                            setTimeout(() => {
                                $('#tsd_str_location').val(response[0]['start_loc']).trigger('change');
                                $('#tsd_end_location').val(response[0]['end_loc']).trigger('change');
                                $('#tsd_pre_load_depot').val(response[0]['pre_load']).trigger('change');
                                $('#tsd_post_load_depot').val(response[0]['post_load']).trigger('change');
                            }, 1000)

                            $('#tsd_availability').val(response[0]['availability']).trigger('change');
                            $('#tsd_contact_type').val(response[0]['contact_type']).trigger('change')


                        }
                    });
                }

                function parking_loc(id) {

                    scope_id = localStorage.getItem('scope')


                    var settings = {
                        "url": "parkingloc_byscopes/" + scope_id,
                        "method": "GET",
                        "timeout": 0,
                    };

                    $.ajax(settings).done(function (response) {
                        console.log(response)
                        $('#' + id + '').empty()
                        $('#' + id + '').append('<option label="Select..." value="select">Select</option>')


                        for (i = 0; i < response.length; i++) {
                            $('#' + id + '').append($('<option>', {
                                value: response[i]['id'],
                                text: response[i]['site_name']
                            }));
                        }
                    })
                }

                function depot(id) {

                    scope_id = localStorage.getItem('scope')

                    var settings = {
                        "url": "depots/" + scope_id,
                        "method": "GET",
                        "timeout": 0,
                    };

                    $.ajax(settings).done(function (response) {
                        console.log(response)
                        $('#' + id + '').empty()
                        $('#' + id + '').append('<option label="Select..." value="select">Select</option>')


                        for (i = 0; i < response.length; i++) {
                            $('#' + id + '').append($('<option>', {
                                value: response[i]['id'],
                                text: response[i]['site_name']
                            }));
                        }
                    })
                }

                function tsd_update() {
                    multtsdhid = $('#multtsdhid').val();
                    shift_ord = $('#shift_ord').val();
                    am_pm = $('#am_pm').val();
                    var form = new FormData();
                    console.log('multtsdhid', multtsdhid)
                    multtsdhid == "" ? "" : form.append("ids", multtsdhid)

                    form.append("shift", multtsdhid == "" ? $('#tsd_shift').val() : $('#multsd_shift').val());
                    form.append("tractor_code", multtsdhid == "" ? $('#tsd_tracktor').val() : $('#tsd_tracktor').val());
                    form.append("trailer_code", multtsdhid == "" ? $('#tsd_trailer').val() : $('#tsd_trailer').val());
                    form.append("driver", $('#tsd_driver').val());
                    form.append("notes", multtsdhid == "" ? $('#tsd_notes').val() : $('#multtsd_notes').val());
                    form.append("start_time", multtsdhid == "" ? $('#tsd_str_time').val() : $('#multtsd_str_time').val());
                    form.append("end_time", multtsdhid == "" ? $('#tsd_end_time').val() : $('#multtsd_end_time').val());
                    if (multtsdhid == "") {
                        form.append("start_location", $('#tsd_str_location').val());
                        form.append("end_location", $('#tsd_end_location').val());
                        form.append("preload_depot", $('#tsd_pre_load_depot').val());
                        form.append("postload_depot", $('#tsd_post_load_depot').val());
                    } else {
                        form.append("start_location", $('#tsd_str_location1').val());
                        form.append("end_location", $('#tsd_end_location1').val());
                        form.append("preload_depot", $('#tsd_pre_load_depot1').val());
                        form.append("postload_depot", $('#tsd_post_load_depot1').val());

                    }

                    form.append("availability", multtsdhid == "" ? $('#tsd_availability').val() : $('#multtsd_availability').val());
                    form.append("contact_type", multtsdhid == "" ? $('#tsd_contact_type').val() : $('#multsd_contact_type').val());



                    var vehicleId = $('#update_tsd_id').val();


                    var settings = {
                        "url": multtsdhid == "" ? 'plan_tsd_edit/' + vehicleId : 'plan_multtsd_edit/' + multtsdhid + "/" + am_pm + "/" + shift_ord,
                        "method": "PUT",
                        "timeout": 0,
                        "processData": false,
                        "contentType": false,
                        "data": form
                    };

                    $.ajax(settings)
                        .done(function (data) {
                            Swal.fire('Success!', 'TSD Updated Successfully!', 'success');
                        })
                        .fail(function (xhr, textStatus, errorThrown) {
                            console.error(xhr);
                            console.error(textStatus);
                            console.error(errorThrown);
                            // Additional error handling can be added here
                        }).always(function () {
                            get_vehicle();
                            // This function runs after the request completes, whether it succeeded or failed
                            console.log("AJAX request completed.");
                            calendar.getResources().forEach(resource => resource.remove());
                            calendar.getEvents().forEach(event => event.remove());
                            filteredData.forEach(resource => calendar.addResource(resource));
                            filteredData.forEach(event => calendar.addEvent(event));
                        });
                };
                async function calc_eta(arr) {
                    return new Promise((resolve, reject) => {

                        const resultArray = arr;
                        console.log(resultArray);
                        console.log("/sa?arr=" + JSON.stringify(resultArray) + "");

                        var settings = {
                            "url": "/sa?arr=" + JSON.stringify(resultArray) + "",
                            "method": "GET",
                            "timeout": 0,
                        };

                        $.ajax(settings).done(function (response) {
                            console.log('calculatrtd', response);
                            resolve(response); // Call this when the logic is done
                        });
                    });
                }

                function addDurationToTime(plan_date, shift, time, duration) {
                    // Parse the time and shift
                    let [hours, minutes] = time.split(":").map(Number);
                    if (shift === "PM" && hours !== 12) {
                        hours += 12;
                    } else if (shift === "AM" && hours === 12) {
                        hours = 0;
                    }

                    // Parse the duration
                    let [durationHours, durationMinutes] = duration.split(":").map(Number);

                    // Create a Date object with the given date and time
                    let dateTime = new Date(plan_date);
                    dateTime.setHours(hours, minutes);

                    // Add the specified duration
                    dateTime.setHours(dateTime.getHours() + durationHours);
                    dateTime.setMinutes(dateTime.getMinutes() + durationMinutes);

                    // If the time exceeds midnight, the date will automatically adjust
                    let newDate = dateTime.toLocaleDateString();
                    let newHours = dateTime.getHours();
                    let newMinutes = dateTime.getMinutes().toString().padStart(2, "0");

                    // Determine the new shift
                    let newShift = newHours >= 12 ? "PM" : "AM";
                    newHours = newHours % 12 || 12;

                    let newTime = `${newHours}:${newMinutes}`;

                    return { newDate, newShift, newTime };
                }

                async function calc_rtd(trip, ship_index, shipment2) {
                    return new Promise((resolve, reject) => {
                        const shipment = trip;
                        console.log(shipment);

                        const distinctShipTo = [...new Set(shipment.orders.map(order => order.shipTo))];

                        // const distinctShipTo = [...new Set(allShipTo)];
                        const loadDepot = shipment2[ship_index].start_loc;
                        const resultArray = [loadDepot, ...distinctShipTo];
                        console.log(resultArray);
                        console.log("/sa?arr=" + JSON.stringify(resultArray) + "");

                        var settings = {
                            "url": "/sa?arr=" + JSON.stringify(resultArray) + "",
                            "method": "GET",
                            "timeout": 0,
                        };

                        $.ajax(settings).done(function (response) {
                            console.log('calculatrtd', response);
                            resolve(response); // Call this when the logic is done
                        });
                    });
                }
                async function updatedvmiId() {
                    $.ajax({
                        url: "/vmi_order",
                        type: 'GET',
                        dataType: 'json',
                        success: function (response) {
                            $('#shipto').val("select").trigger('change');
                            $('#product').val("select").trigger('change');
                            $('#shipto_name').val('')
                            $('#product_name').val('')
                            $('#qty').val('')
                            $("#order_id").val(response[0]['incremented_order_id']);

                        }
                    })

                }

                async function create_order() {

                    var ship_to = $("#shipto option:selected").text();
                    var product_code = $("#product option:selected").text();
                    var order_id = $("#order_id").val();
                    var qty = document.getElementById('qty').value;
                    uporderId = parseInt(order_id) + 1
                    var form = new FormData();

                    form.append("order_id", uporderId); // Append JSON string to the FormData object
                    var settings = {
                        "url": "/vmi_orders",
                        "method": "POST",
                        "timeout": 0,
                        "processData": false,
                        "mimeType": "multipart/form-data",
                        "contentType": false,
                        "data": form
                    };

                    $.ajax({
                        ...settings,
                        statusCode: {
                            200: function (response) {
                                console.log(response);
                            },
                        },
                        success: function (data) {

                        },
                        error: function (xhr, textStatus, errorThrown) {
                            console.log(xhr);
                            console.log(textStatus);
                            console.log(errorThrown);
                        }
                    });

                    console.log(product_code);
                    // orders.push({
                    const today = new Date();
                    const yyyy = today.getFullYear();
                    let mm = today.getMonth() + 1; // Months start at 0!
                    let dd = today.getDate();

                    if (dd < 10) dd = '0' + dd;
                    if (mm < 10) mm = '0' + mm;

                    const formattedToday = dd + '' + mm + '' + yyyy;

                    var currentOrder = {
                        shipTo: ship_to,
                        customerName: shiptoname,
                        address: shiptoname,
                        city: '',
                        orderId: order_id,
                        dispatchNumber: '',
                        unknownValues: '',
                        date: formattedToday,
                        date2: formattedToday,
                        dispatchNumber2: '',
                        unknownValue: '',
                        minQuantity: qty,
                        maxQty: qty,
                        target: qty,
                        materialCode: product_code,
                        vmi: 1,
                    };
                    orders.push(currentOrder)
                    console.log(orders);

                    // })
                    table.row.add([
                        order_id,
                        ship_to,
                        shiptoname,
                        formatDate(formattedToday),
                        product_code,
                        qty,
                        '',
                        '',
                        // Add more columns as needed
                    ]).draw(false).node();

                    await updatedvmiId()

                    // alert(ship_to,product_code,qty)

                }
                function isValidJSON(jsonString) {
                    try {
                        JSON.parse(jsonString);
                        return true;
                    } catch (e) {
                        return false;
                    }
                }

                function presend() {
                    pre = false;
                    let json = localStorage.getItem('orders');  // JSON string from localStorage
                    console.log(json);

                    // Validate the JSON string
                    if (!isValidJSON(json)) {
                        console.error('Invalid JSON:', json);
                        alert('The JSON data is invalid. Please check the format.');
                        return;
                    }
                    var form = new FormData();
                    form.append("json", json);  // Append JSON string to the FormData object
                    form.append("pre", pre);  // Append JSON string to the FormData object
                    // Append JSON string to the FormData object

                    var settings = {
                        "url": "/generate-pdf",
                        "method": "POST",
                        "timeout": 0,
                        "processData": false,
                        "mimeType": "multipart/form-data",
                        "contentType": false,
                        "data": form
                    };

                    $.ajax({
                        ...settings,
                        statusCode: {
                            200: function (response) {
                                console.log(response);
                            },
                        },
                        success: function (data) {
                            Swal.fire('Success!', 'PDF generated successfully', 'success');
                        },
                        error: function (xhr, textStatus, errorThrown) {
                            console.log(xhr);
                            console.log(textStatus);
                            console.log(errorThrown);
                        }
                    });
                }

                function postsend() {
                    pre = true;
                    let json = localStorage.getItem('orders');  // JSON string from localStorage
                    console.log(json);


                    // Validate the JSON string
                    if (!isValidJSON(json)) {
                        console.error('Invalid JSON:', json);
                        alert('The JSON data is invalid. Please check the format.');
                        return;
                    }

                    var form = new FormData();
                    form.append("json", json);  // Append JSON string to the FormData object
                    form.append("pre", pre);  // Append JSON string to the FormData object
                    // Append JSON string to the FormData object

                    var settings = {
                        "url": "/generate-pdf",
                        "method": "POST",
                        "timeout": 0,
                        "processData": false,
                        "mimeType": "multipart/form-data",
                        "contentType": false,
                        "data": form
                    };

                    $.ajax({
                        ...settings,
                        statusCode: {
                            200: function (response) {
                                console.log(response);
                            },
                        },
                        success: function (data) {
                            generate2()
                            Swal.fire('Success!', 'PDF generated successfully', 'success');
                        },
                        error: function (xhr, textStatus, errorThrown) {
                            console.log(xhr);
                            console.log(textStatus);
                            console.log(errorThrown);
                        },
                        complete: function (data) {
                            send_meinsert(json)

                            neworder = localStorage.getItem('orders');
                            localStorage.setItem('orders1', neworder);
                            localStorage.setItem("orders", "")

                        }
                    });

                }

                function send_meinsert(orders) {

                    date = $('#date').val();
                    var form = new FormData();
                    form.append("jsonData", orders);  // Append JSON string to the FormData object
                    form.append("date", date);  // Append JSON string to the FormData object
                    // Append JSON string to the FormData object

                    var settings = {
                        "url": "/insert-shipment",
                        "method": "POST",
                        "timeout": 0,
                        "processData": false,
                        "mimeType": "multipart/form-data",
                        "contentType": false,
                        "data": form
                    };

                    $.ajax({
                        ...settings,
                        statusCode: {
                            200: function (response) {
                                console.log(response);
                            },
                        },
                        success: function (data) {

                        },
                        error: function (xhr, textStatus, errorThrown) {
                            console.log(xhr);
                            console.log(textStatus);
                            console.log(errorThrown);
                        }
                    });

                }

                function insert_orders() {


                    date = $('#date').val();

                    orders = localStorage.getItem("orders")

                    var form = new FormData();
                    form.append("jsonData", orders);  // Append JSON string to the FormData object
                    form.append("date", date);  // Append JSON string to the FormData object
                    // Append JSON string to the FormData object

                    var settings = {
                        "url": "/insert-shipment",
                        "method": "POST",
                        "timeout": 0,
                        "processData": false,
                        "mimeType": "multipart/form-data",
                        "contentType": false,
                        "data": form
                    };

                    $.ajax({
                        ...settings,
                        statusCode: {
                            200: function (response) {
                                console.log(response);
                            },
                        },
                        success: function (data) {
                            Swal.fire('Success!', 'PDF generated successfully', 'success');
                        },
                        error: function (xhr, textStatus, errorThrown) {
                            console.log(xhr);
                            console.log(textStatus);
                            console.log(errorThrown);
                        }
                    });










                }

                function sendme() {
                    let checkedValues = [];

                    // Get the JSON data from localStorage and parse it
                    let get_orders = localStorage.getItem('orders');
                    let get_orders1 = JSON.parse(get_orders);
                    console.log("checkbox", $('#vehicle_div input[type="checkbox"]:checked').attr('data-val'))
                    // Collect checked checkbox values
                    $('#vehicle_div input[type="checkbox"]:checked').each(function () {
                        // Ensure the checkbox has the correct data attributes
                        checkedValues.push({
                            "val": $(this).data('name'),    // Correct way to access data attributes
                            "shift": $(this).data('shift') // Correct way to access data attributes
                        });
                    });

                    console.log("checkedval", checkedValues);

                    // Find and sort checked vehicle names into 'am' and 'pm' categories

                    let upjson = findInJson(get_orders1, checkedValues);
                    console.log("upjson", upjson);

                    json = JSON.stringify(upjson)

                    console.log("upjson", json);
                    pre = true;

                    // let json = localStorage.getItem('orders');  // JSON string from localStorage
                    // console.log(json);

                    // Validate the JSON string
                    if (!isValidJSON(json)) {
                        console.error('Invalid JSON:', json);
                        alert('The JSON data is invalid. Please check the format.');
                        return;
                    }

                    var form = new FormData();
                    form.append("json", json);  // Append JSON string to the FormData object
                    form.append("pre", pre);  // Append JSON string to the FormData object
                    // Append JSON string to the FormData object

                    var settings = {
                        "url": "/generate-pdf",
                        "method": "POST",
                        "timeout": 0,
                        "processData": false,
                        "mimeType": "multipart/form-data",
                        "contentType": false,
                        "data": form
                    };

                    $.ajax({
                        ...settings,
                        statusCode: {
                            200: function (response) {
                                console.log(response);
                            },
                        },
                        success: function (data) {
                            Swal.fire('Success!', 'PDF generated successfully', 'success');
                            send_meinsert(json)

                        },
                        error: function (xhr, textStatus, errorThrown) {
                            console.log(xhr);
                            console.log(textStatus);
                            console.log(errorThrown);
                        }
                    });


                    removejson = removeFromJson(get_orders1, checkedValues)

                    localStorage.setItem('orders', JSON.stringify(removejson))

                    sendmegenerate(json);








                }

                function removeFromJson(jsonData, checkedItems) {
                    // Iterate through checkedItems to check both 'val' and 'shift'
                    checkedItems.forEach(item => {
                        if (item.shift === 'AM') {
                            // Remove from 'am' array
                            jsonData.am = jsonData.am.filter(entry => entry.name !== item.val);
                        } else if (item.shift === 'PM') {
                            // Remove from 'pm' array
                            jsonData.pm = jsonData.pm.filter(entry => entry.name !== item.val);
                        }
                    });

                    return jsonData; // Return the updated JSON
                }

                function findInJson(jsonData, checkedItems) {
                    // Create a new JSON structure for storing matching vehicles
                    let newJson = { am: [], pm: [] };

                    // Iterate through checkedItems to check both 'val' and 'shift'
                    checkedItems.forEach(item => {
                        if (item.shift === 'AM') {
                            // Search in 'am' array
                            jsonData.am.forEach(entry => {
                                if (entry.name === item.val) {
                                    newJson.am.push(entry);
                                }
                            });
                        } else if (item.shift === 'PM') {
                            // Search in 'pm' array
                            jsonData.pm.forEach(entry => {
                                if (entry.name === item.val) {
                                    newJson.pm.push(entry);
                                }
                            });
                        }
                    });

                    return newJson;  // Return the new JSON with sorted entries
                }


                function select_topbar(id) {
                    var settings = {
                        "url": "scope",
                        "method": "GET",
                        "timeout": 0,
                    };

                    $.ajax(settings).done(function (response) {
                        console.log("scopes", response)
                        // $('#' + id + '').append('<option label="Select..." value="select">Select</option>')


                        for (i = 0; i < response.length; i++) {
                            $('#scope_top').append($('<option>', {
                                value: response[i]['id'],
                                text: response[i]['name']
                            }));
                        }
                        scope_id = localStorage.getItem("scope");
                        $('#scope_top').val(scope_id).trigger('change')
                    })
                }


                function distictvalfilter() {
                    scope_top = $('#scope_top').val();
                    date = $('#date').val();
                    shift = $('#am_pm').val();
                    type = $('#shift_ord').val();
                    var settings = {
                        "url": "distinct_veh_values?scope=" + scope_top + "&date=" + date + "&shift=" + shift + "&type=" + type, // Your API URL
                        "method": "GET",
                        "timeout": 0,
                    };

                    $.ajax(settings).done(function (response) {
                        console.log(response);

                        // Empty the vehicle name dropdown before appending new options
                        $('#veh_name').empty();
                        $('#veh_size').empty();
                        $('#veh_str_loc').empty();
                        $('#veh_end_loc').empty();

                        // Add the default 'Select...' option
                        $('#veh_name').append('<option label="Select..." value="select">Select</option>');
                        $('#veh_size').append('<option label="Select..." value="select">Select</option>');
                        $('#veh_str_loc').append('<option label="Select..." value="select">Select</option>');
                        $('#veh_end_loc').append('<option label="Select..." value="select">Select</option>');

                        // Iterate over the distinct vehicle names and append each to the dropdown
                        response.name.forEach((val) => {
                            $('#veh_name').append($('<option>', {
                                value: val,  // Use val for the option's value
                                text: val    // Use val for the option's text
                            }));
                            console.log(val)
                        });


                        // Add the default 'Select...' option

                        // Iterate over the distinct vehicle names and append each to the dropdown
                        response.size.forEach((val) => {
                            $('#veh_size').append($('<option>', {
                                value: val,  // Use val for the option's value
                                text: val    // Use val for the option's text
                            }));
                            console.log(val)
                        });
                        response.start_loc.forEach((val) => {
                            $('#veh_str_loc').append($('<option>', {
                                value: val,  // Use val for the option's value
                                text: val    // Use val for the option's text
                            }));
                            console.log(val)
                        });
                        response.end_loc.forEach((val) => {
                            $('#veh_end_loc').append($('<option>', {
                                value: val,  // Use val for the option's value
                                text: val    // Use val for the option's text
                            }));
                            console.log(val)
                        });

                        // Reinitialize select2 to update the dropdown with new options
                        $('#veh_name').select2(); // This ensures Select2 plugin works after appending options
                    });
                }
                function getselval() {
                    $('#multtsdhid').val($('#multitsdselect').val());
                    $('#mult_tsd_modal').modal('show')
                    $('#multipletsdedit').modal('hide');

                }
                async function allocateCompartments(orders, compartments, sequence, name, trailer_size, weight) {

                    compartments.forEach(comp => {
                        comp.used = false;
                    })
                    console.log("sequence", sequence);
                    console.log('order', orders)
                    let unallocatedOrders = [];
                    let allocatedCompartments = [];
                    // console.log("Recieved Orders",orders);
                    // console.log("Recieved Compartments",compartments);
                    // console.log("Recieved Sequence",sequence);

                    // Function to find a compartment by ID
                    console.log("compartments", compartments);
                    function findCompartmentById(id) {
                        console.log("id", id)
                        return compartments.find(compartment => compartment.id == id);
                    }



                    // Iterate through orders and try to allocate compartments
                    let totalTargetValue = calculateTotalTargetValue(orders);

                    orders.forEach(order => {
                        let remainingQuantity = parseInt(order.target);
                        console.log("remaining qty ", typeof remainingQuantity, order)
                        let allocated = false;

                        // Attempt to allocate using exact compartment size
                        for (let i = 0; i < compartments.length; i++) {
                            let compartment = findCompartmentById(sequence[i] + 1); // Check in discharge sequence
                            console.log("compartment:", compartment);
                            // Check for exact match
                            console.log("compartment.used", compartment.used, compartment.used)
                            if (!compartment.used && compartment.size == remainingQuantity) {
                                console.log(`Allocating Order ${order.orderId} (${order.materialCode}) to Compartment ${compartment.id}`);
                                compartment.used = true; // Mark compartment as used
                                compartment.product = order.materialCode;
                                allocatedCompartments.push({
                                    compartment_no: compartment.id,
                                    compartmentNumber: compartment.id,
                                    product: order.materialCode,
                                    product_id: order.materialCode,
                                    shipto: order.shipTo,
                                    size: compartment.size,
                                    orderId: order.orderId,
                                    customerName: order.shipTo,
                                    customer_name: order.customerName,
                                    order_id: order.orderId,
                                    loaded_volume: compartment.size,
                                    allocatedQuantity: remainingQuantity
                                });
                                remainingQuantity = 0; // Fully allocated
                                allocated = true;
                                break; // Exit loop as allocation is done
                            }
                        }

                        // If the order is not fully allocated, check for partial allocations
                        if (remainingQuantity > 0) {
                            for (let i = 0; i < compartments.length; i++) {
                                let compartment = findCompartmentById(sequence[i] + 1);

                                // If compartment is unused and can fit some quantity
                                if (!compartment.used && compartment.size >= remainingQuantity) {
                                    console.log(`Allocating remaining quantity ${remainingQuantity} liters of Order ${order.orderId} to Compartment ${compartment.id}`);
                                    compartment.used = true;
                                    compartment.product = order.Product;

                                    allocatedCompartments.push({
                                        compartment_no: compartment.id,
                                        compartmentNumber: compartment.id,
                                        product: order.materialCode,
                                        product_id: order.materialCode,
                                        shipto: order.shipTo,
                                        size: compartment.size,
                                        orderId: order.orderId,
                                        customerName: order.shipTo,
                                        customer_name: order.customerName,
                                        order_id: order.orderId,
                                        loaded_volume: compartment.size,
                                        allocatedQuantity: remainingQuantity
                                    });

                                    remainingQuantity = 0; // Fully allocated
                                    allocated = true;
                                    break; // Exit loop as allocation is done
                                } else if (!compartment.used && compartment.size < remainingQuantity) {
                                    console.log("partial remaining", remainingQuantity)
                                    // Partially allocate if no single compartment can fully satisfy the order
                                    console.log(`Partially Allocating Order ${order.orderId} to Compartment ${compartment.id}`);
                                    compartment.used = true;
                                    compartment.product = order.materialCode;

                                    allocatedCompartments.push({
                                        compartment_no: compartment.id,
                                        compartmentNumber: compartment.id,
                                        product: order.materialCode,
                                        product_id: order.materialCode,
                                        shipto: order.shipTo,
                                        size: compartment.size,
                                        orderId: order.orderId,
                                        customerName: order.shipTo,
                                        customer_name: order.customerName,
                                        order_id: order.orderId,
                                        loaded_volume: compartment.size,
                                        allocatedQuantity: remainingQuantity // Allocate the full compartment size
                                    });

                                    remainingQuantity -= compartment.size; // Reduce remaining quantity
                                }
                            }
                        }

                        // If still not fully allocated, check for any other compatible compartments for the same customer and product
                        if (remainingQuantity > 0) {
                            addError({ "error_name": "Compartment Infeasible", "severity": 1 });
                            addError({ "error_name": "Discharge Sequence Violated", "severity": 2 });
                            addError({ "error_name": "Trip Quantities Invalid For Trailer", "severity": 3 });
                            console.log(`Order ${order.orderId} could not be fully allocated, remaining quantity: ${remainingQuantity}`);
                            // Try to find alternative compartments that are not used
                            for (let i = 0; i < compartments.length; i++) {
                                let compartment = findCompartmentById(sequence[i] + 1);

                                if (!compartment.used && compartment.size >= remainingQuantity) {
                                    console.log(`Allocating remaining quantity ${remainingQuantity} liters of Order ${order.orderId} to Compartment ${compartment.id} (alternative)`);
                                    compartment.used = true;
                                    compartment.product = order.Product;

                                    allocatedCompartments.push({
                                        compartment_no: compartment.id,
                                        compartmentNumber: compartment.id,
                                        product: order.materialCode,
                                        product_id: order.materialCode,
                                        shipto: order.shipTo,
                                        size: compartment.size,
                                        orderId: order.orderId,
                                        customerName: order.shipTo,
                                        customer_name: order.customerName,
                                        order_id: order.orderId,
                                        loaded_volume: compartment.size,
                                        allocatedQuantity: remainingQuantity
                                    });

                                    remainingQuantity = 0;//Fully allocated
                                    allocated = true;
                                    break; //Exit loop as allocation is done
                                }
                            }
                        }

                        // If still not fully allocated after all attempts, log the order as unallocated
                        if (remainingQuantity > 0) {
                            unallocatedOrders.push({ order: order.orderId, remainingQuantity });
                        }

                    });

                    // if (total_weight > parseInt(trailer_weight)) {

                    //     if (!errors_window.some(error => error.error_name === 'Not Allowed to Carry that load')) {
                    //         console.log("hello")
                    //         errors_window.push({ "error_name": "Not Allowed to Carry that load" });
                    //         console.log("errorswindow", errors_window)
                    //         // resolve(errors_window);
                    //     }


                    // }

                    // await append_portion(allocatedCompartments, name, trailer_weight)

                    if (unallocatedOrders.length > 0) {

                        $.toast({
                            heading: name,
                            text: 'The Assigned Trip contains errors',
                            position: 'top-right',
                            showHideTransition: 'slide',
                            icon: 'error',
                            stack: false
                        })
                        $('#order_card').css('border-top', '1em solid #f7473a')
                    }
                    else {
                        $.toast({
                            heading: name,
                            text: 'The Selected Orders Assigned Successfully',
                            position: 'top-right',
                            showHideTransition: 'slide',
                            icon: 'success',
                            stack: false
                        })
                        $('#order_card').css('border-top', '1em solid rgb(23, 164, 151)')

                    }
                    console.log('total', total_weight)
                    console.log("result", allocatedCompartments)
                    console.log("Errors", errors_window);
                    // console.log("weight", trailer_weight);
                    if (totalTargetValue > trailer_size) {
                        if (!errors_window.some(error => error.error_name === 'Trip Volume Exceeds Vehicle Volume')) {
                            errors_window.push({ "error_name": 'Trip Volume Exceeds Vehicle Volume' });
                            errors_window.push({ "error_name": 'Trip Quantities Dont Match Orders' });
                        }
                    }
                    return { allocatedCompartments, unallocatedOrders };
                }

                function addError(error) {
                    // Check if the error already exists in the errors_window array
                    const exists = errors_window.some(
                        (e) => e.error_name === error.error_name && e.severity === error.severity
                    );

                    // If it does not exist, push the error to the array
                    if (!exists) {
                        errors_window.push(error);
                    }
                }

                function addMinutesToTime(timeStr, minutesToAdd) {
                    // Split the time string into hours and minutes
                    let [hours, minutes] = timeStr.split(":").map(Number);

                    // Create a new Date object with today's date and the given time
                    let date = new Date();
                    date.setHours(hours);
                    date.setMinutes(minutes);

                    // Add the specified number of minutes
                    date.setMinutes(date.getMinutes() + minutesToAdd);

                    // Format the updated time as HH:MM
                    let updatedHours = String(date.getHours()).padStart(2, '0');
                    let updatedMinutes = String(date.getMinutes()).padStart(2, '0');

                    return `${updatedHours}:${updatedMinutes}`;
                }

                function Welcome(props) {
                    return /*#__PURE__*/React.createElement("h1", null, "Hello, ", props.name);
                }
                // document.addEventListener('DOMContentLoaded', function () {
                //     var resource;

                //     var settings = {
                //         "url": "calendarvehicle",
                //         "method": "GET",
                //         "timeout": 0,
                //     };

                //     $.ajax(settings).done(function (response) {
                //         console.log(response)
                //         // $('#' + id + '').append('<option label="Select..." value="select">Select</option>')
                //         var resource = response;


                //     }).always(function (resp) {
                //         console.log(resp);
                //         var calendarEl = document.getElementById('calendar');

                //         var calendar = new FullCalendar.Calendar(calendarEl, {
                //             plugins: ['interaction', 'resourceTimeline'],
                //             timeZone: 'UTC',

                //             defaultView: 'resourceTimelineDay',
                //             aspectRatio: 1,
                //             header: {
                //                 left: 'prev,next',
                //                 center: 'title',
                //                 right: 'resourceTimelineDay'
                //             },

                //             editable: true,
                //             resourceRender: function (info) {
                //                 var questionMark = document.createElement('a');
                //                 questionMark.innerText = ' (?) ';

                //                 info.el.querySelector('.fc-cell-text').
                //                     appendChild(questionMark);

                //                 var tooltip = new Tooltip(questionMark, {
                //                     html: true,
                //                     title: '<span id="wewe">12121dfsfsdfsdfsdfsdfsdfsdfsdsdfsdf<br/>fdfdfdf</span>',
                //                     placement: 'right-start',
                //                     trigger: 'hover',
                //                     closeOnClickOutside: true,
                //                     container: 'body'
                //                 },
                //                     {
                //                         onCreate: data => {
                //                         }
                //                     });

                //                 //ReactDOM.render(<Welcome/>,document.getElementById('wewe'));
                //             },
                //             eventAllow: function (dropInfo, draggedEvent) {
                //                 // Prevent vertical dragging by checking if resource IDs match
                //                 return draggedEvent.resourceId === dropInfo.resource.id;
                //             },
                //             resourceLabelText: 'Vehicles',
                //             resources: resp,
                //             events: resp,


                //         });


                //         calendar.render();
                //     })




                // });


                // Event listener for the button click
                $('#tsd_sort').on('change', function () {
                    var newOrder = $('#tsd_sort').val(); // Get the updated value from #tsd_sort
                    calendar.setOption('resourceOrder', newOrder); // Update the resourceOrder dynamically
                });

            </script>