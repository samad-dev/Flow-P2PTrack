<!-- Datatables css -->
<%- contentFor('HeaderCss') %>

    <link href="assets/vendor/datatables.net-bs5/css/dataTables.bootstrap5.min.css" rel="stylesheet" type="text/css" />
    <link href="assets/vendor/datatables.net-responsive-bs5/css/responsive.bootstrap5.min.css" rel="stylesheet"
        type="text/css" />
    <link href="assets/vendor/datatables.net-fixedcolumns-bs5/css/fixedColumns.bootstrap5.min.css" rel="stylesheet"
        type="text/css" />
    <link href="assets/vendor/datatables.net-fixedheader-bs5/css/fixedHeader.bootstrap5.min.css" rel="stylesheet"
        type="text/css" />
    <link href="assets/vendor/datatables.net-buttons-bs5/css/buttons.bootstrap5.min.css" rel="stylesheet"
        type="text/css" />
    <link href="assets/vendor/datatables.net-select-bs5/css/select.bootstrap5.min.css" rel="stylesheet"
        type="text/css" />
    <!-- Select2 css -->
    <link href="assets/vendor/select2/css/select2.min.css" rel="stylesheet" type="text/css" />
    <!-- Daterangepicker css -->
    <link href="assets/vendor/daterangepicker/daterangepicker.css" rel="stylesheet" type="text/css" />
    <link href="assets/vendor/flatpickr/flatpickr.min.css" rel="stylesheet" type="text/css" />
    <!-- Bootstrap Touchspin css -->
    <link href="assets/vendor/bootstrap-touchspin/jquery.bootstrap-touchspin.min.css" rel="stylesheet"
        type="text/css" />
    <%- contentFor('body') %>
        <style>
            .order_inp {
                border: none;
            }

            .order_inp:focus {

                border: none;
                outline: none;
                box-shadow: 1px blue;

            }
        </style>
        <!-- start page title -->
        <!-- ========== Horizontal Menu Start ========== -->
        <div class="card mt-3">
            <div class="card-body" style="padding:1rem;">
                <div class="row" style="display: flex; justify-content: center; ">
                    <div class="col-1"><label for="" class="form-label">CV</label><input disabled type="text"
                            class="form-control" id="veh_cv"></div>
                    <div class="col-1"><label for="" class="form-label">Trip</label><input disabled type="text"
                            class="form-control" id="veh_trip" value="1"></div>
                    <div class="col-1"><label for="" class="form-label">Status</label><input disabled type="text"
                            class="form-control" id="veh_status" value="Free"></div>
                    <div class="col-1"><label for="" class="form-label">Driver</label><input disabled type="text"
                            class="form-control" id="veh_driver"></div>
                    <div class="col-1"><label for="" class="form-label">Sum(L)</label><input disabled type="text"
                            class="form-control" id="veh_sum"></div>
                    <div class="col-1"><label for="" class="form-label">Max(L)</label><input disabled type="text"
                            class="form-control" id="veh_max"></div>
                    <div class="col-1"><label for="" class="form-label">Util(L)</label><input disabled type="text"
                            class="form-control" id="veh_util"></div>
                    <div class="col-1"><label for="" class="form-label">Trg(L)</label><input disabled type="text"
                            class="form-control" id="veh_targ"></div>
                    <div class="col-1"><label for="" class="form-label">Sum(Kg)</label><input disabled type="text"
                            class="form-control" id="veh_sumkg"></div>
                    <div class="col-1"><label for="" class="form-label">Max(Kg)</label><input disabled type="text"
                            class="form-control" id="veh_maxkg"></div>
                    <div class="col-1"><label for="" class="form-label">Util(Kg)</label><input disabled type="text"
                            class="form-control" id="veh_utilkg"></div>
                    <div class="col-1"><label for="" class="form-label">Trg(Kg)</label><input disabled type="text"
                            class="form-control" id="veh_trgkg"></div>

                </div>
            </div>
        </div>
        <!-- ========== Horizontal Menu End ========== -->
        <!-- end page title -->
        <div class="row">
            <div class="col-xl-12 ">
                <div class="card" id="order_card">
                    <div class="card-body">


                        <!-- ========== Table ========== -->

                        <h4>Orders</h4>
                        <button class="btn btn-primary" onclick="updateOrders()"><i
                                class=" ri-calculator-line"></i></button>
                        <button id="swap-btn" class="btn btn-primary"><i class="ri-swap-fill"></i></button>
                        <!-- <button id="swap-btn" class="btn btn-primary"><i class="ri-swap-fill"></i></button> -->
                        <div>
                            <div style="display: flex; background: #F8F9FA;
                            padding: 1em;">
                                <div style="width: 12.5%;"></div>
                                <div style="width: 12.5%;">SNO</div>
                                <div style="width: 12.5%;">Customer</div>
                                <div style="width: 12.5%;">Product</div>
                                <div style="width: 12.5%;">Tank</div>
                                <div style="width: 12.5%;">Min</div>
                                <div style="width: 12.5%;">Target</div>
                                <div style="width: 12.5%;">Max</div>



                            </div>
                            <div id="editable_orders">

                            </div>
                        </div>

                        <!-- ========== Table End ========== -->
                    </div> <!-- end card body -->
                </div> <!-- end card -->
            </div>

            <div class="col-xl-6">
                <div class="card">
                    <div class="card-body">

                        <h4>Details</h4>

                        <div class="row">
                            <div class="col-3" style="background:#F8F9FA; ">
                                <h5
                                    style="font-size: 1em; border-bottom: 0.2em solid #DEE2E6; padding-top: 0.5em; padding-bottom: 0.3em;">
                                    Trailer</h5>
                                <h5
                                    style=" font-size: 1em;border-bottom: 0.2em solid #DEE2E6; padding-top: 0.3em; padding-bottom: 0.3em;">
                                    Compartment</h5>
                                <h5
                                    style=" font-size: 1em;border-bottom: 0.2em solid #DEE2E6; padding-top: 0.3em; padding-bottom: 0.3em;">
                                    Product</h5>
                                <h5
                                    style="font-size: 1em;border-bottom: 0.2em solid #DEE2E6; padding-top: 0.3em; padding-bottom: 0.3em;">
                                    Total(WGT)</h5>


                            </div>
                            <div class="col-9">
                                <div class="row" id="compartment_details">
                                </div>
                            </div>

                        </div>

                    </div> <!-- end card body -->
                </div>
            </div>

            <div class="col-xl-6 ">


                <div>
                    <div class="card">
                        <div class="card-body">


                            <table id="error_tbl" class="table  dt-responsive wrap w-100 ">
                                <thead>
                                    <tr>
                                        <th>SNO</th>

                                        <th>Error Message</th>

                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                            </table>
                        </div> <!-- end card body -->
                    </div>
                </div>

                <!-- end card -->
            </div>

            <div class="col-xl-7">
                <div class="card">
                    <div class="card-body">

                        <div class="row mt-3" style="background: #F8F9FA;">
                            <div class="col-3">
                                <div class="" style="border-bottom: 2px solid #DEE2E6; padding-top: 0.5em;">
                                    <h5>Trailer</h5>
                                </div>
                                <div style="border-bottom: 2px solid #DEE2E6; padding-top: 0.5em;">
                                    <h5>Compartments</h5>
                                </div>
                                <div style="border-bottom: 2px solid #DEE2E6 ;padding-top: 2em;">

                                </div>


                            </div>
                            <div class="col-9">
                                <div class="row" id="trailer_row">

                                </div>
                            </div>
                        </div>





                    </div> <!-- end card body -->
                </div>
            </div>
            <div class="col-xl-5">
                <div class="card">
                    <div class="card-body">

                        <h4>Rules</h4>

                        <div class="row">
                            <div class="col-3" style="background:#F8F9FA ;">
                                <h6 class="clearfix" style="border-bottom: 0.2em solid #DEE2E6; padding-top: 0.5em; padding-bottom: 0.3em; font-size: 0.7em;
                                    font-weight: 800;">
                                    Capacity</h6>
                                <h6 class="clearfix" style="border-bottom: 0.2em solid #DEE2E6; padding-top: 0.3em; padding-bottom: 0.3em; font-size: 0.7em;
                                    font-weight: 800;">
                                    Current Use</h6>
                                <h6 class="clearfix" style="border-bottom: 0.2em solid #DEE2E6; padding-top: 0.3em; padding-bottom: 0.3em; font-size: 0.7em;
                                    font-weight: 800;">
                                    Remaining Capcity</h6>
                                <h6 class="clearfix" style="border-bottom: 0.2em solid #DEE2E6; padding-top: 0.3em; padding-bottom: 0.3em; font-size: 0.7em;
                                    font-weight: 800;">
                                    Product</h6>

                                <h6 class="clearfix" style="border-bottom: 0.2em solid #DEE2E6; padding-top: 0.3em; padding-bottom: 0.3em; font-size: 0.7em;
                                    font-weight: 800;">
                                    Part Fill</h6>


                            </div>
                            <div class="col-9">
                                <div class="row" id="compartment_rules">

                                </div>
                            </div>

                        </div>

                    </div> <!-- end card body -->
                </div>
            </div>

            <!-- end col -->
        </div>

        <div id="timing" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="standard-modalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="standard-modalLabel">Add Combination</h4>

                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body " style="padding: 20px;">
                        <form action="">
                            <div class="row mt-3">
                                <div class="mb-3">
                                    <label class="form-label">Depot Group</label>
                                    <select class="form-control select2" data-toggle="select2">
                                        <option>Select</option>
                                        <option>Depot Group 1</option>
                                        <option>Depot Group 2</option>

                                    </select>
                                </div>

                                <div class="mb-3">
                                    <label class="form-label">Depot Product Group </label>
                                    <select class="form-control select2" data-toggle="select2">
                                        <option>Select</option>
                                        <option>Depot Product Group 1</option>
                                        <option>Depot Product Group 2</option>

                                    </select>
                                </div>

                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-light" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary">Save changes</button>
                    </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div>

        <%- contentFor('FooterJs') %>
            <!-- Datatables js -->
            <script src="assets/vendor/select2/js/select2.min.js"></script>
            <!-- Input Mask Plugin js -->
            <script src="assets/vendor/jquery-mask-plugin/jquery.mask.min.js"></script>

            <!-- Bootstrap Touchspin Plugin js -->
            <script src="assets/vendor/bootstrap-touchspin/jquery.bootstrap-touchspin.min.js"></script>

            <!-- Bootstrap Maxlength Plugin js -->
            <script src="assets/vendor/bootstrap-maxlength/bootstrap-maxlength.min.js"></script>

            <!-- Typehead Plugin js -->
            <script src="assets/vendor/handlebars/handlebars.min.js"></script>
            <script src="assets/vendor/typeahead.js/typeahead.bundle.min.js"></script>

            <!-- Flatpickr Timepicker Plugin js -->
            <script src="assets/vendor/flatpickr/flatpickr.min.js"></script>

            <!-- Typehead Demo js -->

            <!-- Timepicker Demo js -->
            <script src="assets/js/pages/demo.flatpickr.js"></script>

            <script src="assets/js/pages/demo.typehead.js"></script>
            <!-- Daterangepicker Plugin js -->
            <script src="assets/vendor/daterangepicker/moment.min.js"></script>
            <script src="assets/vendor/daterangepicker/daterangepicker.js"></script>
            <!-- Daterangepicker Plugin js -->
            <script src="assets/vendor/daterangepicker/moment.min.js"></script>
            <script src="assets/vendor/daterangepicker/daterangepicker.js"></script>
            <script src="assets/vendor/datatables.net/js/jquery.dataTables.min.js"></script>
            <script src="assets/vendor/datatables.net-bs5/js/dataTables.bootstrap5.min.js"></script>
            <script src="assets/vendor/datatables.net-responsive/js/dataTables.responsive.min.js"></script>
            <script src="assets/vendor/datatables.net-responsive-bs5/js/responsive.bootstrap5.min.js"></script>
            <script src="assets/vendor/datatables.net-fixedcolumns-bs5/js/fixedColumns.bootstrap5.min.js"></script>
            <script src="assets/vendor/datatables.net-fixedheader/js/dataTables.fixedHeader.min.js"></script>
            <script src="assets/vendor/datatables.net-buttons/js/dataTables.buttons.min.js"></script>
            <script src="assets/vendor/datatables.net-buttons-bs5/js/buttons.bootstrap5.min.js"></script>
            <script src="assets/vendor/datatables.net-buttons/js/buttons.html5.min.js"></script>
            <script src="assets/vendor/datatables.net-buttons/js/buttons.flash.min.js"></script>
            <script src="assets/vendor/datatables.net-buttons/js/buttons.print.min.js"></script>
            <script src="assets/vendor/datatables.net-keytable/js/dataTables.keyTable.min.js"></script>
            <script src="assets/vendor/datatables.net-select/js/dataTables.select.min.js"></script>
            <script src="assets/js/pages/demo.datatable-init.js"></script>



            <script>
                var comprules;
                let orderUpdated = false;
                var total_weight = 0;
                let errors_window = [];
                let codearray = [];
                let accessarray = [];
                let tanks_p = [];
                let complete_order;
                let allPresent;
                var shift = '<%- shift%>';
                var lowershift = shift.toLowerCase()

                order_tbl = $('#order_tbl').DataTable({
                    keys: !0, language: {
                        paginate:
                            { previous: "<i class='ri-arrow-left-s-line'>", next: "<i class='ri-arrow-right-s-line'>" }
                    },
                    drawCallback:
                        function () { $(".dataTables_paginate > .pagination").addClass("pagination-rounded") }
                });


                $(document).ready(() => {

                    get_order()
                    validateInputs()
                    $.ajax({
                        url: 'comp_rules',
                        type: 'GET',
                        dataType: 'json',
                        success: function (response) {
                            comprules = response

                        }
                    })

                    console.log(lowershift)
                    error_tbl = $('#error_tbl').DataTable({
                        keys: !0, language: {
                            paginate:
                                { previous: "<i class='ri-arrow-left-s-line'>", next: "<i class='ri-arrow-right-s-line'>" }
                        },
                        drawCallback:
                            function () { $(".dataTables_paginate > .pagination").addClass("pagination-rounded") }
                    });

                    local_orders = localStorage.getItem('orders')
                    veh_order1 = JSON.parse(local_orders);
                    veh_order = veh_order1[lowershift].filter(loc => {
                        const isMatch = loc.id == '<%- id%>';
                        return isMatch;  // Return true if the condition is met
                    });


                    console.log(veh_order)
                    orders_v(veh_order)

                    // Swap button click handler
                    $('#swap-btn').click(() => {
                        let selectedRows = $('.row-checkbox:checked').closest('.order-row');
                        console.log(selectedRows);
                        if (selectedRows.length === 2) {
                            let row1 = $(selectedRows[0]);
                            let row2 = $(selectedRows[1]);

                            swapRows(row1, row2);
                        } else {
                            alert('Please select exactly two rows to swap.');
                        }
                    });

                })



                function customer_tank_byId() {
                    console.log(`http://localhost:8081/customer_tank_byId/${complete_order[0].pre_load}`);

                    var settings = {
                        "url": `customer_tank_byId/${complete_order[0].pre_load}`,
                        "method": "GET",
                        "timeout": 0,
                        "headers": {
                            "Cookie": "connect.sid=s%3ARK3mrO263y2yx9gDajMlbe7Z_L1wFICZ.eRRiEkCmzVa4snYJZc1hykCksqYDKY5kIm4aZPQSqrc"
                        },
                    };
                    $.ajax(settings).done(function (response) {
                        console.log(response[0]['multiple_drop']);
                        response.forEach(data => {
                            console.log(data);

                            tanks_p.push(data.code);
                        })
                        allPresent = tanks_p.every(item => codearray.includes(item));
                        console.log(allPresent);
                        if (allPresent == false) {
                            errors_window.push({ "error_name": "Product Not Available at Depot", "severity": 3 })

                        }


                    });

                    return allPresent;

                }


                async function get_order() {
                    let order = localStorage.getItem('orders');

                    if (!order) {
                        console.error("No orders found in localStorage");
                        return;
                    }

                    let order1;
                    try {
                        order1 = JSON.parse(order);

                    } catch (error) {
                        console.error("Failed to parse orders from localStorage:", error);
                        return;
                    }
                    order_ampm = order1[lowershift];
                    console.log("order_ampm", order_ampm)

                    // Filter orders to find the one with the specified ID
                    order1 = order_ampm.filter(item => item.id == '<%- id %>');
                    complete_order = order1;
                    if (order1.length === 0) {
                        console.warn("No orders found with the specified ID");
                        return;
                    }


                    // Initialize the index
                    let index = 0;
                    var t_id = '<%- t_id%>';
                    // alert("T_ID"+t_id);
                    trip_index = order1[0].trip.find(t => t.trip_no == t_id);


                    // Iterate over the orders and add them to the table
                    errors_window = trip_index.erros;
                    for (const veh_order of trip_index.orders) {
                        index++;
                        try {
                            const product_name = await getproduct(veh_order.materialCode);

                            $('#editable_orders').append(`
                                <div class="order-row" data-order-id="${veh_order.orderId}" data-index="${index}" style="display: flex; border-bottom:2px solid #F8F9FA; padding: 1em;">
                                    <div style="width: 12.5%;"><input type="checkbox" class="row-checkbox"></div>
                                    <div style="width: 12.5%;">${index}</div>
                                    <div style="width: 12.5%;">${veh_order.customerName}</div>
                                    <div style="width: 12.5%;">${product_name}</div>
                                    <div style="width: 12.5%;"></div>
                                    <div style="width: 12.5%;"><input type="text" class="form-control" style="width:60%;" readonly value="${veh_order.minQuantity}"></div>
                                    <div style="width: 12.5%;"><input type="number" class="form-control" style="width:60%;" id="ord_${index}" data-value="${parseInt(veh_order.target)}" value="${veh_order.target}"></div>
                                    <div style="width: 12.5%;"><input type="text" class="form-control" style="width:60%;" readonly value="${veh_order.maxQty}"></div>
                                    
                                </div>
                            `);

                        } catch (error) {
                            console.error("Error fetching product:", error);
                            // Optionally handle error by adding a row with an error message
                        }
                    } []
                }



                function swapRows(row1, row2) {
                    console.log(row1, row2);

                    // Extract orderId from the rows
                    let orderId1 = row1.data('order-id');
                    let orderId2 = row2.data('order-id');

                    if (!orderId1 || !orderId2) {
                        console.error("Order IDs not found.");
                        return;
                    }

                    // Swap rows in the DOM
                    row1.before(row2);

                    // Update orders in JSON
                    swapOrdersInJSON(orderId1, orderId2);
                }

                // Function to swap orders in JSON based on orderId
                function swapOrdersInJSON(orderId1, orderId2) {
                    let data = JSON.parse(localStorage.getItem('orders'));

                    if (!data) {
                        console.error("No orders found in localStorage.");
                        return;
                    }
                    var data1 = data[lowershift]
                    // Assuming that you only need to work with the first element in data[0].trip[0].orders


                    let orders = data1[0].trip[0].orders;
                    let index1 = orders.findIndex(order => order.orderId == orderId1);
                    let index2 = orders.findIndex(order => order.orderId == orderId2);

                    if (index1 !== -1 && index2 !== -1) {
                        // Swap the orders
                        let temp = orders[index1];
                        orders[index1] = orders[index2];
                        orders[index2] = temp;

                        // Save updated data back to localStorage
                        localStorage.setItem('orders', JSON.stringify(data));
                        console.log('Updated JSON:', JSON.stringify(data, null, 2));
                    } else {
                        console.error("Order IDs not found in JSON.");
                    }
                }




                function getproduct(code) {
                    return new Promise((resolve, reject) => {
                        if (code) { // Check if code is not empty
                            fetch(`product_bypcode/${code}`, { method: 'GET', redirect: 'follow' })
                                .then(response => {
                                    if (!response.ok) {
                                        throw new Error('Network response was not ok');
                                    }
                                    return response.json();
                                })
                                .then(data => {
                                    // console.log(data);x
                                    // if (Array.isArray(data) && data.length > 0) {
                                    // Assuming response is an array of objects
                                    const product_name = data.name; // Adjust if your data structure is different
                                    // console.log(product_name);
                                    resolve(product_name);
                                    // } else {
                                    //     reject("No data found for the given code.");
                                    // }
                                })
                                .catch(error => {
                                    console.error('Error:', error);
                                    reject(error);
                                });
                        } else {
                            reject("Invalid code provided.");
                        }
                    });
                }


                function generateCompartmentTable(vehOrder) {
                    // alert()
                    // Check if vehOrder is an array and has data
                    if (!Array.isArray(vehOrder) || vehOrder.length === 0) {
                        console.error("vehOrder is not an array or it is empty");
                        return;
                    }

                    let tableHtml = `<table border="1">
                            <thead>
                                <tr>
                                    <th>Compartment No</th>
                                    <th>Product</th>
                                    <th>Loadable Volume</th>
                                </tr>
                            </thead>
                            <tbody>`;

                    // Combine and sort all compartments
                    let allCompartments = [];
                    console.log("before trip index", vehOrder)
                    trip_index = vehOrder[0][lowershift].trip.find(t => t.trip_no == `<%- t_id%>`);
                    console.log('trip_index1', trip_index)

                    trip_index.forEach(vehicle => {
                        if (vehicle.compartments && Array.isArray(vehicle.compartments)) {
                            vehicle.compartments.forEach(order => {
                                if (order.compartments && Array.isArray(order.compartments)) {
                                    order.compartments.forEach(compartment => {
                                        allCompartments.push({
                                            compartment_no: compartment.compartment_no,
                                            product: order.product,
                                            loadable_volume: compartment.loadable_volume
                                        });
                                    });
                                }
                            });
                        }
                    });

                    // Sort compartments by compartment number
                    // allCompartments.sort((a, b) => a.compartment_no - b.compartment_no);

                    // Generate table rows
                    allCompartments.forEach(compartment => {



                        // product_name= await getproduct(compartment.product)
                        $('#compartment_rules').append(`

                                <div class="col-2" >
                                <h6 
                                    style="border-bottom: 0.2em solid #DEE2E6; padding-top: 0.5em; padding-bottom: 0.3em;font-size: 0.7em;font-weight: 800;">
                                    ${compartment.loadable_volume}</h6>
                                <h6
                                style="border-bottom: 0.2em solid #DEE2E6; padding-top: 0.5em; padding-bottom: 0.3em;font-size: 0.7em;font-weight: 800;">
                                    ${compartment.loadable_volume}</h6>
                                <h6
                                style="border-bottom: 0.2em solid #DEE2E6; padding-top: 0.5em; padding-bottom: 0.3em;font-size: 0.7em;font-weight: 800;">
                                    0</h6>
                                <h6
                                style="border-bottom: 0.2em solid #DEE2E6; padding-top: 0.5em; padding-bottom: 0.3em;font-size: 0.7em;font-weight: 800;">
                                   ${compartment.product}</h6>

                                    <h6
                                    style="border-bottom: 0.2em solid #DEE2E6; padding-top: 0.5em; padding-bottom: 0.3em;font-size: 0.7em;font-weight: 800;">
                                    F</h6>

                            </div>
                            `)

                    });


                }
                // Usage example




                function processOrders(orders, compartments, sequence, name) {
                    let result = [];
                    let compartmentUsed = new Set(); // Track used compartments
                    complete_order[0].allowed_prod.forEach(val => {
                        codearray.push(val.code);
                    })
                    console.log(codearray);

                    let dup_orders = orders;
                    let order_not_allowed = dup_orders.filter(order => !codearray.includes(parseInt(order.materialCode)));
                    console.log(order_not_allowed);

                    if (order_not_allowed.length >= 1) {
                        // errors_window.push({
                        //     "error_name": "Vehicle Cannot Carry Product",
                        //     "severity": 1
                        // })
                        // if (!errors_window.some(error => error.error_name === 'Vehicle Cannot Carry Product')) {
                        //     errors_window.push({
                        //         "error_name": "Vehicle Cannot Carry Product",
                        //         "severity": 1
                        //     });
                        // }

                    }
                    orders = orders.filter(order => codearray.includes(parseInt(order.materialCode)));
                    let totalTargetValue = calculateTotalTargetValue(orders);
                    orders.forEach(order => {
                        let targetQty = parseInt(order.target);
                        let remainingQty = targetQty;
                        let compartmentsToUse = [];

                        // Use the sequence to fill compartments
                        sequence.forEach(index => {
                            if (remainingQty <= 0) return;

                            let compartment = compartments[index];
                            if (compartmentUsed.has(compartment.compartment_no)) return; // Skip if already used
                            console.log("Before Assigning", remainingQty);

                            if (compartment.size < remainingQty) {
                                console.log("On A Assigning", {
                                    compartment_no: compartment.compartment_no,
                                    size: compartment.size,
                                    loaded_volume: compartment.size,
                                    product_id: order.materialCode,
                                    order_id: order.orderId,
                                    shipto: order.shipTo,
                                    customer_name: order.customerName
                                });
                                compartmentsToUse.push({
                                    compartment_no: compartment.compartment_no,
                                    size: compartment.size,
                                    loaded_volume: compartment.size,
                                    product_id: order.materialCode,
                                    order_id: order.orderId,
                                    shipto: order.shipTo,
                                    customer_name: order.customerName
                                });
                                remainingQty -= compartment.size;

                                compartmentUsed.add(compartment.compartment_no); // Mark compartment as used
                                console.log("compart", compartmentUsed);

                            }
                            else if (compartment.size === remainingQty) {
                                compartmentsToUse.push({
                                    compartment_no: compartment.compartment_no,
                                    size: compartment.size,
                                    loaded_volume: compartment.size,
                                    product_id: order.materialCode,
                                    order_id: order.orderId,
                                    shipto: order.shipTo,
                                    customer_name: order.customerName
                                });
                                remainingQty = 0; // All quantity is loaded, so set remainingQty to 0

                                compartmentUsed.add(compartment.compartment_no); // Mark compartment as used
                            }

                        });

                        // Check if there's any remaining quantity that hasn't been allocated
                        if (remainingQty > 0) {
                            orderUpdated = true;
                            result.push(...compartmentsToUse);
                            // errors_window.push({
                            //     "error_name": "Discharge Sequence Violated",
                            //     "severity": 1
                            // })
                            // errors_window.push({
                            //     "error_name": "Compartmentation infeasible",
                            //     "severity": 2
                            // })
                            // Define the errors you want to add
                            const errorsToAdd = [
                                { "error_name": "Discharge Sequence Violated", "severity": 1 },
                                { "error_name": "Compartmentation infeasible", "severity": 2 }
                            ];

                            // Loop through each error in errorsToAdd
                            errorsToAdd.forEach(error => {
                                // Check if the error is already in errors_window
                                if (!errors_window.some(existingError => existingError.error_name === error.error_name)) {
                                    errors_window.push(error);
                                }
                            });

                            console.log(`Order ID: ${order.orderId} could not be fully allocated.`);
                        }
                        else {
                            orderUpdated = true;
                            result.push(...compartmentsToUse);
                        }
                    });




                    if (errors_window.length > 0) {
                        $('#order_card').css('border-top', '1em solid #f7473a')
                    }
                    else {
                        $('#order_card').css('border-top', '1em solid rgb(23, 164, 151)')

                    }




                    console.log('total', total_weight)
                    console.log("result", result)
                    console.log("Errors", errors_window);
                    if (totalTargetValue > complete_order[0].trailer_size) {
                        if (!errors_window.some(error => error.error_name === 'Trip Volume Exceeds Vehicle Volume')) {
                            errors_window.push({ "error_name": 'Trip Volume Exceeds Vehicle Volume' });
                        }


                    }

                    console.log("Errors", errors_window);


                    return result;
                }

                function processOrders2(orders, compartments, sequence, name) {


                    let result = [];
                    let compartmentUsed = new Set(); // Track used compartments

                    orders.forEach(order => {
                        let targetQty = parseInt(order.target);
                        let remainingQty = targetQty;
                        let compartmentsToUse = [];

                        // Use the sequence to fill compartments
                        sequence.forEach(index => {
                            if (remainingQty <= 0) return;

                            let compartment = compartments[index];
                            if (compartmentUsed.has(compartment.compartment_no)) return; // Skip if already used

                            if (compartment.size > remainingQty) {
                                compartmentsToUse.push({
                                    compartment_no: compartment.compartment_no,
                                    size: compartment.size,
                                    loaded_volume: remainingQty,
                                    product_id: order.materialCode,
                                    order_id: order.orderId,
                                    shipto: order.shipTo,
                                    customer_name: order.customerName
                                });
                                remainingQty = 0;
                            } else {
                                compartmentsToUse.push({
                                    compartment_no: compartment.compartment_no,
                                    size: compartment.size,
                                    loaded_volume: remainingQty,
                                    product_id: order.materialCode,
                                    order_id: order.orderId,
                                    shipto: order.shipTo,
                                    customer_name: order.customerName
                                });
                                remainingQty -= compartment.size;
                            }
                            compartmentUsed.add(compartment.compartment_no); // Mark compartment as used
                        });

                        // Check if there's any remaining quantity that hasn't been allocated
                        if (remainingQty > 0) {
                            console.log(`Order ID: ${order.orderId} could not be fully allocated.`);
                        } else {
                            result.push(...compartmentsToUse);
                        }
                    });
                    append_portion(result, name)
                    console.log("result", result)
                    return result;

                }


                function sc(i) {
                    // Retrieve the element by its id 'i'
                    document.getElementById(i).style.backgroundColor = "#006400";
                }

                // // Call the function and output the result
                // let filledCompartments = processOrders(orders, compartments, sequence);
                // console.log('sasas', JSON.stringify(filledCompartments, null, 2));

                function append_portion(scompart, name) {
                    console.log("in append portion", veh_order);
                    compart = veh_order[0].trip.find(trip => trip.trip_no == '<%- t_id%>')

                    let total_weight = 0;
                    var sum_inliter = 0
                    // Declare total_weight outside the loop

                    let ajaxRequests = []; // Array to keep track of AJAX requests

                    compart.compartments.forEach((com, index) => {
                        col_width = 100 / scompart.length
                        console.log('comp_no', com['compartment_no']);
                        $('#compartment_rules').append(`
                            <div class="col-2" style="width:${col_width}%;">
                                <h6 style="border-bottom: 0.2em solid #DEE2E6; padding-top: 0.5em; padding-bottom: 0.3em; font-size: 0.7em; font-weight: 800;">
                                    ${com['size']}
                                </h6>
                                <h6 style="border-bottom: 0.2em solid #DEE2E6; padding-top: 0.5em; padding-bottom: 0.3em; font-size: 0.7em; font-weight: 800;">
                                    ${com['loaded_volume']}
                                </h6>
                                <h6 style="border-bottom: 0.2em solid #DEE2E6; padding-top: 0.5em; padding-bottom: 0.3em; font-size: 0.7em; font-weight: 800;">
                                    0
                                </h6>
                                <h6 style="border-bottom: 0.2em solid #DEE2E6; padding-top: 0.5em; padding-bottom: 0.3em; font-size: 0.7em; font-weight: 800;">
                                    ${com['product_id']}
                                </h6>
                                <h6 style="border-bottom: 0.2em solid #DEE2E6; padding-top: 0.5em; padding-bottom: 0.3em; font-size: 0.7em; font-weight: 800;">
                                    F
                                </h6>
                            </div>
                        `);

                        $('#trailer_row').append(`
                                <div class="col-2" style="width:${col_width}%;">
                                    <div class="checkbox" style="border-bottom: 2px solid #DEE2E6; padding-top: 0.9em;">
                                        <label style="font-size:1em">
                                            ${name} <input type="checkbox" id="autoUpdateInput" checked="checked"> 
                                        </label>
                                    </div>
                                    <div  style="border-bottom: 2px solid #DEE2E6; padding-top: 0.5em;">
                                        <h5>${com['compartment_no']}</h5>
                                    </div>
                                    <div class="center-align" style="border-bottom: 2px solid #DEE2E6;">
                                        <input type="text" value="${com['loaded_volume']}" class="form-control mt-1" style="padding: 0.1em;">
                                    </div>
                                </div>
                            `);

                        let ajaxRequest = $.ajax({
                            url: 'product_bypcode/' + com['product_id'],
                            type: 'GET',
                            dataType: 'json',
                            success: function (response) {
                                let loaded_vol = parseInt(com['loaded_volume']);
                                let density = parseFloat(response['density']);
                                let weight = loaded_vol * density;
                                total_weight += weight;
                                sum_inliter += loaded_vol;

                                $('#compartment_details').append(`
                               
                                <div class="col-auto" style="width:${col_width}%;" >
                                    <h6 style="border-bottom: 0.2em solid #DEE2E6; padding-top: 0.9em; padding-bottom: 0.3em;">
                                        1
                                    </h6>
                                    <h6 style="border-bottom: 0.2em solid #DEE2E6; padding-top: 0.7em; padding-bottom: 0.3em;">
                                        ${com['compartment_no']}
                                    </h6>
                                    <h6 style="border-bottom: 0.2em solid #DEE2E6; padding-top: 0.4em; padding-bottom: 0.5em;">
                                        ${com['product_id']}
                                    </h6>
                                    <h6 style="border-bottom: 0.2em solid #DEE2E6; padding-top: 0.4em; padding-bottom: 0.5em;">
                                        ${weight}
                                    </h6>
                                </div>
                      
                            `);
                            }
                        });

                        // Push the ajaxRequest promise to the array
                        ajaxRequests.push(ajaxRequest);
                    });

                    // Wait for all AJAX requests to complete
                    $.when.apply($, ajaxRequests).done(function () {
                        // console.log(veh_order[0])
                        if (total_weight > parseInt(veh_order[0]['weight'])) {
                            errors_window.push({ "error_name": "Not Allowed to Carry that load" })

                        }
                        $.each(errors_window, function (index, data) {
                            console.log(errors_window)
                            error_row = error_tbl.row.add([
                                index + 1,
                                data.error_name
                            ]).draw(false).node();
                            $(error_row).css('background', '#fddad8')
                            $(`#error_tbl tbody tr td`).css('color', '#f7473a')
                        });

                        if (errors_window.length > 0) {
                            $('#order_card').css('border-top', '1em solid #f7473a')
                        }
                        else {
                            $('#order_card').css('border-top', '1em solid rgb(23, 164, 151)')

                        }
                        $('#veh_sum').val(sum_inliter);
                        $('#veh_sumkg').val(total_weight);



                        console.log('Total Weight:', total_weight);
                        // Any further operations depending on total_weight should go here
                    });

                }


                function recalculate() {
                    order = JSON.parse(localStorage.getItem('orders'));


                }
                function updateOrderQuantities(orderId, newMinQty, newMaxQty, newTarget) {
                    // Loop through the data to find the matching order by orderId
                    order = JSON.parse(localStorage.getItem('orders'));
                    order.forEach(vehicle => {
                        vehicle.orders.forEach(order => {
                            if (order.orderId === orderId) {
                                // Update the values
                                order.minQuantity = newMinQty;
                                order.maxQty = newMaxQty;
                                order.target = newTarget;
                            }
                        });
                    });

                    console.log('Updated JSON:', JSON.stringify(order, null, 2));
                }
                function updateOrders() {
                    // Retrieve and parse the JSON data from localStorage
                    var vehicles1 = JSON.parse(localStorage.getItem('orders'));
                    veh_index = vehicles1[lowershift].findIndex(item => item.id == `<%- id%>`)         // Assuming 'orders' contains the entire vehicle object array
                    var vehicles = vehicles1[lowershift]; // Assuming 'orders' contains the entire vehicle object array
                    var tripss = vehicles[veh_index].trip.filter(trip => trip.trip_no == '<%- t_id%>')
                    tripss = tripss[0];
                    console.log("Selected Trip", tripss);

                    // Log the retrieved data for debugging
                    console.log('Retrieved Orders:', vehicles);



                    // Ensure the data is valid
                    if (!Array.isArray(vehicles) || vehicles.length === 0 || !Array.isArray(vehicles[veh_index].trip) || vehicles[veh_index].trip.length === 0 || !Array.isArray(vehicles[veh_index].trip[0].orders)) {
                        console.error('Invalid data structure in localStorage');
                        return;
                    }

                    // Flag to track if any updates were made
                    let updatedAnyOrder = false;

                    // Iterate over each editable order and update the corresponding order in the JSON data
                    $('#editable_orders > .order-row').each(function () {
                        // Retrieve the order details
                        let orderId = $(this).data('order-id');
                        let target = $(this).find('input[type="number"]').val(); // Target is in the input with type="number"

                        // Convert orderId to string if needed for comparison
                        orderId = orderId.toString();

                        // Log values to verify they are being retrieved correctly
                        console.log('Processing Order:', { orderId, target });

                        // Flag to track if the current order was updated


                        // Find and update the order in the JSON data
                        // vehicles.forEach(vehicle => {

                        console.log("Trip Comp Before", tripss.compartments);

                        tripss.orders.forEach(order => {
                            if (order.orderId.toString() === orderId) { // Convert orderId to string for comparison
                                // Log before updating
                                console.log('Updating Order:', order);

                                // Update the target value
                                order.target = target;

                                // Log after updating
                                console.log('Order Updated:', order);
                                orderUpdated = true;
                            }
                        });
                        var veh_id = `<%- id%>`;
                        $.ajax({
                            url: 'get_vehicle_forOrders/' + veh_id,
                            type: 'GET',
                            dataType: 'json',
                            success: function (response) {
                                var compartment1;

                                compartment_length = response['compartments'].length;

                                compartment1 = response['compartments'].map(val => ({
                                    compartment_no: val.compartment_no,
                                    size: parseInt(val.loadable_volume)
                                }));
                                let filtered_comprule = comprules.filter(comp => comp.compartments == compartment_length);

                                var sortOrder = filtered_comprule[0]['seq'].split(',').map(num => Number(num) - 1);

                                let trailerCompartments = response['compartments'];

                                var assignments;
                                errors_window = [];
                                const formattedCompartments = trailerCompartments.map(compartment => ({
                                    id: compartment.compartment_no,
                                    size: parseInt(compartment.loadable_volume, 10),
                                    used: compartment.used === "false" ? false : true,
                                    product: compartment.product,
                                    orderId: compartment.orderId,
                                    customer: compartment.customer
                                }));
                                assignments = allocateCompartments(tripss.orders, formattedCompartments, sortOrder, response.name);
                                tripss.compartments = assignments.allocatedCompartments;
                                console.log("Error", errors_window);
                                tripss.erros = errors_window;

                                console.log("Trip---", tripss);
                                if (orderUpdated) {
                                    updatedAnyOrder = true;
                                } else {
                                    console.error(`Order with ID ${orderId} not found`);
                                }
                                if (updatedAnyOrder) {
                                    var vehicles2 = JSON.parse(localStorage.getItem('orders'));
                                    // console.log("Samad",vehicles2[lowershift][veh_index].trip['<%- t_id%>']);
                                    var tdata = vehicles2[lowershift][veh_index].trip.filter(trip => trip.trip_no == '<%- t_id%>')
                                    tdata = tripss
                                    console.log("TDATA---", tdata);

                                    var tripIndex = vehicles2[lowershift][veh_index].trip.findIndex(trip => trip.trip_no == '<%- t_id%>');
                                    vehicles2[lowershift][veh_index].trip[tripIndex] = tripss;
                                    // console.log('Updated JSON:', JSON.stringify(vehicles, null, 2));
                                    // console.log('Updated2 JSON:', JSON.stringify(vehicles2, null, 2));

                                    //     console.log("vehicleOrder",vehicles1);
                                    //     console.log("vehicles",vehicles);
                                    //     vehicles1[lowershift][veh_index] = vehicles;


                                    //    console.log(vehicles1)
                                    // Save the updated data back to localStorage

                                    localStorage.setItem('orders', JSON.stringify(vehicles2));

                                    // Log the updated JSON data
                                    console.log('Updated JSON:', vehicles2);

                                    // Re-call the function that populates the orders in the UI, if necessary
                                    orders_v(JSON.parse(localStorage.getItem('orders')));
                                } else {
                                    console.log('No orders were updated.');
                                }
                                // trip.erros = errors_window;


                            },
                            complete: function (req) {
                                window.location.reload();
                            }
                        });

                        // tripss.compartments.forEach(order1 => {
                        //     if (order1.order_id.toString() === orderId) { // Convert orderId to string for comparison
                        //         // Log before updating
                        //         console.log('Updating Order2:', order1);

                        //         // Update the target value
                        //         order1.loaded_volume = target;

                        //         // Log after updating
                        //         console.log('Order Updated:', order1);
                        //         orderUpdated = true;
                        //     }
                        // });

                        // });


                    });


                }
                function validateInputs() {
                    $('#editable_orders > div').each(function () {
                        // Retrieve the order ID (assuming it's the first hidden div)
                        let orderId = $(this).find('div').eq(0).text().trim();

                        // Find input fields of type 'number' and validate their values
                        $(this).find('input[type="number"]').each(function () {
                            let input = $(this);
                            let inputValue = parseFloat(input.val()); // Convert input value to a number
                            let dataValue = parseFloat(input.attr('data-value')); // Retrieve data value

                            console.log(`Order ID: ${orderId}, Input Value: ${inputValue}, Data Value: ${dataValue}`);

                            // Check if the input value is greater than the data value
                            if (inputValue > dataValue) {
                                // Optionally, you can focus on the input or reset its value
                                alert(`Error: Value ${inputValue} in order ${orderId} is greater than the allowed data value ${dataValue}`);
                                input.click();
                            }
                        });
                    });
                }

                function orders_v(veh_ord) {


                    veh_order.forEach((veh, index) => {

                        console.log("vehicleid", veh.id)
                        $.ajax({
                            url: 'get_vehicle_forOrders/' + veh.id,
                            type: 'GET',
                            dataType: 'json',
                            success: function (response) {
                                $('#veh_cv').val(response['name']);
                                $('#veh_max').val(response['trailer_size']);
                                // $('#veh_max').val(response['trailer_size']);
                                $('#veh_maxkg').val(response['weight']);
                                trip_index = veh.trip.find(t => t.trip_no == `<%- t_id%>`);
                                var id = veh.id;
                                var veh_index = veh_order.findIndex(item => item.id == id);
                                total = parseInt(veh.trailer_size);
                                var target1 = [];
                                var compartment1;
                                compartment_length = response['compartments'].length;
                                // Transform response compartments into an array of objects with numbers and sizes
                                compartment1 = response['compartments'].map(val => ({
                                    compartment_no: val.compartment_no,
                                    size: parseInt(val.loadable_volume)
                                }));


                                // Transform orders into the required format

                                var orders1 = trip_index.orders.map(order => ({
                                    order_id: order.orderId,
                                    shipTo: order.shipTo,
                                    product: order.materialCode,
                                    quantity: parseInt(order.target)
                                }));


                                // console.log(compartment_length)
                                let filtered_comprule = comprules.filter(comp => comp.compartments == compartment_length); // Corrected comparison and added return statement
                                // console.log(filtered_comprule);


                                var sortOrder = filtered_comprule[0]['seq'].split(',').map(num => Number(num) - 1);

                                // console.log(sortOrder1);
                                // console.log("seq", sortOrder);
                                let trailerCompartments = response['compartments'];
                                // console.log();
                                console.log('trailerCompartments,', trailerCompartments);

                                // Example usage of assignCompartments function with the custom sort order
                                // let sortOrder = [5,3, 4, 2, 0];  // Example sort order, adjust as needed

                                console.log(orders1)

                                console.log('trip_index', trip_index)
                                append_portion("result", veh.name)
                                // var assignments = processOrders(trip_index.orders, trip_index.compartments, sortOrder, veh.name);
                                // veh_order[veh_index].compartments = assignments;
                                // console.log("final Order", veh_order);
                                // console.log("Vehicle Orders:", assignments);
                                // generateCompartmentTable(veh_order);
                                // } else {
                                //     console.error("No matching rule found for the specified compartment length");
                                // }
                                // Define your custom sort order here

                                // Transform compartments into the required trailer format
                            },
                            error: function (xhr, status, error) {
                                console.error("Error fetching vehicle data:", error);
                            }
                        });
                    });
                }

                function calculateTotalTargetValue(orders) {
                    return orders.reduce((total, order) => total + parseInt(order.target), 0);
                }

                function generate() {
                    const shipment = veh_order;
                    console.log(shipment);
                    const tch = '0379';
                    const gsap = '1379';
                    var currentdate = new Date();
                    var datetime = ('0' + currentdate.getDate()).slice(-2) + "-" + ('0' + (currentdate.getMonth() + 1)).slice(-2) + "-" + currentdate.getFullYear() + "" + currentdate.getHours() + ":" + currentdate.getMinutes();
                    // console.log(datetime);
                    var sdate = ('0' + currentdate.getDate()).slice(-2) + "" + ('0' + (currentdate.getMonth() + 1)).slice(-2) + "" + currentdate.getFullYear().toString().substr(-2);


                    var line1 = "#TCH" + tch + "GSAP" + gsap + "" + datetime;
                    var line2 = "#BCH" + tch + "GSAPBS1" + gsap + "" + datetime;
                    var line3 = "B LTRK CZZZ" + sdate + "PM";
                    var line4 = "";
                    var line5 = "";
                    var line6 = "";
                    let output7 = "";
                    let output8 = "";
                    let line7 = "C";
                    let line8 = "";
                    shipment.forEach(ship => {
                        var identifier = ship.tractor_code;
                        var reg = ship.tractor_reg;
                        var end_depot = "1";
                        var f_end_depot = ship.end_depot;
                        var stime = "2100"
                        var etime = "0639"
                        var trips = "01"
                        var no_trail = "1";
                        var first_trail = "t" + ship.tractor_code;
                        var second_trail = "";
                        var third_trail = "";
                        const today = new Date()
                        const tomorrow = new Date(today)
                        tomorrow.setDate(today.getDate() + 1)
                        var start_date = ('0' + currentdate.getDate()).slice(-2) + "" + ('0' + (currentdate.getMonth() + 1)).slice(-2) + "" + currentdate.getFullYear().toString().substr(-2);
                        var end_date = ('0' + tomorrow.getDate()).slice(-2) + "" + ('0' + (tomorrow.getMonth() + 1)).slice(-2) + "" + tomorrow.getFullYear().toString().substr(-2);
                        identifier = identifier.padEnd(8, ' ')
                        reg = reg.padEnd(10, ' ')
                        end_depot = end_depot.padEnd(1, ' ')
                        f_end_depot = f_end_depot.padEnd(3, ' ')
                        sec_depot = '   ';
                        stime = stime.padEnd(4, ' ')
                        etime = etime.padEnd(4, ' ')
                        trips = trips.padEnd(2, ' ')
                        no_trail = no_trail.padEnd(1, ' ')
                        first_trail = first_trail.padEnd(8, ' ')
                        second_trail = second_trail.padEnd(8, ' ')
                        third_trail = third_trail.padEnd(8, ' ')
                        start_date = start_date.padEnd(6, ' ')
                        end_date = end_date.padEnd(6, ' ')
                        line4 = "T" + identifier + "" + reg + "" + end_depot + "" + f_end_depot + "" + sec_depot + "" + stime + "" + etime + "" + trips + "" + no_trail + "" + first_trail + "" + second_trail + "" + third_trail + "" + start_date + "" + end_date;
                        line4 = line4.padEnd(80, ' ');
                        const distinctMaterialCodes = [...new Set(ship.orders.map(order => order.materialCode))];

                        // console.log(distinctMaterialCodes);
                        var eta_sec_depot;
                        var code_sec_depot;
                        var time_spend_2;
                        var name_of_mate;
                        var trip_number = "01";
                        var n_start_depot = "1";
                        var start_depot = ship.load_depot;
                        var c_end_depot = ship.end_depot;
                        var stimet = "2100";
                        var estime = "0649";
                        var time_spend_1 = "0025";
                        var n_prods = "0" + distinctMaterialCodes.length;
                        var edistance = "0316";
                        var n_driver = "CHAKLALA SCOPE";
                        var code_driver = "CKLDRI";
                        var n_compartments = "0" + ship.compartments.length;
                        var n_orders = "0" + ship.orders.length;
                        trip_number = trip_number.padEnd(2, ' ')
                        n_start_depot = n_start_depot.padEnd(1, ' ')
                        start_depot = start_depot.padEnd(3, ' ')
                        stimet = stimet.padEnd(4, ' ')
                        code_sec_depot = '   ';
                        estime = estime.padEnd(4, ' ')
                        time_spend_1 = time_spend_1.padEnd(4, ' ')
                        time_spend_2 = '    ';
                        n_prods = n_prods.padEnd(2, ' ')
                        edistance = edistance.padEnd(4, ' ')
                        name_of_mate = '              ';
                        n_driver = n_driver.padEnd(14, ' ');
                        code_driver = code_driver.padEnd(6, ' ')
                        n_compartments = n_compartments.padEnd(2, ' ')
                        n_orders = n_orders.padEnd(2, ' ')
                        eta_sec_depot = '    ';



                        line5 = "R" + trip_number + "" + n_start_depot + "" + start_depot + "" + code_sec_depot + "" + c_end_depot + "" + stimet + "" + eta_sec_depot + "" + estime + "" + time_spend_1 + "" + time_spend_2 + "" + n_prods + "" + edistance + "" + name_of_mate + "" + n_driver + "" + code_driver + "" + n_compartments + "" + n_orders;
                        line5 = line5.padEnd(80, ' ');
                        var tdesc = "";
                        // var tstart = document.getElementById('tstart').value;
                        // var tend = document.getElementById('tend').value;
                        var ship_num = "9999999902";
                        var svcode = ship.tractor_reg + "CV";
                        tdesc = tdesc.padEnd(40, ' ')
                        // tstart = tstart.padEnd(6, ' ')
                        // tend = tend.padEnd(6, ' ')
                        ship_num = ship_num.padEnd(15, ' ')
                        svcode = svcode.padEnd(8, ' ')

                        var start_date1 = "140824";
                        var end_date1 = "150824";
                        line6 = "X" + tdesc + "" + start_date1.padEnd(6, ' ') + "" + end_date1.padEnd(6, ' ') + "" + ship_num + "" + svcode;
                        line6 = line6.padEnd(80, ' ');
                        ship.compartments.forEach((compartment, index) => {
                            let compartmentString = compartment.product_id.padEnd(12) + '   ' +
                                compartment.loaded_volume.toString().padStart(6, '0') +
                                f_end_depot.padEnd(3);

                            line7 += compartmentString;
                            // console.log(line7);

                            // If three compartments have been added or if it's the last compartment, add the line to output
                            if ((index + 1) % 3 === 0 || index === ship.compartments.length - 1) {
                                line7 = line7.padEnd(80); // Fill the remaining spaces to make the line 80 characters long
                                output7 += line7;
                                line7 = "\nC"; // Reset line for the next set of compartments
                            }
                        });

                        ship.orders.forEach(order => {

                            var onumber = order.orderId;
                            var pcode = order.shipTo;
                            var otype = "P";
                            var ostatus = "N";
                            var tcouple = "0";
                            var eta = "0129";
                            var trd = "0055";
                            var pweigth = "35000";
                            var n_prods1 = "01";
                            var sap_mcode = order.materialCode;
                            var tgcode = "   ";
                            var pqtyw = order.target;
                            var dates = end_date;
                            onumber = onumber.padEnd(11, ' ');
                            pcode = pcode.padEnd(12, ' ');
                            otype = otype.padEnd(1, ' ');
                            ostatus = ostatus.padEnd(1, ' ');
                            eta = eta.padEnd(4, ' ');
                            trd = trd.padEnd(4, ' ');
                            pweigth = pweigth.padEnd(6, ' ');
                            n_prods1 = n_prods1.padEnd(2, ' ');
                            sap_mcode = sap_mcode.padEnd(12, ' ');
                            tgcode = tgcode.padEnd(3, ' ');
                            pqtyw = pqtyw.padStart(6, '0');
                            dates = dates.padEnd(6, ' ');
                            line8 = "O" + onumber + "" + pcode + "" + otype + "" + ostatus + "" + tcouple + "" + eta + "" + trd + "" + pweigth + "" + n_prods1 + "" + sap_mcode + "" + tgcode + "" + pqtyw + "" + dates;
                            line8 = line8.padEnd(80, ' ');
                            // line8 += line8+"\n";
                            output8 += line8 + "\n";
                            const compartment = ship.compartments.filter(comp => comp.order_id === order.orderId);
                            // console.log(compartment);




                            const recordIdentifier = "L";
                            let output = '';
                            let line = recordIdentifier;
                            const tankCode = "";
                            for (let i = 0; i < compartment.length; i++) {
                                let compartments = compartment[i];

                                let compartmentInfo = compartments.order_id + compartments.product_id.toString().padEnd(12, ' ') +
                                    tankCode.padEnd(3, ' ') + compartments.compartment_no.toString().padStart(2, '0') + compartments.loaded_volume.toString().padStart(6, '0');

                                if (line.length + compartmentInfo.length > 80) {
                                    output += line.padEnd(80, ' ') + '\n';
                                    line = recordIdentifier + compartmentInfo;
                                } else {
                                    line += compartmentInfo;
                                }
                            }
                            if (line.length > 0) {
                                output += line.padEnd(80, ' ') + '\n';
                                output8 += output;
                            }
                            // console.log(output);


                            // line9 = line9.padEnd(80, ' ');

                            // console.log(line8);
                        });

                        // line4 += ""
                    });
                    line1 = line1.padEnd(80, ' ');
                    line2 = line2.padEnd(80, ' ');
                    line3 = line3.padEnd(80, ' ');
                    var line11 = "#BCT" + tch + "GSAPBS1" + gsap + "" + "000010";
                    line11 = line11.padEnd(80, ' ');

                    var line12 = "#TCT" + tch + "GSAP" + gsap + "" + "000012" + "" + "001";
                    line12 = line12.padEnd(80, ' ');


                    console.log(line1 + "\n" + line2 + "\n" + line3 + "\n" + line4 + "\n" + line5 + "\n" + line6 + "\n" + output7.padEnd(80, ' ') + "\n" + output8 + "" + line11 + "\n" + line12);

                    var text = line1 + "\n" + line2 + "\n" + line3 + "\n" + line4 + "\n" + line5 + "\n" + line6 + "\n" + output7.padEnd(80, ' ') + "\n" + output8 + "" + line11 + "\n" + line12;
                    console.log(text);
                    const link = document.createElement("a");
                    const file = new Blob([text], { type: 'text/plain' });

                    link.href = URL.createObjectURL(file);

                    link.download = "flow_flat_file_" + datetime + ".txt";
                    link.click();
                    URL.revokeObjectURL(link.href);

                }


                function allocateCompartments(orders, compartments, sequence, name, trailer_size, weight) {

                    compartments.forEach(comp => {
                        comp.used = false;
                    })
                    console.log("sequence", sequence);
                    console.log('order', orders)
                    let unallocatedOrders = [];
                    let allocatedCompartments = [];
                    // console.log("Recieved Orders",orders);
                    // console.log("Recieved Compartments",compartments);
                    // console.log("Recieved Sequence",sequence);

                    // Function to find a compartment by ID
                    console.log("compartments", compartments);
                    function findCompartmentById(id) {
                        console.log("id", id)
                        return compartments.find(compartment => compartment.id == id);
                    }


                    // Iterate through orders and try to allocate compartments
                    orders.forEach(order => {
                        let remainingQuantity = parseInt(order.target);
                        console.log("remaining qty ", typeof remainingQuantity, order)
                        let allocated = false;

                        // Attempt to allocate using exact compartment size
                        for (let i = 0; i < compartments.length; i++) {
                            let compartment = findCompartmentById(sequence[i] + 1); // Check in discharge sequence
                            console.log("compartment:", compartment);
                            // Check for exact match
                            console.log("compartment.used", compartment.used, compartment.used)
                            if (!compartment.used && compartment.size == remainingQuantity) {
                                console.log(`Allocating Order ${order.orderId} (${order.materialCode}) to Compartment ${compartment.id}`);
                                compartment.used = true; // Mark compartment as used
                                compartment.product = order.materialCode;
                                allocatedCompartments.push({
                                    compartment_no: compartment.id,
                                    compartmentNumber: compartment.id,
                                    product: order.materialCode,
                                    product_id: order.materialCode,
                                    shipto: order.shipTo,
                                    size: compartment.size,
                                    orderId: order.orderId,
                                    customerName: order.shipTo,
                                    customer_name: order.customerName,
                                    order_id: order.orderId,
                                    loaded_volume: compartment.size,
                                    allocatedQuantity: remainingQuantity
                                });
                                remainingQuantity = 0; // Fully allocated
                                allocated = true;
                                break; // Exit loop as allocation is done
                            }
                        }

                        // If the order is not fully allocated, check for partial allocations
                        if (remainingQuantity > 0) {
                            for (let i = 0; i < compartments.length; i++) {
                                let compartment = findCompartmentById(sequence[i] + 1);

                                // If compartment is unused and can fit some quantity
                                if (!compartment.used && compartment.size >= remainingQuantity) {
                                    console.log(`Allocating remaining quantity ${remainingQuantity} liters of Order ${order.orderId} to Compartment ${compartment.id}`);
                                    compartment.used = true;
                                    compartment.product = order.Product;

                                    allocatedCompartments.push({
                                        compartment_no: compartment.id,
                                        compartmentNumber: compartment.id,
                                        product: order.materialCode,
                                        product_id: order.materialCode,
                                        shipto: order.shipTo,
                                        size: compartment.size,
                                        orderId: order.orderId,
                                        customerName: order.shipTo,
                                        customer_name: order.customerName,
                                        order_id: order.orderId,
                                        loaded_volume: compartment.size,
                                        allocatedQuantity: remainingQuantity
                                    });

                                    remainingQuantity = 0; // Fully allocated
                                    allocated = true;
                                    break; // Exit loop as allocation is done
                                } else if (!compartment.used && compartment.size < remainingQuantity) {
                                    console.log("partial remaining", remainingQuantity)
                                    // Partially allocate if no single compartment can fully satisfy the order
                                    console.log(`Partially Allocating Order ${order.orderId} to Compartment ${compartment.id}`);
                                    compartment.used = true;
                                    compartment.product = order.materialCode;

                                    allocatedCompartments.push({
                                        compartment_no: compartment.id,
                                        compartmentNumber: compartment.id,
                                        product: order.materialCode,
                                        product_id: order.materialCode,
                                        shipto: order.shipTo,
                                        size: compartment.size,
                                        orderId: order.orderId,
                                        customerName: order.shipTo,
                                        customer_name: order.customerName,
                                        order_id: order.orderId,
                                        loaded_volume: compartment.size,
                                        allocatedQuantity: remainingQuantity // Allocate the full compartment size
                                    });

                                    remainingQuantity -= compartment.size; // Reduce remaining quantity
                                }
                            }
                        }

                        // If still not fully allocated, check for any other compatible compartments for the same customer and product
                        if (remainingQuantity > 0) {
                            errors_window.push({ "error_name": "Compartment Infeasible" });
                            console.log(`Order ${order.orderId} could not be fully allocated, remaining quantity: ${remainingQuantity}`);
                            // Try to find alternative compartments that are not used
                            for (let i = 0; i < compartments.length; i++) {
                                let compartment = findCompartmentById(sequence[i] + 1);

                                if (!compartment.used && compartment.size >= remainingQuantity) {
                                    console.log(`Allocating remaining quantity ${remainingQuantity} liters of Order ${order.orderId} to Compartment ${compartment.id} (alternative)`);
                                    compartment.used = true;
                                    compartment.product = order.Product;

                                    allocatedCompartments.push({
                                        compartment_no: compartment.id,
                                        compartmentNumber: compartment.id,
                                        product: order.materialCode,
                                        product_id: order.materialCode,
                                        shipto: order.shipTo,
                                        size: compartment.size,
                                        orderId: order.orderId,
                                        customerName: order.shipTo,
                                        customer_name: order.customerName,
                                        order_id: order.orderId,
                                        loaded_volume: compartment.size,
                                        allocatedQuantity: remainingQuantity
                                    });

                                    remainingQuantity = 0;//Fully allocated
                                    allocated = true;
                                    break; //Exit loop as allocation is done
                                }
                            }
                        }

                        // If still not fully allocated after all attempts, log the order as unallocated
                        if (remainingQuantity > 0) {
                            unallocatedOrders.push({ order: order.orderId, remainingQuantity });
                        }

                    });

                    if (errors_window.length > 0) {
                        $('#order_card').css('border-top', '1em solid #f7473a')
                    }
                    else {
                        $('#order_card').css('border-top', '1em solid rgb(23, 164, 151)')

                    }




                    // if (totalTargetValue > complete_order[0].trailer_size) {
                    //     if (!errors_window.some(error => error.error_name === 'Trip Volume Exceeds Vehicle Volume')) {
                    //         errors_window.push({ "error_name": 'Trip Volume Exceeds Vehicle Volume' });
                    //     }


                    // }

                    return { allocatedCompartments, unallocatedOrders };
                }

            </script>